{"config":{"lang":["en"],"separator":"[\\s\\.#:]","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"title":"module Nokogiri","text":"<section class=\"description\">\n<p><a href=\"Nokogiri.html\"><code>Nokogiri</code></a> parses and searches XML/HTML very quickly, and also has correctly implemented CSS3 selector support as well as XPath 1.0 support.</p>\n<p>Parsing a document returns either a <a href=\"Nokogiri/XML/Document.html\"><code>Nokogiri::XML::Document</code></a>, or a <a href=\"Nokogiri/HTML4/Document.html\"><code>Nokogiri::HTML4::Document</code></a> depending on the kind of document you parse.</p>\n<p>Here is an example:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'nokogiri'</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'open-uri'</span>\n\n<span class=\"ruby-comment\"># Get a Nokogiri::HTML4::Document for the page we\u2019re interested in...</span>\n\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span>(<span class=\"ruby-constant\">URI</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">'http://www.google.com/search?q=tenderlove'</span>))\n\n<span class=\"ruby-comment\"># Do funky things with it using Nokogiri::XML::Node methods...</span>\n\n<span class=\"ruby-comment\">####</span>\n<span class=\"ruby-comment\"># Search for nodes by css</span>\n<span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">css</span>(<span class=\"ruby-string\">'h3.r a.l'</span>).<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">link</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">link</span>.<span class=\"ruby-identifier\">content</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>See also:</p>\n<ul>\n<li>\n<p><a href=\"Nokogiri/XML/Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a> for more information about <a href=\"Nokogiri/CSS.html\"><code>CSS</code></a> searching</p>\n</li>\n<li>\n<p><a href=\"Nokogiri/XML/Searchable.html#method-i-xpath\"><code>Nokogiri::XML::Searchable#xpath</code></a> for more information about XPath searching</p>\n</li>\n</ul>\n</section>","location":"rdoc/Nokogiri.html"},{"title":"module Nokogiri.HTML(input, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block) \u2192 Nokogiri::HTML4::Document","text":"<p>Parse <a href=\"Nokogiri/HTML4.html\"><code>HTML</code></a>. Convenience method for <a href=\"Nokogiri/HTML4/Document.html#method-c-parse\"><code>Nokogiri::HTML4::Document.parse</code></a></p>","location":"rdoc/Nokogiri.html#method-c-HTML"},{"title":"module Nokogiri.HTML4(input, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block) \u2192 Nokogiri::HTML4::Document","text":"<p>Parse <a href=\"Nokogiri/HTML4.html\"><code>HTML</code></a>. Convenience method for <a href=\"Nokogiri/HTML4/Document.html#method-c-parse\"><code>Nokogiri::HTML4::Document.parse</code></a></p>","location":"rdoc/Nokogiri.html#method-c-HTML4"},{"title":"module Nokogiri.HTML5(input, url = nil, encoding = nil, **options, &block)","text":"<p>Since v1.12.0</p><p>\u26a0 <a href=\"Nokogiri/HTML5.html\"><code>HTML5</code></a> functionality is not available when running JRuby.</p><p>Parse an <a href=\"Nokogiri/HTML5.html\"><code>HTML5</code></a> document. Convenience method for {Nokogiri::HTML5::Document.parse}</p>","location":"rdoc/Nokogiri.html#method-c-HTML5"},{"title":"module Nokogiri.Slop(*args, &block)","text":"<p>Parse a document and add the <a href=\"Nokogiri.html#method-c-Slop\"><code>Slop</code></a> decorator.  The <a href=\"Nokogiri.html#method-c-Slop\"><code>Slop</code></a> decorator implements method_missing such that methods may be used instead of <a href=\"Nokogiri/CSS.html\"><code>CSS</code></a> or XPath.  For example:</p>","location":"rdoc/Nokogiri.html#method-c-Slop"},{"title":"module Nokogiri.XML(thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_XML, &block)","text":"<p>Parse <a href=\"Nokogiri/XML.html\"><code>XML</code></a>.  Convenience method for <a href=\"Nokogiri/XML/Document.html#method-c-parse\"><code>Nokogiri::XML::Document.parse</code></a></p>","location":"rdoc/Nokogiri.html#method-c-XML"},{"title":"module Nokogiri.XSLT(stylesheet, modules = {})","text":"<p>Create a <a href=\"Nokogiri/XSLT/Stylesheet.html\"><code>Nokogiri::XSLT::Stylesheet</code></a> with <code>stylesheet</code>.</p><p>Example:</p>","location":"rdoc/Nokogiri.html#method-c-XSLT"},{"title":"module Nokogiri.make(input = nil, opts = {}, &blk)","text":"<p>Create a new <a href=\"Nokogiri/XML/DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a></p>","location":"rdoc/Nokogiri.html#method-c-make"},{"title":"module Nokogiri.parse(string, url = nil, encoding = nil, options = nil) { |doc| ... }","text":"<p>Parse an <a href=\"Nokogiri/HTML4.html\"><code>HTML</code></a> or <a href=\"Nokogiri/XML.html\"><code>XML</code></a> document.  <code>string</code> contains the document.</p>","location":"rdoc/Nokogiri.html#method-c-parse"},{"title":"class Object","text":"<section class=\"description\">\n</section>","location":"rdoc/Object.html"},{"title":"class Object#Nokogiri(*args, &block)","text":"<p>Parse a document contained in <code>args</code>.  <a href=\"Nokogiri.html\"><code>Nokogiri</code></a> will try to guess what type of document you are attempting to parse.  For more information, see <a href=\"Nokogiri.html#method-c-parse\"><code>Nokogiri.parse</code></a></p><p>To specify the type of document, use {Nokogiri.XML}, {Nokogiri.HTML4}, or {Nokogiri.HTML5}.</p>","location":"rdoc/Object.html#method-i-Nokogiri"},{"title":"Nokogiri\u00b6 \u2191","text":"","location":"rdoc/README_md.html"},{"title":"module XSD","text":"<section class=\"description\">\n</section>","location":"rdoc/XSD.html"},{"title":"module Nokogiri::CSS","text":"<section class=\"description\">\n<p>Translate a <a href=\"CSS.html\"><code>CSS</code></a> selector into an XPath 1.0 query</p>\n</section>","location":"rdoc/Nokogiri/CSS.html"},{"title":"module Nokogiri::CSS.xpath_for(selector_list) \u2192 Array<String>","text":"<p>Translate a <a href=\"CSS.html\"><code>CSS</code></a> selector list to the equivalent XPath expressions.</p><p>\ud83d\udca1 Note that translated queries are cached by default for performance concerns.</p><p>\u26a0 Users should prefer <a href=\"XML/Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a>, which is mixed into all document and node classes, for querying documents with <a href=\"CSS.html\"><code>CSS</code></a> selectors. This method is the underlying mechanism used by <a href=\"XML/Searchable.html\"><code>XML::Searchable</code></a> and is provided solely for advanced users to translate CSS selectors to XPath directly.</p><p>Also see <a href=\"XML/Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a> for documentation on supported <a href=\"CSS.html\"><code>CSS</code></a> selector features, some extended syntax that <a href=\"../Nokogiri.html\"><code>Nokogiri</code></a> supports, and advanced <a href=\"CSS.html\"><code>CSS</code></a> features like pseudo-class functions.</p><p><code>selector_list</code> (String)</p><p>The <a href=\"CSS.html\"><code>CSS</code></a> selector to be translated into XPath. This is always a String, but that string value may be a <a href=\"https://www.w3.org/TR/selectors-4/#grouping\">selector list</a> (see examples).</p><p><code>prefix:</code> (String)</p><p>The XPath expression prefix which determines the search context. See <a href=\"XML/XPath.html\"><code>Nokogiri::XML::XPath</code></a> for standard options. Default is <code>XPath::GLOBAL_SEARCH_PREFIX</code>.</p><p><code>ns:</code> (Hash&lt;String \u21d2 String&gt;, nil)</p><p>Namespaces that are referenced in the query, if any. This is a hash where the keys are the namespace prefix and the values are the namespace URIs. Default is <code>nil</code> indicating an empty set of namespaces.</p><p><code>visitor:</code> (<a href=\"CSS/XPathVisitor.html\"><code>Nokogiri::CSS::XPathVisitor</code></a>)</p><p>Use this <a href=\"CSS/XPathVisitor.html\"><code>XPathVisitor</code></a> object to transform the <a href=\"CSS.html\"><code>CSS</code></a> AST into XPath expressions. See <a href=\"CSS/XPathVisitor.html\"><code>Nokogiri::CSS::XPathVisitor</code></a> for more information on some of the complex behavior that can be customized for your document type. Default is <code>Nokogiri::CSS::XPathVisitor.new</code>.</p><p>\u26a0 Note that this option is mutually exclusive with <code>prefix</code> and <code>ns</code>. If <code>visitor</code> is provided, <code>prefix</code> and <code>ns</code> must not be present.</p><p><code>cache:</code> (Boolean)</p><p>Whether to use the SelectorCache for the translated query to ensure that repeated queries don\u2019t incur the overhead of re-parsing the selector. Default is <code>true</code>.</p><p>(Array&lt;String&gt;) The equivalent set of XPath expressions for <code>selector_list</code></p><p><strong>Example</strong> with a simple selector:</p><p><strong>Example</strong> with a compound selector:</p><p><strong>Example</strong> with a complex selector:</p><p><strong>Example</strong> with a selector list:</p>","location":"rdoc/Nokogiri/CSS.html#method-c-xpath_for"},{"title":"module Nokogiri::ClassResolver","text":"<section class=\"description\">\n<p>Some classes in <a href=\"../Nokogiri.html\"><code>Nokogiri</code></a> are namespaced as a group, for example Document, DocumentFragment, and Builder.</p>\n<p>It\u2019s sometimes necessary to look up the related class, e.g.:</p>\n<pre class=\"ruby\"><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span> <span class=\"ruby-identifier\">\u2192</span> <span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>\n<span class=\"ruby-constant\">HTML4</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span> <span class=\"ruby-identifier\">\u2192</span> <span class=\"ruby-constant\">HTML4</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>\n<span class=\"ruby-constant\">HTML5</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span> <span class=\"ruby-identifier\">\u2192</span> <span class=\"ruby-constant\">HTML5</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">DocumentFragment</span>\n</pre>\n<p>This module is included into those key classes who need to do this.</p>\n</section>","location":"rdoc/Nokogiri/ClassResolver.html"},{"title":"module Nokogiri::ClassResolver#related_class(class_name) \u2192 Class","text":"<p>Find a class constant within the</p><p>Some examples:</p><p>Note this will also work for subclasses that follow the same convention, e.g.:</p><p>And even if it\u2019s a subclass, this will iterate through the superclasses:</p>","location":"rdoc/Nokogiri/ClassResolver.html#method-i-related_class"},{"title":"module Nokogiri::Decorators","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/Decorators.html"},{"title":"class Nokogiri::EncodingHandler","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/EncodingHandler.html"},{"title":"class Nokogiri::EncodingHandler.Nokogiri::EncodingHandler.[](name)","text":"<p>Get the encoding handler for <code>name</code></p>","location":"rdoc/Nokogiri/EncodingHandler.html#method-c-5B-5D"},{"title":"class Nokogiri::EncodingHandler.Nokogiri::EncodingHandler.alias(real_name, alias_name)","text":"<p>Alias encoding handler with name <code>real_name</code> to name <code>alias_name</code></p>","location":"rdoc/Nokogiri/EncodingHandler.html#method-c-alias"},{"title":"class Nokogiri::EncodingHandler.Nokogiri::EncodingHandler.clear_aliases!","text":"<p>Remove all encoding aliases.</p>","location":"rdoc/Nokogiri/EncodingHandler.html#method-c-clear_aliases-21"},{"title":"class Nokogiri::EncodingHandler.Nokogiri::EncodingHandler.delete(name)","text":"<p>Delete the encoding alias named <code>name</code></p>","location":"rdoc/Nokogiri/EncodingHandler.html#method-c-delete"},{"title":"class Nokogiri::EncodingHandler.install_default_aliases()","text":"","location":"rdoc/Nokogiri/EncodingHandler.html#method-c-install_default_aliases"},{"title":"class Nokogiri::EncodingHandler#name","text":"<p>Get the name of this <a href=\"EncodingHandler.html\"><code>EncodingHandler</code></a></p>","location":"rdoc/Nokogiri/EncodingHandler.html#method-i-name"},{"title":"module Nokogiri::Gumbo","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/Gumbo.html"},{"title":"module Nokogiri::HTML4","text":"<section class=\"description\">\n<p>\ud83d\udca1 This module/namespace is an alias for <a href=\"HTML4.html\"><code>Nokogiri::HTML4</code></a> as of v1.12.0. Before v1.12.0,</p>\n<pre>Nokogiri::HTML4 did not exist, and this was the module/namespace for all HTML-related\nclasses.</pre>\n<p>Since v1.12.0</p>\n<p>\ud83d\udca1 Before v1.12.0, <a href=\"HTML4.html\"><code>Nokogiri::HTML4</code></a> did not exist, and <a href=\"HTML4.html\"><code>Nokogiri::HTML</code></a> was the module/namespace for parsing <a href=\"HTML4.html\"><code>HTML</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/HTML4.html"},{"title":"module Nokogiri::HTML4.fragment(string, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","text":"<p>Parse a fragment from <code>string</code> in to a NodeSet.</p>","location":"rdoc/Nokogiri/HTML4.html#method-c-fragment"},{"title":"module Nokogiri::HTML4.parse(input, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","text":"<p>Parse <a href=\"HTML4.html\"><code>HTML</code></a>. Convenience method for <a href=\"HTML4/Document.html#method-c-parse\"><code>Nokogiri::HTML4::Document.parse</code></a></p>","location":"rdoc/Nokogiri/HTML4.html#method-c-parse"},{"title":"module Nokogiri::HTML5","text":"<section class=\"description\">\n<h2 id=\"module-Nokogiri::HTML5-label-Usage\">Usage<span><a href=\"#module-Nokogiri::HTML5-label-Usage\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>\u26a0 <a href=\"HTML5.html\"><code>HTML5</code></a> functionality is not available when running JRuby.</p>\n<p>Parse an <a href=\"HTML5.html\"><code>HTML5</code></a> document:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span>.<span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">string</span>)\n</pre>\n<p>Parse an <a href=\"HTML5.html\"><code>HTML5</code></a> fragment:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fragment</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>.<span class=\"ruby-identifier\">fragment</span>(<span class=\"ruby-identifier\">string</span>)\n</pre>\n<h2 id=\"module-Nokogiri::HTML5-label-Parsing+options\">Parsing options<span><a href=\"#module-Nokogiri::HTML5-label-Parsing+options\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>The document and fragment parsing methods support options that are different from Nokogiri\u2019s.</p>\n<ul>\n<li>\n<p><code>Nokogiri.HTML5(html, url = nil, encoding = nil, **options)</code></p>\n</li>\n<li>\n<p><code>Nokogiri::HTML5.parse(html, url = nil, encoding = nil, **options)</code></p>\n</li>\n<li>\n<p><code>Nokogiri::HTML5::Document.parse(html, url = nil, encoding = nil, **options)</code></p>\n</li>\n<li>\n<p><code>Nokogiri::HTML5.fragment(html, encoding = nil, **options)</code></p>\n</li>\n<li>\n<p><code>Nokogiri::HTML5::DocumentFragment.parse(html, encoding = nil, **options)</code></p>\n</li>\n</ul>\n<p>The four currently supported options are <code>:max_errors</code>, <code>:max_tree_depth</code>, <code>:max_attributes</code>, and <code>:parse_noscript_content_as_text</code> described below.</p>\n<h3 id=\"module-Nokogiri::HTML5-label-Error+reporting\">Error reporting<span><a href=\"#module-Nokogiri::HTML5-label-Error+reporting\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p><a href=\"../Nokogiri.html\"><code>Nokogiri</code></a> contains an experimental <a href=\"HTML5.html\"><code>HTML5</code></a> parse error reporting facility. By default, no parse errors are reported but this can be configured by passing the <code>:max_errors</code> option to <a href=\"HTML5.html#method-c-parse\"><code>HTML5.parse</code></a> or <a href=\"HTML5.html#method-c-fragment\"><code>HTML5.fragment</code></a>.</p>\n<p>For example, this script:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">'&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;'</span>, <span class=\"ruby-value\">max_errors:</span> <span class=\"ruby-value\">10</span>)\n<span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">err</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">puts</span>(<span class=\"ruby-identifier\">err</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>Emits:</p>\n<pre>1:1: ERROR: Expected a doctype token\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n^\n1:1: ERROR: Start tag of nonvoid HTML element ends with '/&gt;', use '&gt;'.\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n^\n1:17: ERROR: End tag ends with '/&gt;', use '&gt;'.\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n                ^\n1:17: ERROR: End tag contains attributes.\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n                ^</pre>\n<p>Using <code>max_errors: -1</code> results in an unlimited number of errors being returned.</p>\n<p>The errors returned by <a href=\"XML/Document.html#attribute-i-errors\"><code>HTML5::Document#errors</code></a> are instances of <a href=\"XML/SyntaxError.html\"><code>Nokogiri::XML::SyntaxError</code></a>.</p>\n<p>The <a href=\"https://html.spec.whatwg.org/multipage/parsing.html#parse-errors\">HTML standard</a> defines a number of standard parse error codes. These error codes only cover the \u201ctokenization\u201d stage of parsing <a href=\"HTML4.html\"><code>HTML</code></a>. The parse errors in the \u201ctree construction\u201d stage do not have standardized error codes (yet).</p>\n<p>As a convenience to <a href=\"../Nokogiri.html\"><code>Nokogiri</code></a> users, the defined error codes are available via <a href=\"XML/SyntaxError.html#attribute-i-str1\"><code>Nokogiri::XML::SyntaxError#str1</code></a> method.</p>\n<pre>doc = Nokogiri::HTML5.parse('&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;', max_errors: 10)\ndoc.errors.each do |err|\n  puts(\"#{err.line}:#{err.column}: #{err.str1}\")\nend\ndoc = Nokogiri::HTML5.parse('&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;',\n# =&gt; 1:1: generic-parser\n#    1:1: non-void-html-element-start-tag-with-trailing-solidus\n#    1:17: end-tag-with-trailing-solidus\n#    1:17: end-tag-with-attributes</pre>\n<p>Note that the first error is <code>generic-parser</code> because it\u2019s an error from the tree construction stage and doesn\u2019t have a standardized error code.</p>\n<p>For the purposes of semantic versioning, the error messages, error locations, and error codes are not part of Nokogiri\u2019s public API. That is, these are subject to change without Nokogiri\u2019s major version number changing. These may be stabilized in the future.</p>\n<h3 id=\"module-Nokogiri::HTML5-label-Maximum+tree+depth\">Maximum tree depth<span><a href=\"#module-Nokogiri::HTML5-label-Maximum+tree+depth\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>The maximum depth of the DOM tree parsed by the various parsing methods is configurable by the <code>:max_tree_depth</code> option. If the depth of the tree would exceed this limit, then an <code>ArgumentError</code> is thrown.</p>\n<p>This limit (which defaults to <code>Nokogiri::Gumbo::DEFAULT_MAX_TREE_DEPTH</code>) can be removed by giving the option <code>max_tree_depth: -1</code>.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">html</span> = <span class=\"ruby-string\">'&lt;!DOCTYPE html&gt;'</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-string\">'&lt;div&gt;'</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">1000</span>\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span>.<span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">html</span>)\n<span class=\"ruby-comment\"># raises ArgumentError: Document tree depth limit exceeded</span>\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span>.<span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">html</span>, <span class=\"ruby-value\">max_tree_depth:</span> <span class=\"ruby-value\">-1</span>)\n</pre>\n<h3 id=\"module-Nokogiri::HTML5-label-Attribute+limit+per+element\">Attribute limit per element<span><a href=\"#module-Nokogiri::HTML5-label-Attribute+limit+per+element\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>The maximum number of attributes per DOM element is configurable by the <code>:max_attributes</code> option. If a given element would exceed this limit, then an <code>ArgumentError</code> is thrown.</p>\n<p>This limit (which defaults to <code>Nokogiri::Gumbo::DEFAULT_MAX_ATTRIBUTES</code>) can be removed by giving the option <code>max_attributes: -1</code>.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">html</span> = <span class=\"ruby-string\">'&lt;!DOCTYPE html&gt;&lt;div '</span> <span class=\"ruby-operator\">+</span> (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">1000</span>).<span class=\"ruby-identifier\">map</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">x</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-node\">\"attr-#{x}\"</span> }.<span class=\"ruby-identifier\">join</span>(<span class=\"ruby-string\">' # '</span>) <span class=\"ruby-operator\">+</span> <span class=\"ruby-string\">'&gt;'</span>\n<span class=\"ruby-comment\"># \"&lt;!DOCTYPE html&gt;&lt;div attr-1 attr-2 attr-3 ... attr-1000&gt;\"</span>\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span>.<span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">html</span>)\n<span class=\"ruby-comment\"># raises ArgumentError: Attributes per element limit exceeded</span>\n\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span>.<span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">html</span>, <span class=\"ruby-value\">max_attributes:</span> <span class=\"ruby-value\">-1</span>)\n<span class=\"ruby-comment\"># parses successfully</span>\n</pre>\n<h3 id=\"module-Nokogiri::HTML5-label-Parse+noscript+elements-27+content+as+text\">Parse <code>noscript</code> elements\u2019 content as text<span><a href=\"#module-Nokogiri::HTML5-label-Parse+noscript+elements-27+content+as+text\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>By default, the content of <code>noscript</code> elements is parsed as <a href=\"HTML4.html\"><code>HTML</code></a> elements. Browsers that support scripting parse the content of <code>noscript</code> elements as raw text.</p>\n<p>The <code>:parse_noscript_content_as_text</code> option causes <a href=\"../Nokogiri.html\"><code>Nokogiri</code></a> to parse the content of <code>noscript</code> elements as a single text node.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">html</span> = <span class=\"ruby-string\">\"&lt;!DOCTYPE html&gt;&lt;noscript&gt;&lt;meta charset='UTF-8'&gt;&lt;link rel=stylesheet href=!&gt;&lt;/noscript&gt;\"</span>\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">html</span>, <span class=\"ruby-value\">parse_noscript_content_as_text:</span> <span class=\"ruby-keyword\">true</span>)\n<span class=\"ruby-identifier\">pp</span> <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">at_xpath</span>(<span class=\"ruby-string\">\"/html/head/noscript\"</span>)\n<span class=\"ruby-comment\"># =&gt; #(Element:0x878c {</span>\n<span class=\"ruby-comment\">#        name = \"noscript\",</span>\n<span class=\"ruby-comment\">#        children = [ #(Text \"&lt;meta charset='UTF-8'&gt;&lt;link rel=stylesheet href=!&gt;\")]</span>\n<span class=\"ruby-comment\">#      })</span>\n</pre>\n<p>In contrast, <code>parse_noscript_content_as_text: false</code> (the default) causes the <code>noscript</code> element in the previous example to have two children, a <code>meta</code> element and a <code>link</code> element.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">html</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">at_xpath</span>(<span class=\"ruby-string\">\"/html/head/noscript\"</span>)\n<span class=\"ruby-comment\"># =&gt; #(Element:0x96b4 {</span>\n<span class=\"ruby-comment\">#      name = \"noscript\",</span>\n<span class=\"ruby-comment\">#      children = [</span>\n<span class=\"ruby-comment\">#        #(Element:0x97e0 { name = \"meta\", attribute_nodes = [ #(Attr:0x990c { name = \"charset\", value = \"UTF-8\" })] }),</span>\n<span class=\"ruby-comment\">#        #(Element:0x9b00 {</span>\n<span class=\"ruby-comment\">#          name = \"link\",</span>\n<span class=\"ruby-comment\">#          attribute_nodes = [</span>\n<span class=\"ruby-comment\">#            #(Attr:0x9c2c { name = \"rel\", value = \"stylesheet\" }),</span>\n<span class=\"ruby-comment\">#            #(Attr:0x9dd0 { name = \"href\", value = \"!\" })]</span>\n<span class=\"ruby-comment\">#          })]</span>\n<span class=\"ruby-comment\">#      })</span>\n</pre>\n<h2 id=\"module-Nokogiri::HTML5-label-HTML+Serialization\">\n<a href=\"HTML4.html\"><code>HTML</code></a> Serialization<span><a href=\"#module-Nokogiri::HTML5-label-HTML+Serialization\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>After parsing <a href=\"HTML4.html\"><code>HTML</code></a>, it may be serialized using any of the <a href=\"XML/Node.html\"><code>Nokogiri::XML::Node</code></a> serialization methods. In particular, <a href=\"XML/Node.html#method-i-serialize\"><code>XML::Node#serialize</code></a>, <a href=\"XML/Node.html#method-i-to_html\"><code>XML::Node#to_html</code></a>, and <a href=\"XML/Node.html#method-i-to_s\"><code>XML::Node#to_s</code></a> will serialize a given node and its children. (This is the equivalent of JavaScript\u2019s <code>Element.outerHTML</code>.) Similarly, <a href=\"XML/Node.html#method-i-inner_html\"><code>XML::Node#inner_html</code></a> will serialize the children of a given node. (This is the equivalent of JavaScript\u2019s <code>Element.innerHTML</code>.)</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-string\">\"&lt;!DOCTYPE html&gt;&lt;span&gt;Hello world!&lt;/span&gt;\"</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">serialize</span>\n<span class=\"ruby-comment\"># =&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;span&gt;Hello world!&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;</span>\n</pre>\n<p>Due to quirks in how <a href=\"HTML4.html\"><code>HTML</code></a> is parsed and serialized, it\u2019s possible for a DOM tree to be serialized and then re-parsed, resulting in a different DOM. Mostly, this happens with DOMs produced from invalid <a href=\"HTML4.html\"><code>HTML</code></a>. Unfortunately, even valid <a href=\"HTML4.html\"><code>HTML</code></a> may not survive serialization and re-parsing.</p>\n<p>In particular, a newline at the start of <code>pre</code>, <code>listing</code>, and <code>textarea</code> elements is ignored by the parser.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">&lt;&lt;-EOF</span>)\n<span class=\"ruby-value\">&lt;!DOCTYPE html&gt;\n&lt;pre&gt;\nContent&lt;/pre&gt;\n</span><span class=\"ruby-identifier\">EOF</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">at</span>(<span class=\"ruby-string\">'/html/body/pre'</span>).<span class=\"ruby-identifier\">serialize</span>\n<span class=\"ruby-comment\"># =&gt; &lt;pre&gt;Content&lt;/pre&gt;</span>\n</pre>\n<p>In this case, the original <a href=\"HTML4.html\"><code>HTML</code></a> is semantically equivalent to the serialized version. If the <code>pre</code>, <code>listing</code>, or <code>textarea</code> content starts with two newlines, the first newline will be stripped on the first parse and the second newline will be stripped on the second, leading to semantically different DOMs. Passing the parameter <code>preserve_newline: true</code> will cause two or more newlines to be preserved. (A single leading newline will still be removed.)</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">&lt;&lt;-EOF</span>)\n<span class=\"ruby-value\">&lt;!DOCTYPE html&gt;\n&lt;listing&gt;\n\nContent&lt;/listing&gt;\n</span><span class=\"ruby-identifier\">EOF</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">at</span>(<span class=\"ruby-string\">'/html/body/listing'</span>).<span class=\"ruby-identifier\">serialize</span>(<span class=\"ruby-value\">preserve_newline:</span> <span class=\"ruby-keyword\">true</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;listing&gt;</span>\n<span class=\"ruby-comment\">#</span>\n<span class=\"ruby-comment\">#    Content&lt;/listing&gt;</span>\n</pre>\n<h2 id=\"module-Nokogiri::HTML5-label-Encodings\">Encodings<span><a href=\"#module-Nokogiri::HTML5-label-Encodings\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p><a href=\"../Nokogiri.html\"><code>Nokogiri</code></a> always parses <a href=\"HTML5.html\"><code>HTML5</code></a> using <a href=\"https://en.wikipedia.org/wiki/UTF-8\">UTF-8</a>; however, the encoding of the input can be explicitly selected via the optional <code>encoding</code> parameter. This is most useful when the input comes not from a string but from an IO object.</p>\n<p>When serializing a document or node, the encoding of the output string can be specified via the <code>:encoding</code> options. Characters that cannot be encoded in the selected encoding will be encoded as <a href=\"https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references\">HTML numeric entities</a>.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">frag</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>.<span class=\"ruby-identifier\">fragment</span>(<span class=\"ruby-string\">'&lt;span&gt;\uc544\ub294 \uae38\ub3c4 \ubb3c\uc5b4\uac00\ub77c&lt;/span&gt;'</span>)\n<span class=\"ruby-identifier\">html</span> = <span class=\"ruby-identifier\">frag</span>.<span class=\"ruby-identifier\">serialize</span>(<span class=\"ruby-value\">encoding:</span> <span class=\"ruby-string\">'US-ASCII'</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">html</span>\n<span class=\"ruby-comment\"># =&gt; &lt;span&gt;&amp;#xc544;&amp;#xb294; &amp;#xae38;&amp;#xb3c4; &amp;#xbb3c;&amp;#xc5b4;&amp;#xac00;&amp;#xb77c;&lt;/span&gt;</span>\n\n<span class=\"ruby-identifier\">frag</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span>.<span class=\"ruby-identifier\">fragment</span>(<span class=\"ruby-identifier\">html</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">frag</span>.<span class=\"ruby-identifier\">serialize</span>\n<span class=\"ruby-comment\"># =&gt; &lt;span&gt;\uc544\ub294 \uae38\ub3c4 \ubb3c\uc5b4\uac00\ub77c&lt;/span&gt;</span>\n</pre>\n<p>(There\u2019s a <a href=\"https://bugs.ruby-lang.org/issues/15033\">bug</a> in all current versions of Ruby that can cause the entity encoding to fail. Of the mandated supported encodings for <a href=\"HTML4.html\"><code>HTML</code></a>, the only encoding I\u2019m aware of that has this bug is <code>'ISO-2022-JP'</code>. We recommend avoiding this encoding.)</p>\n<h2 id=\"module-Nokogiri::HTML5-label-Notes\">Notes<span><a href=\"#module-Nokogiri::HTML5-label-Notes\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<ul>\n<li>\n<p>The <a href=\"HTML5.html#method-c-fragment\"><code>Nokogiri::HTML5.fragment</code></a> function takes a String or IO and parses it as a <a href=\"HTML5.html\"><code>HTML5</code></a> document in a <code>body</code> context. As a result, the <code>html</code>, <code>head</code>, and <code>body</code> elements are removed from this document, and any children of these elements that remain are returned as a <a href=\"HTML5/DocumentFragment.html\"><code>Nokogiri::HTML5::DocumentFragment</code></a>; but you can pass in a different context (e.g., \u201chtml\u201d to get <code>head</code> and <code>body</code> tags in the result).</p>\n</li>\n<li>\n<p>The <a href=\"HTML5.html#method-c-parse\"><code>Nokogiri::HTML5.parse</code></a> function takes a String or IO and passes it to the <code>gumbo_parse_with_options</code> method, using the default options.  The resulting <a href=\"Gumbo.html\"><code>Gumbo</code></a> parse tree is then walked.</p>\n</li>\n<li>\n<p>Instead of uppercase element names, lowercase element names are produced.</p>\n</li>\n<li>\n<p>Instead of returning <code>unknown</code> as the element name for unknown tags, the original tag name is returned verbatim.</p>\n</li>\n</ul>\n<p>Since v1.12.0</p>\n</section>","location":"rdoc/Nokogiri/HTML5.html"},{"title":"module Nokogiri::HTML5.fragment(string, encoding = nil, **options)","text":"<p>Parse a fragment from <code>string</code>. Convenience method for <a href=\"HTML5/DocumentFragment.html#method-c-parse\"><code>Nokogiri::HTML5::DocumentFragment.parse</code></a>.</p>","location":"rdoc/Nokogiri/HTML5.html#method-c-fragment"},{"title":"module Nokogiri::HTML5.parse(string, url = nil, encoding = nil, **options, &block)","text":"<p>Parse an <a href=\"HTML4.html\"><code>HTML</code></a> 5 document. Convenience method for <a href=\"HTML5/Document.html#method-c-parse\"><code>Nokogiri::HTML5::Document.parse</code></a></p>","location":"rdoc/Nokogiri/HTML5.html#method-c-parse"},{"title":"class Nokogiri::SyntaxError","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/SyntaxError.html"},{"title":"module Nokogiri::XML","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML.html"},{"title":"module Nokogiri::XML.Reader(string_or_io, url = nil, encoding = nil, options = ParseOptions::STRICT) { |options| ... }","text":"<p>Parse an <a href=\"XML.html\"><code>XML</code></a> document using the <a href=\"XML/Reader.html\"><code>Nokogiri::XML::Reader</code></a> API.  See <a href=\"XML/Reader.html\"><code>Nokogiri::XML::Reader</code></a> for more information</p>","location":"rdoc/Nokogiri/XML.html#method-c-Reader"},{"title":"module Nokogiri::XML.RelaxNg(input) \u2192 Nokogiri::XML::RelaxNG","text":"<p>Parse a RELAX NG schema definition and create a new <a href=\"XML/Schema.html\"><code>Schema</code></a> object. This is a convenience method for <a href=\"XML/RelaxNG.html#method-c-new\"><code>Nokogiri::XML::RelaxNG.new</code></a></p><p>See related: <a href=\"XML/RelaxNG.html#method-c-new\"><code>Nokogiri::XML::RelaxNG.new</code></a></p><p><code>input</code> (String, IO) RELAX NG schema definition</p><p><code>parse_options</code> (<a href=\"XML/ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) Defaults to ParseOptions::DEFAULT_SCHEMA</p><p><a href=\"XML/RelaxNG.html\"><code>Nokogiri::XML::RelaxNG</code></a></p>","location":"rdoc/Nokogiri/XML.html#method-c-RelaxNG"},{"title":"module Nokogiri::XML.Schema(input) \u2192 Nokogiri::XML::Schema","text":"<p>Parse an <a href=\"../XSD.html\"><code>XSD</code></a> schema definition and create a new {Schema} object. This is a convenience method for <a href=\"XML/Schema.html#method-c-new\"><code>Nokogiri::XML::Schema.new</code></a></p><p>See related: <a href=\"XML/Schema.html#method-c-new\"><code>Nokogiri::XML::Schema.new</code></a></p><p><code>input</code> (String, IO) <a href=\"../XSD.html\"><code>XSD</code></a> schema definition</p><p><code>parse_options</code> (<a href=\"XML/ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>)</p><p><a href=\"XML/Schema.html\"><code>Nokogiri::XML::Schema</code></a></p>","location":"rdoc/Nokogiri/XML.html#method-c-Schema"},{"title":"module Nokogiri::XML.fragment(string, options = ParseOptions::DEFAULT_XML, &block)","text":"<p>Parse a fragment from <code>string</code> in to a <a href=\"XML/NodeSet.html\"><code>NodeSet</code></a>.</p>","location":"rdoc/Nokogiri/XML.html#method-c-fragment"},{"title":"module Nokogiri::XML.parse(thing, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &block)","text":"<p>Parse <a href=\"XML.html\"><code>XML</code></a>.  Convenience method for <a href=\"XML/Document.html#method-c-parse\"><code>Nokogiri::XML::Document.parse</code></a></p>","location":"rdoc/Nokogiri/XML.html#method-c-parse"},{"title":"module Nokogiri::XSLT","text":"<section class=\"description\">\n<p>See <a href=\"XSLT/Stylesheet.html\"><code>Nokogiri::XSLT::Stylesheet</code></a> for creating and manipulating <a href=\"XSLT/Stylesheet.html\"><code>Stylesheet</code></a> object.</p>\n</section>","location":"rdoc/Nokogiri/XSLT.html"},{"title":"module Nokogiri::XSLT.parse(xsl) \u2192 Nokogiri::XSLT::Stylesheet","text":"<p>Parse the stylesheet in <code>xsl</code>, registering optional <code>modules</code> as custom class handlers.</p><p><code>xsl</code> (String) XSL content to be parsed into a stylesheet</p><p><code>modules</code> (Hash&lt;String \u21d2 Class&gt;) A hash of URI-to-handler relations for linking a namespace to a custom function handler.</p><p>\u26a0 The <a href=\"XSLT.html\"><code>XSLT</code></a> handler classes are registered <strong>globally</strong>.</p><p>Also see <a href=\"XSLT.html#method-c-register\"><code>Nokogiri::XSLT.register</code></a></p><p><strong>Example</strong></p>","location":"rdoc/Nokogiri/XSLT.html#method-c-parse"},{"title":"module Nokogiri::XSLT.quote_params(params) \u2192 Array","text":"<p>Quote parameters in <code>params</code> for stylesheet safety. See <a href=\"XSLT/Stylesheet.html#method-i-transform\"><code>Nokogiri::XSLT::Stylesheet.transform</code></a> for example usage.</p><p><code>params</code> (Hash, Array) <a href=\"XSLT.html\"><code>XSLT</code></a> parameters (key-&gt;value, or tuples of [key, value])</p><p>Array of string parameters, with quotes correctly escaped for use with <a href=\"XSLT/Stylesheet.html#method-i-transform\"><code>XSLT::Stylesheet.transform</code></a></p>","location":"rdoc/Nokogiri/XSLT.html#method-c-quote_params"},{"title":"module Nokogiri::XSLT.register(uri, custom_handler_class)","text":"<p>Register a class that implements custom <a href=\"XSLT.html\"><code>XSLT</code></a> transformation functions.</p><p>\u26a0 The <a href=\"XSLT.html\"><code>XSLT</code></a> handler classes are registered <strong>globally</strong>.</p><p>[Parameters}</p><p><code>uri</code> (String) The namespace for the custom handlers</p><p><code>custom_handler_class</code> (Class) A class with ruby methods that can be called during transformation</p><p>See <a href=\"XSLT.html#method-c-parse\"><code>Nokogiri::XSLT.parse</code></a> for usage.</p>","location":"rdoc/Nokogiri/XSLT.html#method-c-register"},{"title":"class Nokogiri::CSS::SyntaxError","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/CSS/SyntaxError.html"},{"title":"class Nokogiri::CSS::Tokenizer","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/CSS/Tokenizer.html"},{"title":"class Nokogiri::CSS::XPathVisitor","text":"<section class=\"description\">\n<p>When translating <a href=\"../CSS.html\"><code>CSS</code></a> selectors to XPath queries with <a href=\"../CSS.html#method-c-xpath_for\"><code>Nokogiri::CSS.xpath_for</code></a>, the <a href=\"XPathVisitor.html\"><code>XPathVisitor</code></a> class allows for changing some of the behaviors related to builtin xpath functions and quirks of <a href=\"../HTML5.html\"><code>HTML5</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html"},{"title":"class Nokogiri::CSS::XPathVisitor#builtins","text":"<p>The visitor configuration set via the <code>builtins:</code> keyword argument to <a href=\"XPathVisitor.html#method-c-new\"><code>XPathVisitor.new</code></a>.</p>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html#attribute-i-builtins"},{"title":"class Nokogiri::CSS::XPathVisitor#doctype","text":"<p>The visitor configuration set via the <code>doctype:</code> keyword argument to <a href=\"XPathVisitor.html#method-c-new\"><code>XPathVisitor.new</code></a>.</p>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html#attribute-i-doctype"},{"title":"class Nokogiri::CSS::XPathVisitor#namespaces","text":"<p>The visitor configuration set via the <code>namespaces:</code> keyword argument to <a href=\"XPathVisitor.html#method-c-new\"><code>XPathVisitor.new</code></a>.</p>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html#attribute-i-namespaces"},{"title":"class Nokogiri::CSS::XPathVisitor#prefix","text":"<p>The visitor configuration set via the <code>prefix:</code> keyword argument to <a href=\"XPathVisitor.html#method-c-new\"><code>XPathVisitor.new</code></a>.</p>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html#attribute-i-prefix"},{"title":"class Nokogiri::CSS::XPathVisitor.new() \u2192 XPathVisitor","text":"<p><code>builtins:</code> (<a href=\"XPathVisitor/BuiltinsConfig.html\"><code>BuiltinsConfig</code></a>) Determine when to use Nokogiri\u2019s built-in xpath functions for performance improvements.</p><p><code>doctype:</code> (<a href=\"XPathVisitor/DoctypeConfig.html\"><code>DoctypeConfig</code></a>) Make document-type-specific accommodations for <a href=\"../CSS.html\"><code>CSS</code></a> queries.</p><p><a href=\"XPathVisitor.html\"><code>XPathVisitor</code></a></p>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html#method-c-new"},{"title":"class Nokogiri::CSS::XPathVisitor#config() \u2192 Hash","text":"<p>a Hash representing the configuration of the <a href=\"XPathVisitor.html\"><code>XPathVisitor</code></a>, suitable for use as part of the <a href=\"../CSS.html\"><code>CSS</code></a> cache key.</p>","location":"rdoc/Nokogiri/CSS/XPathVisitor.html#method-i-config"},{"title":"class Nokogiri::CSS::Tokenizer::ScanError","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/CSS/Tokenizer/ScanError.html"},{"title":"module Nokogiri::CSS::XPathVisitor::BuiltinsConfig","text":"<section class=\"description\">\n<p>Enum to direct <a href=\"../XPathVisitor.html\"><code>XPathVisitor</code></a> when to use <a href=\"../../../Nokogiri.html\"><code>Nokogiri</code></a> builtin XPath functions.</p>\n</section>","location":"rdoc/Nokogiri/CSS/XPathVisitor/BuiltinsConfig.html"},{"title":"module Nokogiri::CSS::XPathVisitor::DoctypeConfig","text":"<section class=\"description\">\n<p>Enum to direct <a href=\"../XPathVisitor.html\"><code>XPathVisitor</code></a> when to tweak the XPath query to suit the nature of the document being searched. Note that searches for <a href=\"../../CSS.html\"><code>CSS</code></a> selectors from a <a href=\"../../../Nokogiri.html\"><code>Nokogiri</code></a> document, fragment, or node will choose the correct option automatically.</p>\n</section>","location":"rdoc/Nokogiri/CSS/XPathVisitor/DoctypeConfig.html"},{"title":"module Nokogiri::Decorators::Slop","text":"<section class=\"description\">\n<p>The <a href=\"Slop.html\"><code>Slop</code></a> decorator implements method missing such that a methods may be used instead of XPath or <a href=\"../CSS.html\"><code>CSS</code></a>.  See <a href=\"../../Nokogiri.html#method-c-Slop\"><code>Nokogiri.Slop</code></a></p>\n</section>","location":"rdoc/Nokogiri/Decorators/Slop.html"},{"title":"module Nokogiri::Decorators::Slop#method_missing(name, *args, &block)","text":"<p>look for node with <code>name</code>.  See <a href=\"../../Nokogiri.html#method-c-Slop\"><code>Nokogiri.Slop</code></a></p>","location":"rdoc/Nokogiri/Decorators/Slop.html#method-i-method_missing"},{"title":"module Nokogiri::Decorators::Slop#respond_to_missing?(name, include_private = false)","text":"","location":"rdoc/Nokogiri/Decorators/Slop.html#method-i-respond_to_missing-3F"},{"title":"class Nokogiri::HTML::Builder","text":"<section class=\"description\">\n<p>\ud83d\udca1 This class is an alias for <a href=\"../HTML4/Builder.html\"><code>Nokogiri::HTML4::Builder</code></a> as of v1.12.0.</p>\n</section>","location":"rdoc/Nokogiri/HTML/Builder.html"},{"title":"class Nokogiri::HTML::Document","text":"<section class=\"description\">\n<p>\ud83d\udca1 This class is an alias for <a href=\"../HTML4/Document.html\"><code>Nokogiri::HTML4::Document</code></a> as of v1.12.0.</p>\n</section>","location":"rdoc/Nokogiri/HTML/Document.html"},{"title":"class Nokogiri::HTML::DocumentFragment","text":"<section class=\"description\">\n<p>\ud83d\udca1 This class is an alias for <a href=\"../HTML4/DocumentFragment.html\"><code>Nokogiri::HTML4::DocumentFragment</code></a> as of v1.12.0.</p>\n</section>","location":"rdoc/Nokogiri/HTML/DocumentFragment.html"},{"title":"class Nokogiri::HTML4::Builder","text":"<section class=\"description\">\n<p><a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> <a href=\"../HTML4.html\"><code>HTML</code></a> builder is used for building <a href=\"../HTML4.html\"><code>HTML</code></a> documents.  It is very similar to the <a href=\"../XML/Builder.html\"><code>Nokogiri::XML::Builder</code></a>.  In fact, you should go read the documentation for <a href=\"../XML/Builder.html\"><code>Nokogiri::XML::Builder</code></a> before reading this documentation.</p>\n<h2 id=\"class-Nokogiri::HTML4::Builder-label-Synopsis-3A\">Synopsis:<span><a href=\"#class-Nokogiri::HTML4::Builder-label-Synopsis-3A\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>Create an <a href=\"../HTML4.html\"><code>HTML</code></a> document with a body that has an onload attribute, and a span tag with a class of \u201cbold\u201d that has content of \u201cHello world\u201d.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">doc</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">html</span> {\n    <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">body</span>(<span class=\"ruby-value\">:onload</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">'some_func();'</span>) {\n      <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">span</span>.<span class=\"ruby-identifier\">bold</span> {\n        <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">text</span> <span class=\"ruby-string\">\"Hello world\"</span>\n      }\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_html</span>\n</pre>\n<p>The <a href=\"../HTML4.html\"><code>HTML</code></a> builder inherits from the <a href=\"../XML.html\"><code>XML</code></a> builder, so make sure to read the <a href=\"../XML/Builder.html\"><code>Nokogiri::XML::Builder</code></a> documentation.</p>\n</section>","location":"rdoc/Nokogiri/HTML4/Builder.html"},{"title":"class Nokogiri::HTML4::Builder#to_html()","text":"<p>Convert the builder to <a href=\"../HTML4.html\"><code>HTML</code></a></p>","location":"rdoc/Nokogiri/HTML4/Builder.html#method-i-to_html"},{"title":"class Nokogiri::HTML4::Document","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/Document.html"},{"title":"class Nokogiri::HTML4::Document.parse(string_or_io, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML) { |options| ... }","text":"<p>Parse <a href=\"../HTML4.html\"><code>HTML</code></a>.  <code>string_or_io</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as an IO, or StringIO. <code>url</code> is resource where this document is located.  <code>encoding</code> is the encoding that should be used when processing the document. <code>options</code> is a number that sets options in the parser, such as Nokogiri::XML::ParseOptions::RECOVER.  See the constants in <a href=\"../XML/ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>.</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-c-parse"},{"title":"class Nokogiri::HTML4::Document#fragment(tags = nil)","text":"<p>Create a <a href=\"../XML/DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a> from <code>tags</code></p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-fragment"},{"title":"class Nokogiri::HTML4::Document#meta_encoding()","text":"<p>Get the meta tag encoding for this document.  If there is no meta tag, then nil is returned.</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-meta_encoding"},{"title":"class Nokogiri::HTML4::Document#meta_encoding=(encoding)","text":"<p>Set the meta tag encoding for this document.</p><p>If an meta encoding tag is already present, its content is replaced with the given text.</p><p>Otherwise, this method tries to create one at an appropriate place supplying head and/or html elements as necessary, which is inside a head element if any, and before any text node or content element (typically &lt;body&gt;) if any.</p><p>The result when trying to set an encoding that is different from the document encoding is undefined.</p><p>Beware in CRuby, that libxml2 automatically inserts a meta tag into a head element.</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-meta_encoding-3D"},{"title":"class Nokogiri::HTML4::Document#serialize(options = {})","text":"<p>Serialize Node using <code>options</code>. Save options can also be set using a block.</p><p>See also <a href=\"../XML/Node/SaveOptions.html\"><code>Nokogiri::XML::Node::SaveOptions</code></a> and Node.</p><p>These two statements are equivalent:</p><p>or</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-serialize"},{"title":"class Nokogiri::HTML4::Document#title()","text":"<p>Get the title string of this document.  Return nil if there is no title tag.</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-title"},{"title":"class Nokogiri::HTML4::Document#title=(text)","text":"<p>Set the title string of this document.</p><p>If a title element is already present, its content is replaced with the given text.</p><p>Otherwise, this method tries to create one at an appropriate place supplying head and/or html elements as necessary, which is inside a head element if any, right after a meta encoding/charset tag if any, and before any text node or content element (typically &lt;body&gt;) if any.</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-title-3D"},{"title":"class Nokogiri::HTML4::Document#xpath_doctype() \u2192 Nokogiri::CSS::XPathVisitor::DoctypeConfig","text":"<p>The document type which determines CSS-to-XPath translation.</p><p>See XPathVisitor for more information.</p>","location":"rdoc/Nokogiri/HTML4/Document.html#method-i-xpath_doctype"},{"title":"class Nokogiri::HTML4::DocumentFragment","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/DocumentFragment.html"},{"title":"class Nokogiri::HTML4::DocumentFragment.new(document, tags = nil, ctx = nil, options = XML::ParseOptions::DEFAULT_HTML) { |options| ... }","text":"<p>It\u2019s recommended to use either <a href=\"DocumentFragment.html#method-c-parse\"><code>DocumentFragment.parse</code></a> or <a href=\"../XML/Node.html#method-i-parse\"><code>XML::Node#parse</code></a> rather than call this method directly.</p>","location":"rdoc/Nokogiri/HTML4/DocumentFragment.html#method-c-new"},{"title":"class Nokogiri::HTML4::DocumentFragment.parse(tags) \u2192 DocumentFragment","text":"<p>Parse an <a href=\"../HTML4.html\"><code>HTML4</code></a> fragment.</p><p><code>tags</code> (optional String, or any object that responds to <code>#read</code> such as an IO, or StringIO)</p><p><code>encoding</code> (optional String) the name of the encoding that should be used when processing the document.  (default <code>nil</code> for auto-detection)</p><p><code>options</code> (optional) configuration object that sets options during parsing, such as Nokogiri::XML::ParseOptions::RECOVER. See <a href=\"../XML/ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a> for more information.</p><p>If present, the block will be passed a <a href=\"../XML/ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a> object to modify</p><p><a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a></p><p><strong>Example:</strong> Parsing a string</p><p><strong>Example:</strong> Parsing an IO</p><p><strong>Example:</strong> Specifying encoding</p><p><strong>Example:</strong> Setting parse options dynamically</p>","location":"rdoc/Nokogiri/HTML4/DocumentFragment.html#method-c-parse"},{"title":"class Nokogiri::HTML4::ElementDescription","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/ElementDescription.html"},{"title":"class Nokogiri::HTML4::ElementDescription#block?()","text":"<p>Is this element a block element?</p>","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-block-3F"},{"title":"class Nokogiri::HTML4::ElementDescription#default_sub_element()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-default_sub_element"},{"title":"class Nokogiri::HTML4::ElementDescription#deprecated?()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-deprecated-3F"},{"title":"class Nokogiri::HTML4::ElementDescription#deprecated_attributes()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-deprecated_attributes"},{"title":"class Nokogiri::HTML4::ElementDescription#description()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-description"},{"title":"class Nokogiri::HTML4::ElementDescription#implied_end_tag?()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-implied_end_tag-3F"},{"title":"class Nokogiri::HTML4::ElementDescription#implied_start_tag?()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-implied_start_tag-3F"},{"title":"class Nokogiri::HTML4::ElementDescription#inspect()","text":"<p>Inspection information</p>","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-inspect"},{"title":"class Nokogiri::HTML4::ElementDescription#optional_attributes()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-optional_attributes"},{"title":"class Nokogiri::HTML4::ElementDescription#required_attributes()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-required_attributes"},{"title":"class Nokogiri::HTML4::ElementDescription#save_end_tag?()","text":"","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-save_end_tag-3F"},{"title":"class Nokogiri::HTML4::ElementDescription#to_s()","text":"<p>Convert this description to a string</p>","location":"rdoc/Nokogiri/HTML4/ElementDescription.html#method-i-to_s"},{"title":"class Nokogiri::HTML4::EncodingReader","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/EncodingReader.html"},{"title":"class Nokogiri::HTML4::EntityDescription","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/EntityDescription.html"},{"title":"class Nokogiri::HTML4::EntityLookup","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/EntityLookup.html"},{"title":"class Nokogiri::HTML4::EntityLookup#[](name)","text":"<p>Look up entity with <code>name</code></p>","location":"rdoc/Nokogiri/HTML4/EntityLookup.html#method-i-5B-5D"},{"title":"module Nokogiri::HTML4::SAX","text":"<section class=\"description\">\n<p><a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> provides a <a href=\"SAX.html\"><code>SAX</code></a> parser to process <a href=\"../HTML4.html\"><code>HTML4</code></a> which will provide <a href=\"../HTML4.html\"><code>HTML</code></a> recovery (\u201cautocorrection\u201d) features.</p>\n<p>See <a href=\"SAX/Parser.html\"><code>Nokogiri::HTML4::SAX::Parser</code></a> for a basic example of using a <a href=\"SAX.html\"><code>SAX</code></a> parser with <a href=\"../HTML4.html\"><code>HTML</code></a>.</p>\n<p>For more information on <a href=\"SAX.html\"><code>SAX</code></a> parsers, see <a href=\"../XML/SAX.html\"><code>Nokogiri::XML::SAX</code></a></p>\n</section>","location":"rdoc/Nokogiri/HTML4/SAX.html"},{"title":"class Nokogiri::HTML4::EncodingReader::EncodingFound","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/EncodingReader/EncodingFound.html"},{"title":"class Nokogiri::HTML4::EncodingReader::JumpSAXHandler","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/EncodingReader/JumpSAXHandler.html"},{"title":"class Nokogiri::HTML4::EncodingReader::SAXHandler","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/HTML4/EncodingReader/SAXHandler.html"},{"title":"class Nokogiri::HTML4::SAX::Parser","text":"<section class=\"description\">\n<p>\ud83d\udca1 This class is an alias for <a href=\"Parser.html\"><code>Nokogiri::HTML4::SAX::Parser</code></a> as of v1.12.0.</p>\n<p>This parser is a <a href=\"../SAX.html\"><code>SAX</code></a> style parser that reads its input as it deems necessary. The parser takes a <a href=\"../../XML/SAX/Document.html\"><code>Nokogiri::XML::SAX::Document</code></a>, an optional encoding, then given an <a href=\"../../HTML4.html\"><code>HTML</code></a> input, sends messages to the <a href=\"../../XML/SAX/Document.html\"><code>Nokogiri::XML::SAX::Document</code></a>.</p>\n<p>\u26a0 This is an <a href=\"../../HTML4.html\"><code>HTML4</code></a> parser and so may not support some <a href=\"../../HTML5.html\"><code>HTML5</code></a> features and behaviors.</p>\n<p>Here is a basic usage example:</p>\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyHandler</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">start_element</span> <span class=\"ruby-identifier\">name</span>, <span class=\"ruby-identifier\">attributes</span> = []\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">\"found a #{name}\"</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">parser</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">MyHandler</span>.<span class=\"ruby-identifier\">new</span>)\n\n<span class=\"ruby-comment\"># Hand an IO object to the parser, which will read the HTML from the IO.</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-identifier\">path_to_html</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">f</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">parser</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">f</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>For more information on SAX parsers, see <a href=\"../../XML/SAX.html\"><code>Nokogiri::XML::SAX</code></a> or the parent class <a href=\"../../XML/SAX/Parser.html\"><code>Nokogiri::XML::SAX::Parser</code></a>.</p>\n<p>Also see <a href=\"../../XML/SAX/Document.html\"><code>Nokogiri::XML::SAX::Document</code></a> for the available events.</p>\n</section>","location":"rdoc/Nokogiri/HTML4/SAX/Parser.html"},{"title":"class Nokogiri::HTML4::SAX::ParserContext","text":"<section class=\"description\">\n<p>\ud83d\udca1 This class is an alias for <a href=\"ParserContext.html\"><code>Nokogiri::HTML4::SAX::ParserContext</code></a> as of v1.12.0.</p>\n<p>Context object to invoke the <a href=\"../../HTML4.html\"><code>HTML4</code></a> <a href=\"../SAX.html\"><code>SAX</code></a> parser on the SAX::Document handler.</p>\n<p>\ud83d\udca1 This class is usually not instantiated by the user. Use <a href=\"Parser.html\"><code>Nokogiri::HTML4::SAX::Parser</code></a> instead.</p>\n</section>","location":"rdoc/Nokogiri/HTML4/SAX/ParserContext.html"},{"title":"class Nokogiri::HTML4::SAX::PushParser","text":"<section class=\"description\">\n<p>\ud83d\udca1 This class is an alias for <a href=\"PushParser.html\"><code>Nokogiri::HTML4::SAX::PushParser</code></a> as of v1.12.0.</p>\n</section>","location":"rdoc/Nokogiri/HTML4/SAX/PushParser.html"},{"title":"class Nokogiri::HTML4::SAX::PushParser#document","text":"<p>The Nokogiri::HTML4::SAX::Document on which the <a href=\"PushParser.html\"><code>PushParser</code></a> will be operating</p>","location":"rdoc/Nokogiri/HTML4/SAX/PushParser.html#attribute-i-document"},{"title":"class Nokogiri::HTML4::SAX::PushParser.new(doc = HTML4::SAX::Document.new, file_name = nil, encoding = \"UTF-8\")","text":"","location":"rdoc/Nokogiri/HTML4/SAX/PushParser.html#method-c-new"},{"title":"class Nokogiri::HTML4::SAX::PushParser#<<(chunk, last_chunk = false)","text":"","location":"rdoc/Nokogiri/HTML4/SAX/PushParser.html#method-i-3C-3C"},{"title":"class Nokogiri::HTML4::SAX::PushParser#finish()","text":"<p>Finish the parsing.  This method is only necessary for Nokogiri::HTML4::SAX::Document#end_document to be called.</p>","location":"rdoc/Nokogiri/HTML4/SAX/PushParser.html#method-i-finish"},{"title":"class Nokogiri::HTML4::SAX::PushParser#write(chunk, last_chunk = false)","text":"<p>Write a <code>chunk</code> of <a href=\"../../HTML4.html\"><code>HTML</code></a> to the <a href=\"PushParser.html\"><code>PushParser</code></a>.  Any callback methods that can be called will be called immediately.</p>","location":"rdoc/Nokogiri/HTML4/SAX/PushParser.html#method-i-write"},{"title":"class Nokogiri::HTML5::Builder","text":"<section class=\"description\">\n<p><a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> <a href=\"../HTML5.html\"><code>HTML5</code></a> builder is used for building <a href=\"../HTML4.html\"><code>HTML</code></a> documents. It is very similar to the <a href=\"../XML/Builder.html\"><code>Nokogiri::XML::Builder</code></a>.  In fact, you should go read the documentation for <a href=\"../XML/Builder.html\"><code>Nokogiri::XML::Builder</code></a> before reading this documentation.</p>\n<p>The construction behavior is identical to <a href=\"../HTML4/Builder.html\"><code>HTML4::Builder</code></a>, but <a href=\"../HTML5.html\"><code>HTML5</code></a> documents implement the [HTML5 standard\u2019s serialization algorithm](<a href=\"https://www.w3.org/TR/2008/WD-html5-20080610/serializing.html\">www.w3.org/TR/2008/WD-html5-20080610/serializing.html</a>).</p>\n<h2 id=\"class-Nokogiri::HTML5::Builder-label-Synopsis-3A\">Synopsis:<span><a href=\"#class-Nokogiri::HTML5::Builder-label-Synopsis-3A\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>Create an <a href=\"../HTML5.html\"><code>HTML5</code></a> document with a body that has an onload attribute, and a span tag with a class of \u201cbold\u201d that has content of \u201cHello world\u201d.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML5</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">doc</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">html</span> {\n    <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">body</span>(<span class=\"ruby-value\">:onload</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">'some_func();'</span>) {\n      <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">span</span>.<span class=\"ruby-identifier\">bold</span> {\n        <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">text</span> <span class=\"ruby-string\">\"Hello world\"</span>\n      }\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_html</span>\n</pre>\n<p>The <a href=\"../HTML5.html\"><code>HTML5</code></a> builder inherits from the <a href=\"../XML.html\"><code>XML</code></a> builder, so make sure to read the <a href=\"../XML/Builder.html\"><code>Nokogiri::XML::Builder</code></a> documentation.</p>\n</section>","location":"rdoc/Nokogiri/HTML5/Builder.html"},{"title":"class Nokogiri::HTML5::Builder#to_html()","text":"<p>Convert the builder to <a href=\"../HTML4.html\"><code>HTML</code></a></p>","location":"rdoc/Nokogiri/HTML5/Builder.html#method-i-to_html"},{"title":"class Nokogiri::HTML5::Document","text":"<section class=\"description\">\n<p>Since v1.12.0</p>\n<p>\ud83d\udca1 <a href=\"../HTML5.html\"><code>HTML5</code></a> functionality is not available when running JRuby.</p>\n</section>","location":"rdoc/Nokogiri/HTML5/Document.html"},{"title":"class Nokogiri::HTML5::Document#quirks_mode","text":"<p>Get the parser\u2019s quirks mode value. See <a href=\"QuirksMode.html\"><code>HTML5::QuirksMode</code></a>.</p><p>This method returns \u2018nil` if the parser was not invoked (e.g., `Nokogiri::HTML5::Document.new`).</p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/HTML5/Document.html#attribute-i-quirks_mode"},{"title":"class Nokogiri::HTML5::Document#url","text":"<p>Get the url name for this document, as passed into <a href=\"Document.html#method-c-parse\"><code>Document.parse</code></a>, <a href=\"Document.html#method-c-read_io\"><code>Document.read_io</code></a>, or <a href=\"Document.html#method-c-read_memory\"><code>Document.read_memory</code></a></p>","location":"rdoc/Nokogiri/HTML5/Document.html#attribute-i-url"},{"title":"class Nokogiri::HTML5::Document.parse(input)","text":"<p>Parse <a href=\"../HTML5.html\"><code>HTML5</code></a> input.</p><p><code>input</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as an IO, or StringIO.</p><p><code>url</code> (optional) is a String indicating the canonical URI where this document is located.</p><p><code>encoding</code> (optional) is the encoding that should be used when processing the document.</p><p><code>options</code> (optional) is a configuration Hash (or keyword arguments) to set options during parsing. The three currently supported options are <code>:max_errors</code>, <code>:max_tree_depth</code> and <code>:max_attributes</code>, described at <a href=\"../HTML5.html\"><code>Nokogiri::HTML5</code></a>.</p><p>\u26a0 Note that these options are different than those made available by <a href=\"../XML/Document.html\"><code>Nokogiri::XML::Document</code></a> and <a href=\"../HTML4/Document.html\"><code>Nokogiri::HTML4::Document</code></a>.</p><p><code>block</code> (optional) is passed a configuration Hash on which parse options may be set. See <a href=\"../HTML5.html\"><code>Nokogiri::HTML5</code></a> for more information and usage.</p><p><a href=\"Document.html\"><code>Nokogiri::HTML5::Document</code></a></p>","location":"rdoc/Nokogiri/HTML5/Document.html#method-c-parse"},{"title":"class Nokogiri::HTML5::Document.read_io(io, url = nil, encoding = nil, **options)","text":"<p>Create a new document from an IO object.</p><p>\ud83d\udca1 Most users should prefer <a href=\"Document.html#method-c-parse\"><code>Document.parse</code></a> to this method.</p>","location":"rdoc/Nokogiri/HTML5/Document.html#method-c-read_io"},{"title":"class Nokogiri::HTML5::Document.read_memory(string, url = nil, encoding = nil, **options)","text":"<p>Create a new document from a String.</p><p>\ud83d\udca1 Most users should prefer <a href=\"Document.html#method-c-parse\"><code>Document.parse</code></a> to this method.</p>","location":"rdoc/Nokogiri/HTML5/Document.html#method-c-read_memory"},{"title":"class Nokogiri::HTML5::Document#fragment() \u2192 Nokogiri::HTML5::DocumentFragment","text":"<p>Parse a <a href=\"../HTML5.html\"><code>HTML5</code></a> document fragment from <code>markup</code>, returning a <a href=\"DocumentFragment.html\"><code>Nokogiri::HTML5::DocumentFragment</code></a>.</p><p><code>markup</code> (String) The <a href=\"../HTML5.html\"><code>HTML5</code></a> markup fragment to be parsed</p><p><a href=\"DocumentFragment.html\"><code>Nokogiri::HTML5::DocumentFragment</code></a>. This object\u2019s children will be empty if \u2018markup` is not passed, is empty, or is `nil`.</p>","location":"rdoc/Nokogiri/HTML5/Document.html#method-i-fragment"},{"title":"class Nokogiri::HTML5::Document#xpath_doctype() \u2192 Nokogiri::CSS::XPathVisitor::DoctypeConfig","text":"<p>The document type which determines CSS-to-XPath translation.</p><p>See <a href=\"../CSS/XPathVisitor.html\"><code>CSS::XPathVisitor</code></a> for more information.</p>","location":"rdoc/Nokogiri/HTML5/Document.html#method-i-xpath_doctype"},{"title":"class Nokogiri::HTML5::DocumentFragment","text":"<section class=\"description\">\n<p>Since v1.12.0</p>\n<p>\ud83d\udca1 <a href=\"../HTML5.html\"><code>HTML5</code></a> functionality is not available when running JRuby.</p>\n</section>","location":"rdoc/Nokogiri/HTML5/DocumentFragment.html"},{"title":"class Nokogiri::HTML5::DocumentFragment#document","text":"","location":"rdoc/Nokogiri/HTML5/DocumentFragment.html#attribute-i-document"},{"title":"class Nokogiri::HTML5::DocumentFragment#errors","text":"","location":"rdoc/Nokogiri/HTML5/DocumentFragment.html#attribute-i-errors"},{"title":"class Nokogiri::HTML5::DocumentFragment#quirks_mode","text":"<p>Get the parser\u2019s quirks mode value. See <a href=\"QuirksMode.html\"><code>HTML5::QuirksMode</code></a>.</p><p>This method returns \u2018nil` if the parser was not invoked (e.g., `Nokogiri::HTML5::DocumentFragment.new(doc)`).</p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/HTML5/DocumentFragment.html#attribute-i-quirks_mode"},{"title":"class Nokogiri::HTML5::DocumentFragment.new(doc, tags = nil, context = nil, options = {})","text":"<p>Create a document fragment.</p>","location":"rdoc/Nokogiri/HTML5/DocumentFragment.html#method-c-new"},{"title":"class Nokogiri::HTML5::DocumentFragment.parse(tags, **options)","text":"<p>Parse an <a href=\"../HTML5.html\"><code>HTML5</code></a> document fragment from <code>tags</code>, returning a Nodeset.</p><p><code>tags</code> [String, IO] The <a href=\"../HTML5.html\"><code>HTML5</code></a> document fragment to parse.</p><p><code>encoding</code> [String] The name of the encoding to use when parsing the document fragment. (default <code>nil</code>)</p><p>Also see <a href=\"../HTML5.html\"><code>Nokogiri::HTML5</code></a> for a longer explanation of how encoding is handled by the parser.</p><p><code>:context</code> [String, <a href=\"../XML/Node.html\"><code>Nokogiri::XML::Node</code></a>] The context in which to parse the document fragment. (default +\u201cbody\u201d+)</p><p><code>:max_errors</code> [Integer] The maximum number of parse errors to record. (default <code>Nokogiri::Gumbo::DEFAULT_MAX_ERRORS</code> which is currently 0)</p><p><code>:max_tree_depth</code> [Integer] The maximum depth of the parse tree. (default <code>Nokogiri::Gumbo::DEFAULT_MAX_TREE_DEPTH</code>)</p><p><code>:max_attributes</code> [Integer] The maximum number of attributes allowed on an element. (default <code>Nokogiri::Gumbo::DEFAULT_MAX_ATTRIBUTES</code>)</p><p><code>:parse_noscript_content_as_text</code> [Boolean] Whether to parse the content of <code>noscript</code> elements as text. (default <code>false</code>)</p><p>Also see <a href=\"../HTML5.html\"><code>Nokogiri::HTML5</code></a> for a longer explanation of the options.</p><p>A node set containing the root nodes of the parsed fragment.</p>","location":"rdoc/Nokogiri/HTML5/DocumentFragment.html#method-c-parse"},{"title":"module Nokogiri::HTML5::Node","text":"<section class=\"description\">\n<p>Since v1.12.0</p>\n<p>\ud83d\udca1 <a href=\"../HTML5.html\"><code>HTML5</code></a> functionality is not available when running JRuby.</p>\n</section>","location":"rdoc/Nokogiri/HTML5/Node.html"},{"title":"module Nokogiri::HTML5::Node#fragment(tags)","text":"","location":"rdoc/Nokogiri/HTML5/Node.html#method-i-fragment"},{"title":"module Nokogiri::HTML5::Node#inner_html(options = {})","text":"","location":"rdoc/Nokogiri/HTML5/Node.html#method-i-inner_html"},{"title":"module Nokogiri::HTML5::Node#write_to(io, *options) { |config| ... }","text":"","location":"rdoc/Nokogiri/HTML5/Node.html#method-i-write_to"},{"title":"module Nokogiri::HTML5::QuirksMode","text":"<section class=\"description\">\n<p>Enum for the <a href=\"../HTML5.html\"><code>HTML5</code></a> parser quirks mode values. Values returned by <a href=\"Document.html#attribute-i-quirks_mode\"><code>HTML5::Document#quirks_mode</code></a></p>\n<p>See <a href=\"https://dom.spec.whatwg.org/#concept-document-quirks\">dom.spec.whatwg.org/#concept-document-quirks</a> for more information on <a href=\"../HTML5.html\"><code>HTML5</code></a> quirks mode.</p>\n<p>Since v1.14.0</p>\n</section>","location":"rdoc/Nokogiri/HTML5/QuirksMode.html"},{"title":"class Nokogiri::XML::Attr","text":"<section class=\"description\">\n<p><a href=\"Attr.html\"><code>Attr</code></a> represents a <a href=\"Attr.html\"><code>Attr</code></a> node in an xml document.</p>\n</section>","location":"rdoc/Nokogiri/XML/Attr.html"},{"title":"class Nokogiri::XML::Attr.new(document, name)","text":"<p>Create a new <a href=\"Attr.html\"><code>Attr</code></a> element on the <code>document</code> with <code>name</code></p>","location":"rdoc/Nokogiri/XML/Attr.html#method-c-new"},{"title":"class Nokogiri::XML::Attr#content=","text":"","location":"rdoc/Nokogiri/XML/Attr.html#method-i-content-3D"},{"title":"class Nokogiri::XML::Attr#deconstruct_keys(array_of_names) \u2192 Hash","text":"<p>Returns a hash describing the <a href=\"Attr.html\"><code>Attr</code></a>, to use in pattern matching.</p><p>Valid keys and their values:</p><p><code>name</code> \u2192 (String) The name of the attribute.</p><p><code>value</code> \u2192 (String) The value of the attribute.</p><p><code>namespace</code> \u2192 (<a href=\"Namespace.html\"><code>Namespace</code></a>, nil) The <a href=\"Namespace.html\"><code>Namespace</code></a> of the attribute, or <code>nil</code> if there is no namespace.</p><p><strong>Example</strong></p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/XML/Attr.html#method-i-deconstruct_keys"},{"title":"class Nokogiri::XML::Attr#value=(content)","text":"<p>Set the value for this <a href=\"Attr.html\"><code>Attr</code></a> to <code>content</code>. Use <code>nil</code> to remove the value (e.g., a <a href=\"../HTML4.html\"><code>HTML</code></a> boolean attribute).</p>","location":"rdoc/Nokogiri/XML/Attr.html#method-i-value-3D"},{"title":"class Nokogiri::XML::AttributeDecl","text":"<section class=\"description\">\n<p>Represents an attribute declaration in a <a href=\"DTD.html\"><code>DTD</code></a></p>\n</section>","location":"rdoc/Nokogiri/XML/AttributeDecl.html"},{"title":"class Nokogiri::XML::AttributeDecl#attribute_type","text":"<p>The <a href=\"AttributeDecl.html#method-i-attribute_type\"><code>attribute_type</code></a> for this <a href=\"AttributeDecl.html\"><code>AttributeDecl</code></a></p>","location":"rdoc/Nokogiri/XML/AttributeDecl.html#method-i-attribute_type"},{"title":"class Nokogiri::XML::AttributeDecl#default","text":"<p>The default value</p>","location":"rdoc/Nokogiri/XML/AttributeDecl.html#method-i-default"},{"title":"class Nokogiri::XML::AttributeDecl#enumeration","text":"<p>An enumeration of possible values</p>","location":"rdoc/Nokogiri/XML/AttributeDecl.html#method-i-enumeration"},{"title":"class Nokogiri::XML::Builder","text":"<section class=\"description\">\n<p><a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> builder can be used for building <a href=\"../XML.html\"><code>XML</code></a> and <a href=\"../HTML4.html\"><code>HTML</code></a> documents.</p>\n<h2 id=\"class-Nokogiri::XML::Builder-label-Synopsis-3A\">Synopsis:<span><a href=\"#class-Nokogiri::XML::Builder-label-Synopsis-3A\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span> {\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">products</span> {\n      <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">widget</span> {\n        <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">id_</span> <span class=\"ruby-string\">\"10\"</span>\n        <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-string\">\"Awesome widget\"</span>\n      }\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<p>Will output:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root&gt;\n  &lt;products&gt;\n    &lt;widget&gt;\n      &lt;id&gt;10&lt;/id&gt;\n      &lt;name&gt;Awesome widget&lt;/name&gt;\n    &lt;/widget&gt;\n  &lt;/products&gt;\n&lt;/root&gt;</pre>\n<h3 id=\"class-Nokogiri::XML::Builder-label-Builder+scope\">\n<a href=\"Builder.html\"><code>Builder</code></a> scope<span><a href=\"#class-Nokogiri::XML::Builder-label-Builder+scope\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>The builder allows two forms.  When the builder is supplied with a block that has a parameter, the outside scope is maintained.  This means you can access variables that are outside your builder.  If you don\u2019t need outside scope, you can use the builder without the \u201cxml\u201d prefix like this:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">root</span> {\n    <span class=\"ruby-identifier\">products</span> {\n      <span class=\"ruby-identifier\">widget</span> {\n        <span class=\"ruby-identifier\">id_</span> <span class=\"ruby-string\">\"10\"</span>\n        <span class=\"ruby-identifier\">name</span> <span class=\"ruby-string\">\"Awesome widget\"</span>\n      }\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<h2 id=\"class-Nokogiri::XML::Builder-label-Special+Tags\">Special Tags<span><a href=\"#class-Nokogiri::XML::Builder-label-Special+Tags\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>The builder works by taking advantage of method_missing.  Unfortunately some methods are defined in ruby that are difficult or dangerous to remove.  You may want to create tags with the name \u201ctype\u201d, \u201cclass\u201d, and \u201cid\u201d for example.  In that case, you can use an underscore to disambiguate your tag name from the method call.</p>\n<p>Here is an example of using the underscore to disambiguate tag names from ruby methods:</p>\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@objects</span> = [<span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>, <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>, <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>]\n\n<span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span> {\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">objects</span> {\n      <span class=\"ruby-ivar\">@objects</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">o</span><span class=\"ruby-operator\">|</span>\n        <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">object</span> {\n          <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">type_</span>   <span class=\"ruby-identifier\">o</span>.<span class=\"ruby-identifier\">type</span>\n          <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">class_</span>  <span class=\"ruby-identifier\">o</span>.<span class=\"ruby-identifier\">class</span>.<span class=\"ruby-identifier\">name</span>\n          <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">id_</span>     <span class=\"ruby-identifier\">o</span>.<span class=\"ruby-identifier\">id</span>\n        }\n      <span class=\"ruby-keyword\">end</span>\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<p>The underscore may be used with any tag name, and the last underscore will just be removed.  This code will output the following XML:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root&gt;\n  &lt;objects&gt;\n    &lt;object&gt;\n      &lt;type&gt;Object&lt;/type&gt;\n      &lt;class&gt;Object&lt;/class&gt;\n      &lt;id&gt;48390&lt;/id&gt;\n    &lt;/object&gt;\n    &lt;object&gt;\n      &lt;type&gt;Object&lt;/type&gt;\n      &lt;class&gt;Object&lt;/class&gt;\n      &lt;id&gt;48380&lt;/id&gt;\n    &lt;/object&gt;\n    &lt;object&gt;\n      &lt;type&gt;Object&lt;/type&gt;\n      &lt;class&gt;Object&lt;/class&gt;\n      &lt;id&gt;48370&lt;/id&gt;\n    &lt;/object&gt;\n  &lt;/objects&gt;\n&lt;/root&gt;</pre>\n<h2 id=\"class-Nokogiri::XML::Builder-label-Tag+Attributes\">Tag Attributes<span><a href=\"#class-Nokogiri::XML::Builder-label-Tag+Attributes\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>Tag attributes may be supplied as method arguments.  Here is our previous example, but using attributes rather than tags:</p>\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@objects</span> = [<span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>, <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>, <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>]\n\n<span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span> {\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">objects</span> {\n      <span class=\"ruby-ivar\">@objects</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">o</span><span class=\"ruby-operator\">|</span>\n        <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">object</span>(<span class=\"ruby-value\">:type</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">o</span>.<span class=\"ruby-identifier\">type</span>, <span class=\"ruby-value\">:class</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">o</span>.<span class=\"ruby-identifier\">class</span>, <span class=\"ruby-value\">:id</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">o</span>.<span class=\"ruby-identifier\">id</span>)\n      <span class=\"ruby-keyword\">end</span>\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<h3 id=\"class-Nokogiri::XML::Builder-label-Tag+Attribute+Short+Cuts\">Tag Attribute Short Cuts<span><a href=\"#class-Nokogiri::XML::Builder-label-Tag+Attribute+Short+Cuts\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>A couple attribute short cuts are available when building tags.  The short cuts are available by special method calls when building a tag.</p>\n<p>This example builds an \u201cobject\u201d tag with the class attribute \u201cclassy\u201d and the id of \u201cthing\u201d:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span> {\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">objects</span> {\n      <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">classy</span>.<span class=\"ruby-identifier\">thing!</span>\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<p>Which will output:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root&gt;\n  &lt;objects&gt;\n    &lt;object class=\"classy\" id=\"thing\"/&gt;\n  &lt;/objects&gt;\n&lt;/root&gt;</pre>\n<p>All other options are still supported with this syntax, including blocks and extra tag attributes.</p>\n<h2 id=\"class-Nokogiri::XML::Builder-label-Namespaces\">Namespaces<span><a href=\"#class-Nokogiri::XML::Builder-label-Namespaces\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>Namespaces are added similarly to attributes.  <a href=\"Builder.html\"><code>Nokogiri::XML::Builder</code></a> assumes that when an attribute starts with \u201cxmlns\u201d, it is meant to be a namespace:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span>(<span class=\"ruby-string\">'xmlns'</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">'default'</span>, <span class=\"ruby-string\">'xmlns:foo'</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">'bar'</span>) <span class=\"ruby-keyword\">do</span>\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">tenderlove</span>\n  <span class=\"ruby-keyword\">end</span>\n}\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<p>Will output <a href=\"../XML.html\"><code>XML</code></a> like this:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root xmlns:foo=\"bar\" xmlns=\"default\"&gt;\n  &lt;tenderlove/&gt;\n&lt;/root&gt;</pre>\n<h3 id=\"class-Nokogiri::XML::Builder-label-Referencing+declared+namespaces\">Referencing declared namespaces<span><a href=\"#class-Nokogiri::XML::Builder-label-Referencing+declared+namespaces\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>Tags that reference non-default namespaces (i.e. a tag \u201cfoo:bar\u201d) can be built by using the <a href=\"Builder.html#method-i-5B-5D\"><code>Nokogiri::XML::Builder#[]</code></a> method.</p>\n<p>For example:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span>(<span class=\"ruby-string\">'xmlns:foo'</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">'bar'</span>) {\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">objects</span> {\n      <span class=\"ruby-identifier\">xml</span>[<span class=\"ruby-string\">'foo'</span>].<span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">classy</span>.<span class=\"ruby-identifier\">thing!</span>\n    }\n  }\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<p>Will output this XML:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root xmlns:foo=\"bar\"&gt;\n  &lt;objects&gt;\n    &lt;foo:object class=\"classy\" id=\"thing\"/&gt;\n  &lt;/objects&gt;\n&lt;/root&gt;</pre>\n<p>Note the \u201cfoo:object\u201d tag.</p>\n<h3 id=\"class-Nokogiri::XML::Builder-label-Namespace+inheritance\">\n<a href=\"Namespace.html\"><code>Namespace</code></a> inheritance<span><a href=\"#class-Nokogiri::XML::Builder-label-Namespace+inheritance\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>In the <a href=\"Builder.html\"><code>Builder</code></a> context, children will inherit their parent\u2019s namespace. This is the same behavior as if the underlying {XML::Document} set <code>namespace_inheritance</code> to <code>true</code>:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">result</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>[<span class=\"ruby-string\">\"soapenv\"</span>].<span class=\"ruby-constant\">Envelope</span>(<span class=\"ruby-string\">\"xmlns:soapenv\"</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">\"http://schemas.xmlsoap.org/soap/envelope/\"</span>) <span class=\"ruby-keyword\">do</span>\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-constant\">Header</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">result</span>.<span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt; &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"ruby-comment\">#    &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;</span>\n<span class=\"ruby-comment\">#      &lt;soapenv:Header/&gt;</span>\n<span class=\"ruby-comment\">#    &lt;/soapenv:Envelope&gt;</span>\n</pre>\n<p>Users may turn this behavior off by passing a keyword argument <code>namespace_inheritance:false</code> to the initializer:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">result</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">namespace_inheritance:</span> <span class=\"ruby-keyword\">false</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>[<span class=\"ruby-string\">\"soapenv\"</span>].<span class=\"ruby-constant\">Envelope</span>(<span class=\"ruby-string\">\"xmlns:soapenv\"</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">\"http://schemas.xmlsoap.org/soap/envelope/\"</span>) <span class=\"ruby-keyword\">do</span>\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-constant\">Header</span>\n    <span class=\"ruby-identifier\">xml</span>[<span class=\"ruby-string\">\"soapenv\"</span>].<span class=\"ruby-constant\">Body</span> <span class=\"ruby-comment\"># users may explicitly opt into the namespace</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">result</span>.<span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt; &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"ruby-comment\">#    &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;</span>\n<span class=\"ruby-comment\">#      &lt;Header/&gt;</span>\n<span class=\"ruby-comment\">#      &lt;soapenv:Body/&gt;</span>\n<span class=\"ruby-comment\">#    &lt;/soapenv:Envelope&gt;</span>\n</pre>\n<p>For more information on namespace inheritance, please see {XML::Document#namespace_inheritance}</p>\n<h2 id=\"class-Nokogiri::XML::Builder-label-Document+Types\">\n<a href=\"Document.html\"><code>Document</code></a> Types<span><a href=\"#class-Nokogiri::XML::Builder-label-Document+Types\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>To create a document type (<a href=\"DTD.html\"><code>DTD</code></a>), use the <a href=\"Builder.html#attribute-i-doc\"><code>Builder#doc</code></a> method to get the current context document.  Then call <a href=\"Node.html#method-i-create_internal_subset\"><code>Node#create_internal_subset</code></a> to create the <a href=\"DTD.html\"><code>DTD</code></a> node.</p>\n<p>For example, this Ruby:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">xml</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">create_internal_subset</span>(\n    <span class=\"ruby-string\">'html'</span>,\n    <span class=\"ruby-string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span>,\n    <span class=\"ruby-string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>\n  )\n  <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">root</span> <span class=\"ruby-keyword\">do</span>\n    <span class=\"ruby-identifier\">xml</span>.<span class=\"ruby-identifier\">foo</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">builder</span>.<span class=\"ruby-identifier\">to_xml</span>\n</pre>\n<p>Will output this xml:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;root&gt;\n  &lt;foo/&gt;\n&lt;/root&gt;</pre>\n</section>","location":"rdoc/Nokogiri/XML/Builder.html"},{"title":"class Nokogiri::XML::Builder#context","text":"<p>A context object for use when the block has no arguments</p>","location":"rdoc/Nokogiri/XML/Builder.html#attribute-i-context"},{"title":"class Nokogiri::XML::Builder#doc","text":"<p>The current <a href=\"Document.html\"><code>Document</code></a> object being built</p>","location":"rdoc/Nokogiri/XML/Builder.html#attribute-i-doc"},{"title":"class Nokogiri::XML::Builder#parent","text":"<p>The parent of the current node being built</p>","location":"rdoc/Nokogiri/XML/Builder.html#attribute-i-parent"},{"title":"class Nokogiri::XML::Builder.new(options = {}, root = nil) { |self| ... }","text":"<p>Create a new <a href=\"Builder.html\"><code>Builder</code></a> object.  <code>options</code> are sent to the top level <a href=\"Document.html\"><code>Document</code></a> that is being built.</p><p>Building a document with a particular encoding for example:</p>","location":"rdoc/Nokogiri/XML/Builder.html#method-c-new"},{"title":"class Nokogiri::XML::Builder.with(root, &block)","text":"<p>Create a builder with an existing root object.  This is for use when you have an existing document that you would like to augment with builder methods.  The builder context created will start with the given <code>root</code> node.</p><p>For example:</p>","location":"rdoc/Nokogiri/XML/Builder.html#method-c-with"},{"title":"class Nokogiri::XML::Builder#<<(string)","text":"<p>Append the given raw <a href=\"../XML.html\"><code>XML</code></a> <code>string</code> to the document</p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-3C-3C"},{"title":"class Nokogiri::XML::Builder#[](ns)","text":"<p>Build a tag that is associated with namespace <code>ns</code>.  Raises an ArgumentError if <code>ns</code> has not been defined higher in the tree.</p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-5B-5D"},{"title":"class Nokogiri::XML::Builder#cdata(string)","text":"<p>Create a <a href=\"CDATA.html\"><code>CDATA</code></a> <a href=\"Node.html\"><code>Node</code></a> with content of <code>string</code></p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-cdata"},{"title":"class Nokogiri::XML::Builder#comment(string)","text":"<p>Create a <a href=\"Comment.html\"><code>Comment</code></a> <a href=\"Node.html\"><code>Node</code></a> with content of <code>string</code></p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-comment"},{"title":"class Nokogiri::XML::Builder#related_class(class_name) \u2192 Class","text":"<p>Find a class constant within the</p><p>Some examples:</p><p>Note this will also work for subclasses that follow the same convention, e.g.:</p><p>And even if it\u2019s a subclass, this will iterate through the superclasses:</p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-related_class"},{"title":"class Nokogiri::XML::Builder#text(string)","text":"<p>Create a <a href=\"Text.html\"><code>Text</code></a> <a href=\"Node.html\"><code>Node</code></a> with content of <code>string</code></p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-text"},{"title":"class Nokogiri::XML::Builder#to_xml(*args)","text":"<p>Convert this <a href=\"Builder.html\"><code>Builder</code></a> object to <a href=\"../XML.html\"><code>XML</code></a></p>","location":"rdoc/Nokogiri/XML/Builder.html#method-i-to_xml"},{"title":"class Nokogiri::XML::CDATA","text":"<section class=\"description\">\n<p>CData represents a CData node in an xml document.</p>\n</section>","location":"rdoc/Nokogiri/XML/CDATA.html"},{"title":"class Nokogiri::XML::CDATA.new(document, content)","text":"<p>Create a new <a href=\"CDATA.html\"><code>CDATA</code></a> element on the <code>document</code> with <code>content</code></p><p>If <code>content</code> cannot be implicitly converted to a string, this method will raise a TypeError exception.</p>","location":"rdoc/Nokogiri/XML/CDATA.html#method-c-new"},{"title":"class Nokogiri::XML::CDATA#name()","text":"<p>Get the name of this <a href=\"CDATA.html\"><code>CDATA</code></a> node</p>","location":"rdoc/Nokogiri/XML/CDATA.html#method-i-name"},{"title":"class Nokogiri::XML::CharacterData","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/CharacterData.html"},{"title":"class Nokogiri::XML::Comment","text":"<section class=\"description\">\n<p><a href=\"Comment.html\"><code>Comment</code></a> represents a comment node in an xml document.</p>\n</section>","location":"rdoc/Nokogiri/XML/Comment.html"},{"title":"class Nokogiri::XML::Comment.new(document_or_node, content)","text":"<p>Create a new <a href=\"Comment.html\"><code>Comment</code></a> element on the <code>document</code> with <code>content</code>. Alternatively, if a <code>node</code> is passed, the <code>node</code>\u2018s document is used.</p>","location":"rdoc/Nokogiri/XML/Comment.html#method-c-new"},{"title":"class Nokogiri::XML::DTD","text":"<section class=\"description\">\n<p><a href=\"DTD.html\"><code>Nokogiri::XML::DTD</code></a> wraps <a href=\"DTD.html\"><code>DTD</code></a> nodes in an <a href=\"../XML.html\"><code>XML</code></a> document</p>\n</section>","location":"rdoc/Nokogiri/XML/DTD.html"},{"title":"class Nokogiri::XML::DTD#attributes","text":"<p>Get a hash of the attributes for this <a href=\"DTD.html\"><code>DTD</code></a>.</p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-attributes"},{"title":"class Nokogiri::XML::DTD#each() { |key, value| ... }","text":"","location":"rdoc/Nokogiri/XML/DTD.html#method-i-each"},{"title":"class Nokogiri::XML::DTD#elements","text":"<p>Get a hash of the elements for this <a href=\"DTD.html\"><code>DTD</code></a>.</p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-elements"},{"title":"class Nokogiri::XML::DTD#entities","text":"<p>Get a hash of the elements for this <a href=\"DTD.html\"><code>DTD</code></a>.</p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-entities"},{"title":"class Nokogiri::XML::DTD#external_id","text":"<p>Get the External ID for this <a href=\"DTD.html\"><code>DTD</code></a></p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-external_id"},{"title":"class Nokogiri::XML::DTD#html5_dtd?()","text":"","location":"rdoc/Nokogiri/XML/DTD.html#method-i-html5_dtd-3F"},{"title":"class Nokogiri::XML::DTD#html_dtd?()","text":"","location":"rdoc/Nokogiri/XML/DTD.html#method-i-html_dtd-3F"},{"title":"class Nokogiri::XML::DTD#keys()","text":"","location":"rdoc/Nokogiri/XML/DTD.html#method-i-keys"},{"title":"class Nokogiri::XML::DTD#notations() \u2192 Hash<name(String)\u21d2Notation>","text":"<p>All the notations for this <a href=\"DTD.html\"><code>DTD</code></a> in a Hash of <a href=\"Notation.html\"><code>Notation</code></a> <code>name</code> to <a href=\"Notation.html\"><code>Notation</code></a>.</p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-notations"},{"title":"class Nokogiri::XML::DTD#system_id","text":"<p>Get the System ID for this <a href=\"DTD.html\"><code>DTD</code></a></p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-system_id"},{"title":"class Nokogiri::XML::DTD#validate(document)","text":"<p>Validate <code>document</code> returning a list of errors</p>","location":"rdoc/Nokogiri/XML/DTD.html#method-i-validate"},{"title":"class Nokogiri::XML::Document","text":"<section class=\"description\">\n<p><a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a> wraps an xml document.</p>\n<p><a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a> is the main entry point for dealing with <a href=\"../XML.html\"><code>XML</code></a> documents.  The <a href=\"Document.html\"><code>Document</code></a> is created by parsing an <a href=\"../XML.html\"><code>XML</code></a> document.  See <a href=\"Document.html#method-c-parse\"><code>Nokogiri::XML::Document.parse</code></a> for more information on parsing.</p>\n<p>For searching a <a href=\"Document.html\"><code>Document</code></a>, see <a href=\"Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a> and <a href=\"Searchable.html#method-i-xpath\"><code>Nokogiri::XML::Searchable#xpath</code></a></p>\n</section>","location":"rdoc/Nokogiri/XML/Document.html"},{"title":"class Nokogiri::XML::Document#errors","text":"<p>The errors found while parsing a document.</p><p>Array&lt;Nokogiri::XML::SyntaxError&gt;</p>","location":"rdoc/Nokogiri/XML/Document.html#attribute-i-errors"},{"title":"class Nokogiri::XML::Document#namespace_inheritance","text":"<p>When \u2018true`, reparented elements without a namespace will inherit their new parent\u2019s namespace (if one exists). Defaults to \u2018false`.</p><p>Boolean</p><p><strong>Example:</strong> Default behavior of namespace inheritance</p><p><strong>Example:</strong> Setting namespace inheritance to \u2018true`</p><p>Since v1.12.4</p>","location":"rdoc/Nokogiri/XML/Document.html#attribute-i-namespace_inheritance"},{"title":"class Nokogiri::XML::Document.new(version = default)","text":"<p>Create a new document with <code>version</code> (defaults to \u201c1.0\u201d)</p>","location":"rdoc/Nokogiri/XML/Document.html#method-c-new"},{"title":"class Nokogiri::XML::Document.parse(string_or_io, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML) { |options| ... }","text":"<p>Parse an <a href=\"../XML.html\"><code>XML</code></a> file.</p><p><code>string_or_io</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as an IO, or StringIO.</p><p><code>url</code> (optional) is the URI where this document is located.</p><p><code>encoding</code> (optional) is the encoding that should be used when processing the document.</p><p><code>options</code> (optional) is a configuration object that sets options during parsing, such as Nokogiri::XML::ParseOptions::RECOVER. See the <a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a> for more information.</p><p><code>block</code> (optional) is passed a configuration object on which parse options may be set.</p><p>By default, <a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> treats documents as untrusted, and so does not attempt to load DTDs or access the network. See <a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a> for a complete list of options; and that module\u2019s DEFAULT_XML constant for what\u2019s set (and not set) by default.</p><p><a href=\"../../Nokogiri.html#method-c-XML\"><code>Nokogiri.XML()</code></a> is a convenience method which will call this method.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-c-parse"},{"title":"class Nokogiri::XML::Document.read_io(io, url, encoding, options)","text":"<p>Create a new document from an IO object</p>","location":"rdoc/Nokogiri/XML/Document.html#method-c-read_io"},{"title":"class Nokogiri::XML::Document.read_memory(string, url, encoding, options)","text":"<p>Create a new document from a String</p>","location":"rdoc/Nokogiri/XML/Document.html#method-c-read_memory"},{"title":"class Nokogiri::XML::Document.wrap(java_document) \u2192 Nokogiri::XML::Document","text":"<p>\u26a0 This method is only available when running JRuby.</p><p>Create a <a href=\"Document.html\"><code>Document</code></a> using an existing Java DOM document object.</p><p>The returned <a href=\"Document.html\"><code>Document</code></a> shares the same underlying data structure as the Java object, so changes in one are reflected in the other.</p><p>\u2018java_document` (Java::OrgW3cDom::Document) (The class `Java::OrgW3cDom::Document` is also accessible as `org.w3c.dom.Document`.)</p><p><a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a></p><p>See also #to_java</p>","location":"rdoc/Nokogiri/XML/Document.html#method-c-wrap"},{"title":"class Nokogiri::XML::Document#<<(node_or_tags)","text":"","location":"rdoc/Nokogiri/XML/Document.html#method-i-3C-3C"},{"title":"class Nokogiri::XML::Document#add_child(node_or_tags)","text":"","location":"rdoc/Nokogiri/XML/Document.html#method-i-add_child"},{"title":"class Nokogiri::XML::Document#canonicalize(mode=XML_C14N_1_0,inclusive_namespaces=nil,with_comments=false)","text":"<p>Canonicalize a document and return the results.  Takes an optional block that takes two parameters: the <code>obj</code> and that node\u2019s <code>parent</code>. The  <code>obj</code> will be either a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, or a <a href=\"Namespace.html\"><code>Nokogiri::XML::Namespace</code></a> The block must return a non-nil, non-false value if the <code>obj</code> passed in should be included in the canonicalized document.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-canonicalize"},{"title":"class Nokogiri::XML::Document#clone \u2192 Nokogiri::XML::Document","text":"<p>Clone this node.</p><p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep copy.</p><p>The new <a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-clone"},{"title":"class Nokogiri::XML::Document#collect_namespaces() \u2192 Hash<String(Namespace#prefix) \u21d2 String(Namespace#href)>","text":"<p>Recursively get all namespaces from this node and its subtree and return them as a hash.</p><p>\u26a0 This method will not handle duplicate namespace prefixes, since the return value is a hash.</p><p>Note that this method does an xpath lookup for nodes with namespaces, and as a result the order (and which duplicate prefix \u201cwins\u201d) may be dependent on the implementation of the underlying <a href=\"../XML.html\"><code>XML</code></a> library.</p><p><strong>Example:</strong> Basic usage</p><p>Given this document:</p><p>This method will return:</p><p><strong>Example:</strong> Duplicate prefixes</p><p>Given this document:</p><p>The hash returned will be something like:</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-collect_namespaces"},{"title":"class Nokogiri::XML::Document#create_cdata(string, &block)","text":"<p>Create a <a href=\"CDATA.html\"><code>CDATA</code></a> <a href=\"Node.html\"><code>Node</code></a> containing <code>string</code></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-create_cdata"},{"title":"class Nokogiri::XML::Document#create_comment(string, &block)","text":"<p>Create a <a href=\"Comment.html\"><code>Comment</code></a> <a href=\"Node.html\"><code>Node</code></a> containing <code>string</code></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-create_comment"},{"title":"class Nokogiri::XML::Document#create_element(name, *contents_or_attrs, &block) \u2192 Nokogiri::XML::Element","text":"<p>Create a new <a href=\"Element.html\"><code>Element</code></a> with \u2018name` belonging to this document, optionally setting contents or attributes.</p><p>This method is <em>not</em> the most user-friendly option if your intention is to add a node to the document tree. Prefer one of the <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a> methods like <a href=\"Node.html#method-i-add_child\"><code>Node#add_child</code></a>, <a href=\"Node.html#method-i-add_next_sibling\"><code>Node#add_next_sibling</code></a>, <a href=\"Node.html#method-i-replace\"><code>Node#replace</code></a>, etc. which will both create an element (or subtree) and place it in the document tree.</p><p>Arguments may be passed to initialize the element:</p><p>a Hash argument will be used to set attributes</p><p>a non-Hash object that responds to #to_s will be used to set the new node\u2019s contents</p><p>A block may be passed to mutate the node.</p><p>\u2018name` (String)</p><p>\u2018contents_or_attrs` (#to_s, Hash)</p><p>\u2018node` (<a href=\"Element.html\"><code>Nokogiri::XML::Element</code></a>)</p><p><a href=\"Element.html\"><code>Nokogiri::XML::Element</code></a></p><p><strong>Example:</strong> An empty element without attributes</p><p><strong>Example:</strong> An element with contents</p><p><strong>Example:</strong> An element with attributes</p><p><strong>Example:</strong> An element with contents and attributes</p><p><strong>Example:</strong> Passing a block to mutate the element</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-create_element"},{"title":"class Nokogiri::XML::Document#create_entity(name, type, external_id, system_id, content)","text":"<p>Create a new entity named <code>name</code>.</p><p><code>type</code> is an integer representing the type of entity to be created, and it defaults to <code>Nokogiri::XML::EntityDecl::INTERNAL_GENERAL</code>. See the constants on <a href=\"EntityDecl.html\"><code>Nokogiri::XML::EntityDecl</code></a> for more information.</p><p><code>external_id</code>, <code>system_id</code>, and <code>content</code> set the External ID, System ID, and content respectively.  All of these parameters are optional.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-create_entity"},{"title":"class Nokogiri::XML::Document#create_text_node(string, &block)","text":"<p>Create a <a href=\"Text.html\"><code>Text</code></a> <a href=\"Node.html\"><code>Node</code></a> with <code>string</code></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-create_text_node"},{"title":"class Nokogiri::XML::Document#deconstruct_keys(array_of_names) \u2192 Hash","text":"<p>Returns a hash describing the <a href=\"Document.html\"><code>Document</code></a>, to use in pattern matching.</p><p>Valid keys and their values:</p><p><code>root</code> \u2192 (<a href=\"Node.html\"><code>Node</code></a>, nil) The root node of the <a href=\"Document.html\"><code>Document</code></a>, or <code>nil</code> if the document is empty.</p><p>In the future, other keys may allow accessing things like doctype and processing instructions. If you have a use case and would like this functionality, please let us know by opening an issue or a discussion on the github project.</p><p><strong>Example</strong></p><p><strong>Example</strong> of an empty document</p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-deconstruct_keys"},{"title":"class Nokogiri::XML::Document#decorate(node)","text":"<p>Apply any decorators to <code>node</code></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-decorate"},{"title":"class Nokogiri::XML::Document#decorators(key)","text":"<p>Get the list of decorators given <code>key</code></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-decorators"},{"title":"class Nokogiri::XML::Document#document()","text":"<p>A reference to <code>self</code></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-document"},{"title":"class Nokogiri::XML::Document#dup \u2192 Nokogiri::XML::Document","text":"<p>Duplicate this node.</p><p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep copy.</p><p>The new <a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-dup"},{"title":"class Nokogiri::XML::Document#encoding","text":"<p>Get the encoding for this <a href=\"Document.html\"><code>Document</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-encoding"},{"title":"class Nokogiri::XML::Document#encoding= encoding","text":"<p>Set the encoding string for this <a href=\"Document.html\"><code>Document</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-encoding-3D"},{"title":"class Nokogiri::XML::Document#fragment(tags = nil)","text":"<p>Create a <a href=\"DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a> from <code>tags</code> Returns an empty fragment if <code>tags</code> is nil.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-fragment"},{"title":"class Nokogiri::XML::Document#name()","text":"<p>The name of this document.  Always returns \u201cdocument\u201d</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-name"},{"title":"class Nokogiri::XML::Document#namespaces()","text":"<p>Get the hash of namespaces on the root <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-namespaces"},{"title":"class Nokogiri::XML::Document#remove_namespaces!","text":"<p>Remove all namespaces from all nodes in the document.</p><p>This could be useful for developers who either don\u2019t understand namespaces or don\u2019t care about them.</p><p>The following example shows a use case, and you can decide for yourself whether this is a good thing or not:</p><p>For more information on why this probably is <strong>not</strong> a good thing in general, please direct your browser to <a href=\"http://tenderlovemaking.com/2009/04/23/namespaces-in-xml.html\">tenderlovemaking.com/2009/04/23/namespaces-in-xml.html</a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-remove_namespaces-21"},{"title":"class Nokogiri::XML::Document#root","text":"<p>Get the root node for this document.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-root"},{"title":"class Nokogiri::XML::Document#root=","text":"<p>Set the root element on this document</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-root-3D"},{"title":"class Nokogiri::XML::Document#slop!()","text":"<p>Explore a document with shortcut methods. See <a href=\"../../Nokogiri.html#method-c-Slop\"><code>Nokogiri::Slop</code></a> for details.</p><p>Note that any nodes that have been instantiated before <a href=\"Document.html#method-i-slop-21\"><code>#slop!</code></a> is called will not be decorated with sloppy behavior. So, if you\u2019re in irb, the preferred idiom is:</p><p>and not</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-slop-21"},{"title":"class Nokogiri::XML::Document#to_java() \u2192 Java::OrgW3cDom::Document","text":"<p>\u26a0 This method is only available when running JRuby.</p><p>Returns the underlying Java DOM document object for this document.</p><p>The returned Java object shares the same underlying data structure as this document, so changes in one are reflected in the other.</p><p>Java::OrgW3cDom::Document (The class \u2018Java::OrgW3cDom::Document` is also accessible as `org.w3c.dom.Document`.)</p><p>See also <a href=\"Document.html#method-c-wrap\"><code>Document.wrap</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-to_java"},{"title":"class Nokogiri::XML::Document#url","text":"<p>Get the url name for this document.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-url"},{"title":"class Nokogiri::XML::Document#validate()","text":"<p>Validate this <a href=\"Document.html\"><code>Document</code></a> against its <a href=\"DTD.html\"><code>DTD</code></a>.  Returns a list of errors on the document or <code>nil</code> when there is no <a href=\"DTD.html\"><code>DTD</code></a>.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-validate"},{"title":"class Nokogiri::XML::Document#version","text":"<p>Get the <a href=\"../XML.html\"><code>XML</code></a> version for this <a href=\"Document.html\"><code>Document</code></a></p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-version"},{"title":"class Nokogiri::XML::Document#xpath_doctype() \u2192 Nokogiri::CSS::XPathVisitor::DoctypeConfig","text":"<p>The document type which determines CSS-to-XPath translation.</p><p>See XPathVisitor for more information.</p>","location":"rdoc/Nokogiri/XML/Document.html#method-i-xpath_doctype"},{"title":"class Nokogiri::XML::DocumentFragment","text":"<section class=\"description\">\n<p><a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> represents a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> node in an xml document.</p>\n</section>","location":"rdoc/Nokogiri/XML/DocumentFragment.html"},{"title":"class Nokogiri::XML::DocumentFragment#parse_options","text":"<p>The options used to parse the document fragment. Returns the value of any options that were passed into the constructor as a parameter or set in a config block, else the default options for the specific subclass.</p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#attribute-i-parse_options"},{"title":"class Nokogiri::XML::DocumentFragment.new(document)","text":"<p>Create a new <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> element on the <code>document</code></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-c-new"},{"title":"class Nokogiri::XML::DocumentFragment.new(document, tags = nil, ctx = nil, options = ParseOptions::DEFAULT_XML) { |options| ... }","text":"<p>Create a new <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> from <code>tags</code>.</p><p>If <code>ctx</code> is present, it is used as a context node for the subtree created, e.g., namespaces will be resolved relative to <code>ctx</code>.</p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-c-new"},{"title":"class Nokogiri::XML::DocumentFragment.parse(tags, options = ParseOptions::DEFAULT_XML, &block)","text":"<p>Create a <a href=\"DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a> from <code>tags</code></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-c-parse"},{"title":"class Nokogiri::XML::DocumentFragment#css *rules, [namespace-bindings, custom-pseudo-class]","text":"<p>Search this fragment for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors. For example:</p><p>For more information see <a href=\"Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-css"},{"title":"class Nokogiri::XML::DocumentFragment#deconstruct() \u2192 Array","text":"<p>Returns the root nodes of this document fragment as an array, to use in pattern matching.</p><p>\ud83d\udca1 Note that text nodes are returned as well as elements. If you wish to operate only on root elements, you should deconstruct the array returned by <code>DocumentFragment#elements</code>.</p><p><strong>Example</strong></p><p><strong>Example</strong> only the elements, not the text nodes.</p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-deconstruct"},{"title":"class Nokogiri::XML::DocumentFragment#dup()","text":"","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-dup"},{"title":"class Nokogiri::XML::DocumentFragment#errors()","text":"<p>A list of <a href=\"SyntaxError.html\"><code>Nokogiri::XML::SyntaxError</code></a> found when parsing a document</p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-errors"},{"title":"class Nokogiri::XML::DocumentFragment#fragment(data)","text":"","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-fragment"},{"title":"class Nokogiri::XML::DocumentFragment#name()","text":"<p>return the name for <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-name"},{"title":"class Nokogiri::XML::DocumentFragment#search *paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class]","text":"<p>Search this fragment for <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries.</p><p>For more information see <a href=\"Searchable.html#method-i-search\"><code>Nokogiri::XML::Searchable#search</code></a></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-search"},{"title":"class Nokogiri::XML::DocumentFragment#serialize()","text":"","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-serialize"},{"title":"class Nokogiri::XML::DocumentFragment#to_html(*args)","text":"<p>Convert this <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> to html See <a href=\"NodeSet.html#method-i-to_html\"><code>Nokogiri::XML::NodeSet#to_html</code></a></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-to_html"},{"title":"class Nokogiri::XML::DocumentFragment#to_s()","text":"<p>Convert this <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> to a string</p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-to_s"},{"title":"class Nokogiri::XML::DocumentFragment#to_xhtml(*args)","text":"<p>Convert this <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> to xhtml See <a href=\"NodeSet.html#method-i-to_xhtml\"><code>Nokogiri::XML::NodeSet#to_xhtml</code></a></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-to_xhtml"},{"title":"class Nokogiri::XML::DocumentFragment#to_xml(*args)","text":"<p>Convert this <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> to xml See <a href=\"NodeSet.html#method-i-to_xml\"><code>Nokogiri::XML::NodeSet#to_xml</code></a></p>","location":"rdoc/Nokogiri/XML/DocumentFragment.html#method-i-to_xml"},{"title":"class Nokogiri::XML::Element","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/Element.html"},{"title":"class Nokogiri::XML::ElementContent","text":"<section class=\"description\">\n<p>Represents the allowed content in an <a href=\"Element.html\"><code>Element</code></a> Declaration inside a DTD:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;&lt;?TEST-STYLE PIDATA?&gt;\n&lt;!DOCTYPE staff SYSTEM \"staff.dtd\" [\n   &lt;!ELEMENT div1 (head, (p | list | note)*, div2*)&gt;\n]&gt;\n&lt;/root&gt;</pre>\n<p><a href=\"ElementContent.html\"><code>ElementContent</code></a> represents the binary tree inside the &lt;!ELEMENT&gt; tag shown above that lists the possible content for the div1 tag.</p>\n</section>","location":"rdoc/Nokogiri/XML/ElementContent.html"},{"title":"class Nokogiri::XML::ElementContent#document","text":"","location":"rdoc/Nokogiri/XML/ElementContent.html#attribute-i-document"},{"title":"class Nokogiri::XML::ElementContent#children()","text":"<p>Get the children of this <a href=\"ElementContent.html\"><code>ElementContent</code></a> node</p>","location":"rdoc/Nokogiri/XML/ElementContent.html#method-i-children"},{"title":"class Nokogiri::XML::ElementContent#name \u2192 String","text":"<p>The content element\u2019s <code>name</code></p>","location":"rdoc/Nokogiri/XML/ElementContent.html#method-i-name"},{"title":"class Nokogiri::XML::ElementContent#occur \u2192 Integer","text":"<p>The content element\u2019s <code>occur</code> flag. Possible values are <code>ONCE</code>, <code>OPT</code>, <code>MULT</code> or <code>PLUS</code>.</p>","location":"rdoc/Nokogiri/XML/ElementContent.html#method-i-occur"},{"title":"class Nokogiri::XML::ElementContent#prefix \u2192 String","text":"<p>The content element\u2019s namespace <code>prefix</code>.</p>","location":"rdoc/Nokogiri/XML/ElementContent.html#method-i-prefix"},{"title":"class Nokogiri::XML::ElementContent#type \u2192 Integer","text":"<p>The content element\u2019s <code>type</code>. Possible values are <code>PCDATA</code>, <code>ELEMENT</code>, <code>SEQ</code>, or <code>OR</code>.</p>","location":"rdoc/Nokogiri/XML/ElementContent.html#method-i-type"},{"title":"class Nokogiri::XML::ElementDecl","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/ElementDecl.html"},{"title":"class Nokogiri::XML::ElementDecl#content \u2192 Nokogiri::XML::ElementContent","text":"<p>The root of this element declaration\u2019s content tree.</p>","location":"rdoc/Nokogiri/XML/ElementDecl.html#method-i-content"},{"title":"class Nokogiri::XML::ElementDecl#element_type \u2192 Integer","text":"<p>The <a href=\"ElementDecl.html#method-i-element_type\"><code>element_type</code></a></p>","location":"rdoc/Nokogiri/XML/ElementDecl.html#method-i-element_type"},{"title":"class Nokogiri::XML::ElementDecl#prefix \u2192 String","text":"<p>The namespace <code>prefix</code> for this element declaration.</p>","location":"rdoc/Nokogiri/XML/ElementDecl.html#method-i-prefix"},{"title":"class Nokogiri::XML::EntityDecl","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/EntityDecl.html"},{"title":"class Nokogiri::XML::EntityDecl.new(name, doc, *args)","text":"","location":"rdoc/Nokogiri/XML/EntityDecl.html#method-c-new"},{"title":"class Nokogiri::XML::EntityDecl#content","text":"<p>Get the content</p>","location":"rdoc/Nokogiri/XML/EntityDecl.html#method-i-content"},{"title":"class Nokogiri::XML::EntityDecl#entity_type","text":"<p>Get the entity type</p>","location":"rdoc/Nokogiri/XML/EntityDecl.html#method-i-entity_type"},{"title":"class Nokogiri::XML::EntityDecl#external_id","text":"<p>Get the external identifier for PUBLIC</p>","location":"rdoc/Nokogiri/XML/EntityDecl.html#method-i-external_id"},{"title":"class Nokogiri::XML::EntityDecl#original_content","text":"<p>Get the <a href=\"EntityDecl.html#method-i-original_content\"><code>original_content</code></a> before ref substitution</p>","location":"rdoc/Nokogiri/XML/EntityDecl.html#method-i-original_content"},{"title":"class Nokogiri::XML::EntityDecl#system_id","text":"<p>Get the URI for a SYSTEM or PUBLIC Entity</p>","location":"rdoc/Nokogiri/XML/EntityDecl.html#method-i-system_id"},{"title":"class Nokogiri::XML::EntityReference","text":"<section class=\"description\">\n<p><a href=\"EntityReference.html\"><code>EntityReference</code></a> represents an <a href=\"EntityReference.html\"><code>EntityReference</code></a> node in an xml document.</p>\n</section>","location":"rdoc/Nokogiri/XML/EntityReference.html"},{"title":"class Nokogiri::XML::EntityReference.new(document, content)","text":"<p>Create a new <a href=\"EntityReference.html\"><code>EntityReference</code></a> element on the <code>document</code> with <code>name</code></p>","location":"rdoc/Nokogiri/XML/EntityReference.html#method-c-new"},{"title":"class Nokogiri::XML::EntityReference#children()","text":"","location":"rdoc/Nokogiri/XML/EntityReference.html#method-i-children"},{"title":"class Nokogiri::XML::EntityReference#inspect_attributes()","text":"","location":"rdoc/Nokogiri/XML/EntityReference.html#method-i-inspect_attributes"},{"title":"class Nokogiri::XML::Namespace","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/Namespace.html"},{"title":"class Nokogiri::XML::Namespace#document","text":"","location":"rdoc/Nokogiri/XML/Namespace.html#attribute-i-document"},{"title":"class Nokogiri::XML::Namespace#deconstruct_keys(array_of_names) \u2192 Hash","text":"<p>Returns a hash describing the <a href=\"Namespace.html\"><code>Namespace</code></a>, to use in pattern matching.</p><p>Valid keys and their values:</p><p><code>prefix</code> \u2192 (String, nil) The namespace\u2019s prefix, or <code>nil</code> if there is no prefix (e.g., default namespace).</p><p><code>href</code> \u2192 (String) The namespace\u2019s URI</p><p><strong>Example</strong></p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/XML/Namespace.html#method-i-deconstruct_keys"},{"title":"class Nokogiri::XML::Namespace#href() \u2192 String","text":"<p>Returns the URI reference for this <a href=\"Namespace.html\"><code>Namespace</code></a>.</p><p><strong>Example</strong></p>","location":"rdoc/Nokogiri/XML/Namespace.html#method-i-href"},{"title":"class Nokogiri::XML::Namespace#prefix() \u2192 String or nil","text":"<p>Return the prefix for this <a href=\"Namespace.html\"><code>Namespace</code></a>, or <code>nil</code> if there is no prefix (e.g., default namespace).</p><p><strong>Example</strong></p>","location":"rdoc/Nokogiri/XML/Namespace.html#method-i-prefix"},{"title":"class Nokogiri::XML::Node","text":"<section class=\"description\">\n<p><a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a> is the primary API you\u2019ll use to interact with your <a href=\"Document.html\"><code>Document</code></a>.</p>\n<h2 id=\"class-Nokogiri::XML::Node-label-Attributes\">Attributes<span><a href=\"#class-Nokogiri::XML::Node-label-Attributes\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>A <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a> may be treated similarly to a hash with regard to attributes. For example:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">DocumentFragment</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">\"&lt;a href='#foo' id='link'&gt;link&lt;/a&gt;\"</span>).<span class=\"ruby-identifier\">at_css</span>(<span class=\"ruby-string\">\"a\"</span>)\n<span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">to_html</span> <span class=\"ruby-comment\"># =&gt; \"&lt;a href=\\\"#foo\\\" id=\\\"link\\\"&gt;link&lt;/a&gt;\"</span>\n<span class=\"ruby-identifier\">node</span>[<span class=\"ruby-string\">'href'</span>] <span class=\"ruby-comment\"># =&gt; \"#foo\"</span>\n<span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># =&gt; [\"href\", \"id\"]</span>\n<span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">values</span> <span class=\"ruby-comment\"># =&gt; [\"#foo\", \"link\"]</span>\n<span class=\"ruby-identifier\">node</span>[<span class=\"ruby-string\">'class'</span>] = <span class=\"ruby-string\">'green'</span> <span class=\"ruby-comment\"># =&gt; \"green\"</span>\n<span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">to_html</span> <span class=\"ruby-comment\"># =&gt; \"&lt;a href=\\\"#foo\\\" id=\\\"link\\\" class=\\\"green\\\"&gt;link&lt;/a&gt;\"</span>\n</pre>\n<p>See the method group entitled <a href=\"Node.html#class-Nokogiri::XML::Node-label-Working+With+Node+Attributes\">Working With Node Attributes at <code>Node</code></a> for the full set of methods.</p>\n<h2 id=\"class-Nokogiri::XML::Node-label-Navigation\">Navigation<span><a href=\"#class-Nokogiri::XML::Node-label-Navigation\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p><a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a> also has methods that let you move around your tree:</p>\n<dl class=\"rdoc-list label-list\">\n<dt>\n<a href=\"Node.html#method-i-parent\"><code>#parent</code></a>, <a href=\"Node.html#method-i-children\"><code>#children</code></a>, <a href=\"Node.html#method-i-next\"><code>#next</code></a>, <a href=\"Node.html#method-i-previous\"><code>#previous</code></a>\n</dt>\n<dd>\n<p>Navigate up, down, or through siblings.</p>\n</dd>\n</dl>\n<p>See the method group entitled <a href=\"Node.html#class-Nokogiri::XML::Node-label-Traversing+Document+Structure\">Traversing Document Structure at <code>Node</code></a> for the full set of methods.</p>\n<h2 id=\"class-Nokogiri::XML::Node-label-Serialization\">Serialization<span><a href=\"#class-Nokogiri::XML::Node-label-Serialization\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>When printing or otherwise emitting a document or a node (and its subtree), there are a few methods you might want to use:</p>\n<dl class=\"rdoc-list label-list\">\n<dt>\n<a href=\"Node.html#method-i-content\"><code>#content</code></a>, <a href=\"Node.html#method-i-text\"><code>#text</code></a>, <a href=\"Node.html#method-i-inner_text\"><code>#inner_text</code></a>, <a href=\"Node.html#method-i-to_str\"><code>#to_str</code></a>\n</dt>\n<dd>\n<p>These methods will all **emit plaintext**, meaning that entities will be replaced (e.g., +&amp;lt;+ will be replaced with +&lt;+), meaning that any sanitizing will likely be un-done in the output.</p>\n</dd>\n<dt>\n<a href=\"Node.html#method-i-to_s\"><code>#to_s</code></a>, <a href=\"Node.html#method-i-to_xml\"><code>#to_xml</code></a>, <a href=\"Node.html#method-i-to_html\"><code>#to_html</code></a>, <a href=\"Node.html#method-i-inner_html\"><code>#inner_html</code></a>\n</dt>\n<dd>\n<p>These methods will all **emit properly-escaped markup**, meaning that it\u2019s suitable for consumption by browsers, parsers, etc.</p>\n</dd>\n</dl>\n<p>See the method group entitled <a href=\"Node.html#class-Nokogiri::XML::Node-label-Serialization+and+Generating+Output\">Serialization and Generating Output at <code>Node</code></a> for the full set of methods.</p>\n<h2 id=\"class-Nokogiri::XML::Node-label-Searching\">Searching<span><a href=\"#class-Nokogiri::XML::Node-label-Searching\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>You may search this node\u2019s subtree using methods like <a href=\"Node.html#method-i-xpath\"><code>#xpath</code></a> and <a href=\"Node.html#method-i-css\"><code>#css</code></a>.</p>\n<p>See the method group entitled <a href=\"Node.html#class-Nokogiri::XML::Node-label-Searching+via+XPath+or+CSS+Queries\">Searching via XPath or CSS Queries at <code>Node</code></a> for the full set of methods.</p>\n</section>","location":"rdoc/Nokogiri/XML/Node.html"},{"title":"class Nokogiri::XML::Node.new(name, document) \u2192 Nokogiri::XML::Node","text":"<p>Create a new node with <code>name</code> that belongs to <code>document</code>.</p><p>If you intend to add a node to a document tree, it\u2019s likely that you will prefer one of the <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a> methods like <a href=\"Node.html#method-i-add_child\"><code>#add_child</code></a>, <a href=\"Node.html#method-i-add_next_sibling\"><code>#add_next_sibling</code></a>, <a href=\"Node.html#method-i-replace\"><code>#replace</code></a>, etc. which will both create an element (or subtree) and place it in the document tree.</p><p>Another alternative, if you are concerned about performance, is <a href=\"Document.html#method-i-create_element\"><code>Nokogiri::XML::Document#create_element</code></a> which accepts additional arguments for contents or attributes but (like this method) avoids parsing markup.</p><p><code>name</code> (String)</p><p><code>document</code> (<a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a>) The document to which the the returned node will belong.</p><p><a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a></p><p><a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-c-new"},{"title":"class Nokogiri::XML::Node#<=>(other)","text":"<p>Compare two <a href=\"Node.html\"><code>Node</code></a> objects with respect to their <a href=\"Document.html\"><code>Document</code></a>.  Nodes from different documents cannot be compared.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-3C-3D-3E"},{"title":"class Nokogiri::XML::Node#==(other)","text":"<p>Test to see if this <a href=\"Node.html\"><code>Node</code></a> is equal to <code>other</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-3D-3D"},{"title":"class Nokogiri::XML::Node#accept(visitor)","text":"<p>Accept a visitor.  This method calls \u201cvisit\u201d on <code>visitor</code> with self.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-accept"},{"title":"class Nokogiri::XML::Node#ancestors(selector = nil)","text":"<p>Get a list of ancestor <a href=\"Node.html\"><code>Node</code></a> for this <a href=\"Node.html\"><code>Node</code></a>.  If <code>selector</code> is given, the ancestors must match <code>selector</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-ancestors"},{"title":"class Nokogiri::XML::Node#blank? \u2192 Boolean","text":"<p><code>true</code> if the node is an empty or whitespace-only text or cdata node, else <code>false</code>.</p><p><strong>Example:</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-blank-3F"},{"title":"class Nokogiri::XML::Node#cdata?()","text":"<p>Returns true if this is a <a href=\"CDATA.html\"><code>CDATA</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-cdata-3F"},{"title":"class Nokogiri::XML::Node#clone \u2192 Nokogiri::XML::Node","text":"<p>Clone this node.</p><p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep copy.</p><p><code>new_parent_doc</code> The new node\u2019s parent <a href=\"Document.html\"><code>Document</code></a>. Defaults to the the <a href=\"Document.html\"><code>Document</code></a> of the current node.</p><p>The new <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-clone"},{"title":"class Nokogiri::XML::Node#comment?()","text":"<p>Returns true if this is a <a href=\"Comment.html\"><code>Comment</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-comment-3F"},{"title":"class Nokogiri::XML::Node#content() \u2192 String","text":"<p>Contents of all the text nodes in this node\u2019s subtree, concatenated together into a single String.</p><p>\u26a0 Note that entities will <em>always</em> be expanded in the returned String.</p><p>See related: <a href=\"Node.html#method-i-inner_html\"><code>#inner_html</code></a></p><p><strong>Example</strong> of how entities are handled:</p><p>Note that <code>&amp;lt;</code> becomes <code>&lt;</code> in the returned String.</p><p><strong>Example</strong> of how a subtree is handled:</p><p>Note that the <code>&lt;span&gt;</code> tags are omitted and only the text node contents are returned, concatenated into a single string.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-content"},{"title":"class Nokogiri::XML::Node#create_external_subset(name, external_id, system_id)","text":"<p>Create an external subset</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-create_external_subset"},{"title":"class Nokogiri::XML::Node#create_internal_subset(name, external_id, system_id)","text":"<p>Create the internal subset of a document.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-create_internal_subset"},{"title":"class Nokogiri::XML::Node#css_path()","text":"<p>Get the path to this node as a <a href=\"../CSS.html\"><code>CSS</code></a> expression</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-css_path"},{"title":"class Nokogiri::XML::Node#decorate!()","text":"<p>Decorate this node with the decorators set up in this node\u2019s <a href=\"Document.html\"><code>Document</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-decorate-21"},{"title":"class Nokogiri::XML::Node#description()","text":"<p>Fetch the <a href=\"../HTML4/ElementDescription.html\"><code>Nokogiri::HTML4::ElementDescription</code></a> for this node.  Returns nil on <a href=\"../XML.html\"><code>XML</code></a> documents and on unknown tags.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-description"},{"title":"class Nokogiri::XML::Node#document?()","text":"<p>Returns true if this is a <a href=\"Document.html\"><code>Document</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-document-3F"},{"title":"class Nokogiri::XML::Node#dup \u2192 Nokogiri::XML::Node","text":"<p>Duplicate this node.</p><p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep copy.</p><p><code>new_parent_doc</code> (optional <a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a>) The new node\u2019s parent <a href=\"Document.html\"><code>Document</code></a>. Defaults to the the <a href=\"Document.html\"><code>Document</code></a> of the current node.</p><p>The new <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-dup"},{"title":"class Nokogiri::XML::Node#elem?()","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-elem-3F"},{"title":"class Nokogiri::XML::Node#element?()","text":"<p>Returns true if this is an <a href=\"Element.html\"><code>Element</code></a> node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-element-3F"},{"title":"class Nokogiri::XML::Node#element_children() \u2192 NodeSet","text":"<p>The node\u2019s child elements as a <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Only children that are elements will be returned, which notably excludes <a href=\"Text.html\"><code>Text</code></a> nodes.</p><p><strong>Example:</strong></p><p>Note that <a href=\"Node.html#method-i-children\"><code>#children</code></a> returns the <a href=\"Text.html\"><code>Text</code></a> node \u201chello\u201d while <a href=\"Node.html#method-i-element_children\"><code>#element_children</code></a> does not.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-element_children"},{"title":"class Nokogiri::XML::Node#elements() \u2192 NodeSet","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-elements"},{"title":"class Nokogiri::XML::Node#encode_special_chars(string) \u2192 String","text":"<p>Encode any special characters in <code>string</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-encode_special_chars"},{"title":"class Nokogiri::XML::Node#external_subset()","text":"<p>Get the external subset</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-external_subset"},{"title":"class Nokogiri::XML::Node#first_element_child() \u2192 Node","text":"<p>The first child <a href=\"Node.html\"><code>Node</code></a> that is an element.</p><p><strong>Example:</strong></p><p>Note that the \u201chello\u201d child, which is a <a href=\"Text.html\"><code>Text</code></a> node, is skipped and the <code>&lt;span&gt;</code> element is returned.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-first_element_child"},{"title":"class Nokogiri::XML::Node#fragment(tags)","text":"<p>Create a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a> containing <code>tags</code> that is relative to <em>this</em> context node.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-fragment"},{"title":"class Nokogiri::XML::Node#fragment?()","text":"<p>Returns true if this is a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-fragment-3F"},{"title":"class Nokogiri::XML::Node#html?()","text":"<p>Returns true if this is an <a href=\"../HTML4/Document.html\"><code>HTML4::Document</code></a> or <a href=\"../HTML5/Document.html\"><code>HTML5::Document</code></a> node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-html-3F"},{"title":"class Nokogiri::XML::Node#inner_html(*args)","text":"<p>Get the <a href=\"Node.html#method-i-inner_html\"><code>inner_html</code></a> for this node\u2019s <a href=\"Node.html#method-i-children\"><code>Node#children</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-inner_html"},{"title":"class Nokogiri::XML::Node#inner_text","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-inner_text"},{"title":"class Nokogiri::XML::Node#internal_subset()","text":"<p>Get the internal subset</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-internal_subset"},{"title":"class Nokogiri::XML::Node#key?(attribute)","text":"<p>Returns true if <code>attribute</code> is set</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-key-3F"},{"title":"class Nokogiri::XML::Node#lang","text":"<p>Searches the language of a node, i.e. the values of the xml:lang attribute or the one carried by the nearest ancestor.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-lang"},{"title":"class Nokogiri::XML::Node#lang=","text":"<p>Set the language of a node, i.e. the values of the xml:lang attribute.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-lang-3D"},{"title":"class Nokogiri::XML::Node#last_element_child() \u2192 Node","text":"<p>The last child <a href=\"Node.html\"><code>Node</code></a> that is an element.</p><p><strong>Example:</strong></p><p>Note that the \u201chello\u201d child, which is a <a href=\"Text.html\"><code>Text</code></a> node, is skipped and the <code>&lt;span&gt;yes&lt;/span&gt;</code> element is returned.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-last_element_child"},{"title":"class Nokogiri::XML::Node#line() \u2192 Integer","text":"<p>The line number of this <a href=\"Node.html\"><code>Node</code></a>.</p><p><strong> \u26a0 The CRuby and JRuby implementations differ in important ways! </strong></p><p>Semantic differences:</p><p>The CRuby method reflects the node\u2019s line number <em>in the parsed string</em></p><p>The JRuby method reflects the node\u2019s line number <em>in the final DOM structure</em> after corrections have been applied</p><p>Performance differences:</p><p>The CRuby method is <a href=\"https://en.wikipedia.org/wiki/Time_complexity#Constant_time\">O(1)</a> (constant time)</p><p>The JRuby method is <a href=\"https://en.wikipedia.org/wiki/Time_complexity#Linear_time\">O(n)</a> (linear time, where n is the number of nodes before/above the element in the DOM)</p><p>If you\u2019d like to help improve the JRuby implementation, please review these issues and reach out to the maintainers:</p><p><a href=\"https://github.com/sparklemotion/nokogiri/issues/1223\">github.com/sparklemotion/nokogiri/issues/1223</a></p><p><a href=\"https://github.com/sparklemotion/nokogiri/pull/2177\">github.com/sparklemotion/nokogiri/pull/2177</a></p><p><a href=\"https://github.com/sparklemotion/nokogiri/issues/2380\">github.com/sparklemotion/nokogiri/issues/2380</a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-line"},{"title":"class Nokogiri::XML::Node#line=(num)","text":"<p>Sets the line for this <a href=\"Node.html\"><code>Node</code></a>. num must be less than 65535.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-line-3D"},{"title":"class Nokogiri::XML::Node#matches?(selector)","text":"<p>Returns true if this <a href=\"Node.html\"><code>Node</code></a> matches <code>selector</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-matches-3F"},{"title":"class Nokogiri::XML::Node#name","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-name"},{"title":"class Nokogiri::XML::Node#namespace() \u2192 Namespace","text":"<p>The <a href=\"Namespace.html\"><code>Namespace</code></a> of the element or attribute node, or <code>nil</code> if there is no namespace.</p><p><strong>Example:</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-namespace"},{"title":"class Nokogiri::XML::Node#namespace_definitions() \u2192 Array<Nokogiri::XML::Namespace>","text":"<p>Namespaces that are defined directly on this node, as an Array of <a href=\"Namespace.html\"><code>Namespace</code></a> objects. The array will be empty if no namespaces are defined on this node.</p><p><strong>Example:</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-namespace_definitions"},{"title":"class Nokogiri::XML::Node#namespace_scopes() \u2192 Array<Nokogiri::XML::Namespace>","text":"<p>Array of all the Namespaces on this node and its ancestors.</p><p>See also <a href=\"Node.html#method-i-namespaces\"><code>#namespaces</code></a></p><p><strong>Example:</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-namespace_scopes"},{"title":"class Nokogiri::XML::Node#namespaced_key?(attribute, namespace)","text":"<p>Returns true if <code>attribute</code> is set with <code>namespace</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-namespaced_key-3F"},{"title":"class Nokogiri::XML::Node#namespaces() \u2192 Hash<String(Namespace#prefix) \u21d2 String(Namespace#href)>","text":"<p>Fetch all the namespaces on this node and its ancestors.</p><p>Note that the keys in this hash <a href=\"../XML.html\"><code>XML</code></a> attributes that would be used to define this namespace, such as \u201cxmlns:prefix\u201d, not just the prefix.</p><p>The default namespace for this node will be included with key \u201cxmlns\u201d.</p><p>See also <a href=\"Node.html#method-i-namespace_scopes\"><code>#namespace_scopes</code></a></p><p>Hash containing all the namespaces on this node and its ancestors. The hash keys are the namespace prefix, and the hash value for each key is the namespace URI.</p><p><strong>Example:</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-namespaces"},{"title":"class Nokogiri::XML::Node#native_content=(input)","text":"<p>Set the content of this node to <code>input</code>.</p><p><code>input</code> (String) The new content for this node.</p><p>\u26a0 This method behaves differently depending on the node type. For <a href=\"Text.html\"><code>Text</code></a>, <a href=\"CDATA.html\"><code>CDATA</code></a>, <a href=\"Comment.html\"><code>Comment</code></a>, and <a href=\"ProcessingInstruction.html\"><code>ProcessingInstruction</code></a> nodes, it treats the input as raw content, which means that the final DOM will contain the entity-escaped version of the input (see example below). For <a href=\"Element.html\"><code>Element</code></a> and <a href=\"Attr.html\"><code>Attr</code></a> nodes, it treats the input as parsed content and expects it to be valid markup that is already entity-escaped.</p><p>\ud83d\udca1 Use <a href=\"Node.html#method-i-content-3D\"><code>Node#content=</code></a> for a more consistent API across node types.</p><p>Note the behavior differences of this method between <a href=\"Text.html\"><code>Text</code></a> and <a href=\"Element.html\"><code>Element</code></a> nodes:</p><p>See also: <a href=\"Node.html#method-i-content-3D\"><code>#content=</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-native_content-3D"},{"title":"class Nokogiri::XML::Node#next_element","text":"<p>Returns the next <a href=\"Element.html\"><code>Nokogiri::XML::Element</code></a> type sibling node.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-next_element"},{"title":"class Nokogiri::XML::Node#next_sibling","text":"<p>Returns the next sibling node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-next_sibling"},{"title":"class Nokogiri::XML::Node#name","text":"<p>Returns the name for this <a href=\"Node.html\"><code>Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-node_name"},{"title":"class Nokogiri::XML::Node#node_name=","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-node_name-3D"},{"title":"class Nokogiri::XML::Node#node_type","text":"<p>Get the type for this <a href=\"Node.html\"><code>Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-node_type"},{"title":"class Nokogiri::XML::Node#parent","text":"<p>Get the parent <a href=\"Node.html\"><code>Node</code></a> for this <a href=\"Node.html\"><code>Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-parent"},{"title":"class Nokogiri::XML::Node#parse(string_or_io, options = nil) { |options| ... }","text":"<p>Parse <code>string_or_io</code> as a document fragment within the context of <strong>this</strong> node.  Returns a <a href=\"NodeSet.html\"><code>XML::NodeSet</code></a> containing the nodes parsed from <code>string_or_io</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-parse"},{"title":"class Nokogiri::XML::Node#path","text":"<p>Returns the path associated with this <a href=\"Node.html\"><code>Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-path"},{"title":"class Nokogiri::XML::Node#pointer_id() \u2192 Integer","text":"<p>A unique id for this node based on the internal memory structures. This method is used by <a href=\"Node.html#method-i-3D-3D\"><code>#==</code></a> to determine node identity.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-pointer_id"},{"title":"class Nokogiri::XML::Node#previous_element","text":"<p>Returns the previous <a href=\"Element.html\"><code>Nokogiri::XML::Element</code></a> type sibling node.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-previous_element"},{"title":"class Nokogiri::XML::Node#previous_sibling","text":"<p>Returns the previous sibling node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-previous_sibling"},{"title":"class Nokogiri::XML::Node#processing_instruction?()","text":"<p>Returns true if this is a <a href=\"ProcessingInstruction.html\"><code>ProcessingInstruction</code></a> node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-processing_instruction-3F"},{"title":"class Nokogiri::XML::Node#read_only?()","text":"<p>Is this a read only node?</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-read_only-3F"},{"title":"class Nokogiri::XML::Node#related_class(class_name) \u2192 Class","text":"<p>Find a class constant within the</p><p>Some examples:</p><p>Note this will also work for subclasses that follow the same convention, e.g.:</p><p>And even if it\u2019s a subclass, this will iterate through the superclasses:</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-related_class"},{"title":"class Nokogiri::XML::Node#text() \u2192 String","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-text"},{"title":"class Nokogiri::XML::Node#text?()","text":"<p>Returns true if this is a <a href=\"Text.html\"><code>Text</code></a> node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-text-3F"},{"title":"class Nokogiri::XML::Node#to_s()","text":"<p>Turn this node in to a string.  If the document is <a href=\"../HTML4.html\"><code>HTML</code></a>, this method returns html.  If the document is <a href=\"../XML.html\"><code>XML</code></a>, this method returns <a href=\"../XML.html\"><code>XML</code></a>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-to_s"},{"title":"class Nokogiri::XML::Node#to_str() \u2192 String","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-to_str"},{"title":"class Nokogiri::XML::Node#traverse() { |self| ... }","text":"<p>Yields self and all children to <code>block</code> recursively.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-traverse"},{"title":"class Nokogiri::XML::Node#node_type","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-type"},{"title":"class Nokogiri::XML::Node#unlink() \u2192 self","text":"<p>Unlink this node from its current context.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-unlink"},{"title":"class Nokogiri::XML::Node#xml?()","text":"<p>Returns true if this is an <a href=\"Document.html\"><code>XML::Document</code></a> node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-xml-3F"},{"title":"class Nokogiri::XML::Node#coerce(data)","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-coerce"},{"title":"class Nokogiri::XML::Node#<<(node_or_tags)","text":"<p>Add <code>node_or_tags</code> as a child of this <a href=\"Node.html\"><code>Node</code></a>.</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns <code>self</code>, to support chaining of calls (e.g., root &lt;&lt; child1 &lt;&lt; child2)</p><p>Also see related method <code>add_child</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-3C-3C"},{"title":"class Nokogiri::XML::Node#add_child(node_or_tags)","text":"<p>Add <code>node_or_tags</code> as a child of this <a href=\"Node.html\"><code>Node</code></a>.</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"Node.html\"><code>Node</code></a>), or <a href=\"NodeSet.html\"><code>NodeSet</code></a> (if <code>node_or_tags</code> is a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a>, <a href=\"NodeSet.html\"><code>NodeSet</code></a>, or String).</p><p>Also see related method +&lt;&lt;+.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-add_child"},{"title":"class Nokogiri::XML::Node#add_namespace(prefix, href) \u2192 Nokogiri::XML::Namespace","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-add_namespace"},{"title":"class Nokogiri::XML::Node#add_namespace_definition(prefix, href) \u2192 Nokogiri::XML::Namespace","text":"<p>Adds a namespace definition to this node with <code>prefix</code> using <code>href</code> value, as if this node had included an attribute \u201cxmlns:prefix=href\u201d.</p><p>A default namespace definition for this node can be added by passing <code>nil</code> for <code>prefix</code>.</p><p><code>prefix</code> (String, <code>nil</code>) An <a href=\"https://www.w3.org/TR/xml-names/#ns-decl\">XML Name</a></p><p><code>href</code> (String) The <a href=\"https://www.w3.org/TR/xml-names/#sec-namespaces\">URI reference</a></p><p>The new <a href=\"Namespace.html\"><code>Nokogiri::XML::Namespace</code></a></p><p><strong>Example:</strong> adding a non-default namespace definition</p><p><strong>Example:</strong> adding a default namespace definition</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-add_namespace_definition"},{"title":"class Nokogiri::XML::Node#add_next_sibling(node_or_tags)","text":"<p>Insert <code>node_or_tags</code> after this <a href=\"Node.html\"><code>Node</code></a> (as a sibling).</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"Node.html\"><code>Node</code></a>), or <a href=\"NodeSet.html\"><code>NodeSet</code></a> (if <code>node_or_tags</code> is a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a>, <a href=\"NodeSet.html\"><code>NodeSet</code></a>, or String).</p><p>Also see related method <code>after</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-add_next_sibling"},{"title":"class Nokogiri::XML::Node#add_previous_sibling(node_or_tags)","text":"<p>Insert <code>node_or_tags</code> before this <a href=\"Node.html\"><code>Node</code></a> (as a sibling).</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"Node.html\"><code>Node</code></a>), or <a href=\"NodeSet.html\"><code>NodeSet</code></a> (if <code>node_or_tags</code> is a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a>, <a href=\"NodeSet.html\"><code>NodeSet</code></a>, or String).</p><p>Also see related method <code>before</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-add_previous_sibling"},{"title":"class Nokogiri::XML::Node#after(node_or_tags)","text":"<p>Insert <code>node_or_tags</code> after this node (as a sibling).</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a <a href=\"DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a>, or a String containing markup.</p><p>Returns <code>self</code>, to support chaining of calls.</p><p>Also see related method <code>add_next_sibling</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-after"},{"title":"class Nokogiri::XML::Node#before(node_or_tags)","text":"<p>Insert <code>node_or_tags</code> before this node (as a sibling).</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns <code>self</code>, to support chaining of calls.</p><p>Also see related method <code>add_previous_sibling</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-before"},{"title":"class Nokogiri::XML::Node#children=(node_or_tags)","text":"<p>Set the content for this <a href=\"Node.html\"><code>Node</code></a> <code>node_or_tags</code></p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a <a href=\"DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a>, or a String containing markup.</p><p>Also see related method <code>inner_html=</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-children-3D"},{"title":"class Nokogiri::XML::Node#content=(input)","text":"<p>Set the content of this node to <code>input</code>.</p><p><code>input</code> (String) The new content for this node. Input is considered to be raw content, and so will be entity-escaped in the final DOM string.</p><p>Note how entities are handled:</p><p>For content that is already entity-escaped, use CGI::unescapeHTML to decode it:</p><p>See also: <a href=\"Node.html#method-i-native_content-3D\"><code>#native_content=</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-content-3D"},{"title":"class Nokogiri::XML::Node#default_namespace=(url)","text":"<p>Adds a default namespace supplied as a string <code>url</code> href, to self. The consequence is as an xmlns attribute with supplied argument were present in parsed <a href=\"../XML.html\"><code>XML</code></a>.  A default namespace set with this method will now show up in <a href=\"Node.html#method-i-attributes\"><code>#attributes</code></a>, but when this node is serialized to <a href=\"../XML.html\"><code>XML</code></a> an \u201cxmlns\u201d attribute will appear. See also <a href=\"Node.html#method-i-namespace\"><code>#namespace</code></a> and <a href=\"Node.html#method-i-namespace-3D\"><code>#namespace=</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-default_namespace-3D"},{"title":"class Nokogiri::XML::Node#do_xinclude(options = XML::ParseOptions::DEFAULT_XML) { |options| ... }","text":"<p>Do xinclude substitution on the subtree below node. If given a block, a <a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a> object initialized from <code>options</code>, will be passed to it, allowing more convenient modification of the parser options.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-do_xinclude"},{"title":"class Nokogiri::XML::Node#inner_html=(node_or_tags)","text":"<p>Set the content for this <a href=\"Node.html\"><code>Node</code></a> to <code>node_or_tags</code>.</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a <a href=\"DocumentFragment.html\"><code>Nokogiri::XML::DocumentFragment</code></a>, or a String containing markup.</p><p>\u26a0 Please note that despite the name, this method will <strong>not</strong> always parse a String argument as <a href=\"../HTML4.html\"><code>HTML</code></a>. A String argument will be parsed with the <code>DocumentFragment</code> parser related to this node\u2019s document.</p><p>For example, if the document is an <a href=\"../HTML4/Document.html\"><code>HTML4::Document</code></a> then the string will be parsed as <a href=\"../HTML4.html\"><code>HTML4</code></a> using <a href=\"../HTML4/DocumentFragment.html\"><code>HTML4::DocumentFragment</code></a>; but if the document is an <a href=\"Document.html\"><code>XML::Document</code></a> then it will parse the string as <a href=\"../XML.html\"><code>XML</code></a> using <a href=\"DocumentFragment.html\"><code>XML::DocumentFragment</code></a>.</p><p>Also see related method <code>children=</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-inner_html-3D"},{"title":"class Nokogiri::XML::Node#name=(new_name)","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-name-3D"},{"title":"class Nokogiri::XML::Node#namespace=(ns)","text":"<p>Set the default namespace on this node (as would be defined with an \u201cxmlns=\u201d attribute in <a href=\"../XML.html\"><code>XML</code></a> source), as a <a href=\"Namespace.html\"><code>Namespace</code></a> object <code>ns</code>. Note that a <a href=\"Namespace.html\"><code>Namespace</code></a> added this way will NOT be serialized as an xmlns attribute for this node. You probably want <a href=\"Node.html#method-i-default_namespace-3D\"><code>#default_namespace=</code></a> instead, or perhaps <a href=\"Node.html#method-i-add_namespace_definition\"><code>#add_namespace_definition</code></a> with a nil prefix argument.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-namespace-3D"},{"title":"class Nokogiri::XML::Node#next_sibling","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-next"},{"title":"class Nokogiri::XML::Node#next=(node_or_tags)","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-next-3D"},{"title":"class Nokogiri::XML::Node#parent=(parent_node)","text":"<p>Set the parent <a href=\"Node.html\"><code>Node</code></a> for this <a href=\"Node.html\"><code>Node</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-parent-3D"},{"title":"class Nokogiri::XML::Node#prepend_child(node_or_tags)","text":"<p>Add <code>node_or_tags</code> as the first child of this <a href=\"Node.html\"><code>Node</code></a>.</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"Node.html\"><code>Node</code></a>), or <a href=\"NodeSet.html\"><code>NodeSet</code></a> (if <code>node_or_tags</code> is a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a>, <a href=\"NodeSet.html\"><code>NodeSet</code></a>, or String).</p><p>Also see related method <code>add_child</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-prepend_child"},{"title":"class Nokogiri::XML::Node#previous_sibling","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-previous"},{"title":"class Nokogiri::XML::Node#previous=(node_or_tags)","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-previous-3D"},{"title":"class Nokogiri::XML::Node#remove","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-remove"},{"title":"class Nokogiri::XML::Node#replace(node_or_tags)","text":"<p>Replace this <a href=\"Node.html\"><code>Node</code></a> with <code>node_or_tags</code>.</p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String containing markup.</p><p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"Node.html\"><code>Node</code></a>), or <a href=\"NodeSet.html\"><code>NodeSet</code></a> (if <code>node_or_tags</code> is a <a href=\"DocumentFragment.html\"><code>DocumentFragment</code></a>, <a href=\"NodeSet.html\"><code>NodeSet</code></a>, or String).</p><p>Also see related method <code>swap</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-replace"},{"title":"class Nokogiri::XML::Node#swap(node_or_tags)","text":"<p>Swap this <a href=\"Node.html\"><code>Node</code></a> for <code>node_or_tags</code></p><p><code>node_or_tags</code> can be a <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>, a ::DocumentFragment, a ::NodeSet, or a String Containing markup.</p><p>Returns self, to support chaining of calls.</p><p>Also see related method <code>replace</code>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-swap"},{"title":"class Nokogiri::XML::Node#wrap(markup) \u2192 self","text":"<p>Wrap this <a href=\"Node.html\"><code>Node</code></a> with the node parsed from <code>markup</code> or a dup of the <code>node</code>.</p><p><strong>markup</strong> (String) Markup that is parsed and used as the wrapper. This node\u2019s parent, if it exists, is used as the context node for parsing; otherwise the associated document is used. If the parsed fragment has multiple roots, the first root node is used as the wrapper.</p><p><strong>node</strong> (<a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>) An element that is \u2018#dup`ed and used as the wrapper.</p><p><code>self</code>, to support chaining.</p><p>Also see <a href=\"NodeSet.html#method-i-wrap\"><code>NodeSet#wrap</code></a></p><p><strong>Example</strong> with a <code>String</code> argument:</p><p><strong>Example</strong> with a <code>Node</code> argument:</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-wrap"},{"title":"class Nokogiri::XML::Node#%","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-25"},{"title":"class Nokogiri::XML::Node#/","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-2F"},{"title":"class Nokogiri::XML::Node#>(selector) \u2192 NodeSet","text":"<p>Search this node\u2019s immediate children using <a href=\"../CSS.html\"><code>CSS</code></a> selector <code>selector</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-3E"},{"title":"class Nokogiri::XML::Node#at(*paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class])","text":"<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries.</p><p>See <a href=\"Searchable.html#method-i-search\"><code>Searchable#search</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-at"},{"title":"class Nokogiri::XML::Node#at_css(*rules, [namespace-bindings, custom-pseudo-class])","text":"<p>Search this object for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>, and return only the first match. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors.</p><p>See <a href=\"Searchable.html#method-i-css\"><code>Searchable#css</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-at_css"},{"title":"class Nokogiri::XML::Node#at_xpath(*paths, [namespace-bindings, variable-bindings, custom-handler-class])","text":"<p>Search this node for <a href=\"XPath.html\"><code>XPath</code></a> <code>paths</code>, and return only the first match. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>See <a href=\"Searchable.html#method-i-xpath\"><code>Searchable#xpath</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-at_xpath"},{"title":"class Nokogiri::XML::Node#css(*rules, [namespace-bindings, custom-pseudo-class])","text":"<p>Search this object for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors. For example:</p><p>A hash of namespace bindings may be appended. For example:</p><p>\ud83d\udca1 Custom <a href=\"../CSS.html\"><code>CSS</code></a> pseudo classes may also be defined which are mapped to a custom <a href=\"XPath.html\"><code>XPath</code></a> function.  To define custom pseudo classes, create a class and implement the custom pseudo class you want defined. The first argument to the method will be the matching context <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. For example:</p><p>\ud83d\udca1 Some <a href=\"XPath.html\"><code>XPath</code></a> syntax is supported in <a href=\"../CSS.html\"><code>CSS</code></a> queries. For example, to query for an attribute:</p><p>\ud83d\udca1 Array-like syntax is supported in <a href=\"../CSS.html\"><code>CSS</code></a> queries as an alternative to using +:nth-child()+.</p><p>\u26a0 NOTE that indices are 1-based like <code>:nth-child</code> and not 0-based like Ruby Arrays. For example:</p><p>\u26a0 NOTE that the <a href=\"../CSS.html\"><code>CSS</code></a> query string is case-sensitive with regards to your document type. <a href=\"../HTML4.html\"><code>HTML</code></a> tags will match only lowercase <a href=\"../CSS.html\"><code>CSS</code></a> queries, so if you search for \u201cH1\u201d in an <a href=\"../HTML4.html\"><code>HTML</code></a> document, you\u2019ll never find anything. However, \u201cH1\u201d might be found in an <a href=\"../XML.html\"><code>XML</code></a> document, where tags names are case-sensitive (e.g., \u201cH1\u201d is distinct from \u201ch1\u201d).</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-css"},{"title":"class Nokogiri::XML::Node#search(*paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class])","text":"<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries:</p><p>A hash of namespace bindings may be appended:</p><p>For <a href=\"XPath.html\"><code>XPath</code></a> queries, a hash of variable bindings may also be appended to the namespace bindings. For example:</p><p>\ud83d\udca1 Custom <a href=\"XPath.html\"><code>XPath</code></a> functions and <a href=\"../CSS.html\"><code>CSS</code></a> pseudo-selectors may also be defined. To define custom functions create a class and implement the function you want to define, which will be in the \u2018nokogiri` namespace in <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>The first argument to the method will be the current matching <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. Note that this class may appear anywhere in the argument list. For example:</p><p>See <a href=\"Searchable.html#method-i-xpath\"><code>Searchable#xpath</code></a> and <a href=\"Searchable.html#method-i-css\"><code>Searchable#css</code></a> for further usage help.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-search"},{"title":"class Nokogiri::XML::Node#xpath(*paths, [namespace-bindings, variable-bindings, custom-handler-class])","text":"<p>Search this node for <a href=\"XPath.html\"><code>XPath</code></a> <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>A hash of namespace bindings may be appended. For example:</p><p>A hash of variable bindings may also be appended to the namespace bindings. For example:</p><p>\ud83d\udca1 Custom <a href=\"XPath.html\"><code>XPath</code></a> functions may also be defined. To define custom functions create a class and implement the function you want to define, which will be in the \u2018nokogiri` namespace.</p><p>The first argument to the method will be the current matching <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. Note that this class may appear anywhere in the argument list. For example:</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-xpath"},{"title":"class Nokogiri::XML::Node#canonicalize(mode = XML::XML_C14N_1_0, inclusive_namespaces = nil, with_comments = false)","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-canonicalize"},{"title":"class Nokogiri::XML::Node#deconstruct_keys(array_of_names) \u2192 Hash","text":"<p>Returns a hash describing the <a href=\"Node.html\"><code>Node</code></a>, to use in pattern matching.</p><p>Valid keys and their values:</p><p><code>name</code> \u2192 (String) The name of this node, or \u201ctext\u201d if it is a <a href=\"Text.html\"><code>Text</code></a> node.</p><p><code>namespace</code> \u2192 (<a href=\"Namespace.html\"><code>Namespace</code></a>, nil) The namespace of this node, or nil if there is no namespace.</p><p><code>attributes</code> \u2192 (Array&lt;Attr&gt;) The attributes of this node.</p><p><code>children</code> \u2192 (Array&lt;Node&gt;) The children of this node. \ud83d\udca1 Note this includes text nodes.</p><p><code>elements</code> \u2192 (Array&lt;Node&gt;) The child elements of this node. \ud83d\udca1 Note this does not include text nodes.</p><p><code>content</code> \u2192 (String) The contents of all the text nodes in this node\u2019s subtree. See <a href=\"Node.html#method-i-content\"><code>#content</code></a>.</p><p><code>inner_html</code> \u2192 (String) The inner markup for the children of this node. See <a href=\"Node.html#method-i-inner_html\"><code>#inner_html</code></a>.</p><p><strong>Example</strong></p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-deconstruct_keys"},{"title":"class Nokogiri::XML::Node#serialize(*args, &block)","text":"<p>Serialize <a href=\"Node.html\"><code>Node</code></a> using <code>options</code>. Save options can also be set using a block.</p><p>See also <a href=\"Node/SaveOptions.html\"><code>Nokogiri::XML::Node::SaveOptions</code></a> and <a href=\"Node.html#class-Nokogiri::XML::Node-label-Serialization+and+Generating+Output\">Serialization and Generating Output at <code>Node</code></a>.</p><p>These two statements are equivalent:</p><p>or</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-serialize"},{"title":"class Nokogiri::XML::Node#to_html(options = {})","text":"<p>Serialize this <a href=\"Node.html\"><code>Node</code></a> to <a href=\"../HTML4.html\"><code>HTML</code></a></p><p>See <a href=\"Node.html#method-i-write_to\"><code>Node#write_to</code></a> for a list of <code>options</code>.  For formatted output, use <a href=\"Node.html#method-i-to_xhtml\"><code>Node#to_xhtml</code></a> instead.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-to_html"},{"title":"class Nokogiri::XML::Node#to_xhtml(options = {})","text":"<p>Serialize this <a href=\"Node.html\"><code>Node</code></a> to XHTML using <code>options</code></p><p>See <a href=\"Node.html#method-i-write_to\"><code>Node#write_to</code></a> for a list of <code>options</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-to_xhtml"},{"title":"class Nokogiri::XML::Node#to_xml(options = {})","text":"<p>Serialize this <a href=\"Node.html\"><code>Node</code></a> to <a href=\"../XML.html\"><code>XML</code></a> using <code>options</code></p><p>See <a href=\"Node.html#method-i-write_to\"><code>Node#write_to</code></a> for a list of <code>options</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-to_xml"},{"title":"class Nokogiri::XML::Node#write_html_to(io, options = {})","text":"<p>Write <a href=\"Node.html\"><code>Node</code></a> as <a href=\"../HTML4.html\"><code>HTML</code></a> to <code>io</code> with <code>options</code></p><p>See <a href=\"Node.html#method-i-write_to\"><code>Node#write_to</code></a> for a list of <code>options</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-write_html_to"},{"title":"class Nokogiri::XML::Node#write_to(io, *options)","text":"<p>Serialize this node or document to <code>io</code>.</p><p><code>io</code> (IO) An IO-like object to which the serialized content will be written.</p><p><code>options</code> (Hash) See below</p><p><code>:encoding</code> (String or Encoding) specify the encoding of the output (defaults to document encoding)</p><p><code>:indent_text</code> (String) the indentation text (defaults to <code>\" \"</code>)</p><p><code>:indent</code> (Integer) the number of <code>:indent_text</code> to use (defaults to <code>2</code>)</p><p><code>:save_with</code> (Integer) a combination of <a href=\"Node/SaveOptions.html\"><code>SaveOptions</code></a> constants</p><p>To save with UTF-8 indented twice:</p><p>To save indented with two dashes:</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-write_to"},{"title":"class Nokogiri::XML::Node#write_xhtml_to(io, options = {})","text":"<p>Write <a href=\"Node.html\"><code>Node</code></a> as XHTML to <code>io</code> with <code>options</code></p><p>See <a href=\"Node.html#method-i-write_to\"><code>Node#write_to</code></a> for a list of <code>options</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-write_xhtml_to"},{"title":"class Nokogiri::XML::Node#write_xml_to(io, options = {})","text":"<p>Write <a href=\"Node.html\"><code>Node</code></a> as <a href=\"../XML.html\"><code>XML</code></a> to <code>io</code> with <code>options</code></p><p>See <a href=\"Node.html#method-i-write_to\"><code>Node#write_to</code></a> for a list of options</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-write_xml_to"},{"title":"class Nokogiri::XML::Node#child() \u2192 Nokogiri::XML::Node","text":"<p>First of this node\u2019s children, or <code>nil</code> if there are no children</p><p>This is a convenience method and is equivalent to:</p><p>See related: <a href=\"Node.html#method-i-children\"><code>#children</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-child"},{"title":"class Nokogiri::XML::Node#children() \u2192 Nokogiri::XML::NodeSet","text":"<p><a href=\"NodeSet.html\"><code>Nokogiri::XML::NodeSet</code></a> containing this node\u2019s children.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-children"},{"title":"class Nokogiri::XML::Node#document() \u2192 Nokogiri::XML::Document","text":"<p>Parent <a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a> for this node</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-document"},{"title":"class Nokogiri::XML::Node#[](name) \u2192 (String, nil)","text":"<p>Fetch an attribute from this node.</p><p>\u26a0 Note that attributes with namespaces cannot be accessed with this method. To access namespaced attributes, use <a href=\"Node.html#method-i-attribute_with_ns\"><code>#attribute_with_ns</code></a>.</p><p>(String, nil) value of the attribute <code>name</code>, or <code>nil</code> if no matching attribute exists</p><p><strong>Example</strong></p><p><strong>Example:</strong> Namespaced attributes will not be returned.</p><p>\u26a0 Note namespaced attributes may be accessed with <a href=\"Node.html#method-i-attribute\"><code>#attribute</code></a> or <a href=\"Node.html#method-i-attribute_with_ns\"><code>#attribute_with_ns</code></a></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-5B-5D"},{"title":"class Nokogiri::XML::Node#[]=(name, value) \u2192 value","text":"<p>Update the attribute <code>name</code> to <code>value</code>, or create the attribute if it does not exist.</p><p>\u26a0 Note that attributes with namespaces cannot be accessed with this method. To access namespaced attributes for update, use <a href=\"Node.html#method-i-attribute_with_ns\"><code>#attribute_with_ns</code></a>. To add a namespaced attribute, see the example below.</p><p><code>value</code></p><p><strong>Example</strong></p><p><strong>Example:</strong> Add a namespaced attribute.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-5B-5D-3D"},{"title":"class Nokogiri::XML::Node#add_class(names) \u2192 self","text":"<p>Ensure <a href=\"../HTML4.html\"><code>HTML</code></a> <a href=\"../CSS.html\"><code>CSS</code></a> classes are present on <code>self</code>. Any <a href=\"../CSS.html\"><code>CSS</code></a> classes in <code>names</code> that already exist in the \u201cclass\u201d attribute are <em>not</em> added. Note that any existing duplicates in the \u201cclass\u201d attribute are not removed. Compare with <a href=\"Node.html#method-i-append_class\"><code>#append_class</code></a>.</p><p>This is a convenience function and is equivalent to:</p><p>See related: <a href=\"Node.html#method-i-kwattr_add\"><code>#kwattr_add</code></a>, <a href=\"Node.html#method-i-classes\"><code>#classes</code></a>, <a href=\"Node.html#method-i-append_class\"><code>#append_class</code></a>, <a href=\"Node.html#method-i-remove_class\"><code>#remove_class</code></a></p><p><code>names</code> (String, Array&lt;String&gt;)</p><p><a href=\"../CSS.html\"><code>CSS</code></a> class names to be added to the Node\u2019s \u201cclass\u201d attribute. May be a string containing whitespace-delimited names, or an Array of String names. Any class names already present will not be added. Any class names not present will be added. If no \u201cclass\u201d attribute exists, one is created.</p><p><code>self</code> (<a href=\"Node.html\"><code>Node</code></a>) for ease of chaining method calls.</p><p><strong>Example:</strong> Ensure that the node has <a href=\"../CSS.html\"><code>CSS</code></a> class \u201csection\u201d</p><p><strong>Example:</strong> Ensure that the node has <a href=\"../CSS.html\"><code>CSS</code></a> classes \u201csection\u201d and \u201cheader\u201d, via a String argument</p><p>Note that the <a href=\"../CSS.html\"><code>CSS</code></a> class \u201csection\u201d is not added because it is already present. Note also that the pre-existing duplicate <a href=\"../CSS.html\"><code>CSS</code></a> class \u201csection\u201d is not removed.</p><p><strong>Example:</strong> Ensure that the node has <a href=\"../CSS.html\"><code>CSS</code></a> classes \u201csection\u201d and \u201cheader\u201d, via an Array argument</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-add_class"},{"title":"class Nokogiri::XML::Node#append_class(names) \u2192 self","text":"<p>Add <a href=\"../HTML4.html\"><code>HTML</code></a> <a href=\"../CSS.html\"><code>CSS</code></a> classes to <code>self</code>, regardless of duplication. Compare with <a href=\"Node.html#method-i-add_class\"><code>#add_class</code></a>.</p><p>This is a convenience function and is equivalent to:</p><p>See related: <a href=\"Node.html#method-i-kwattr_append\"><code>#kwattr_append</code></a>, <a href=\"Node.html#method-i-classes\"><code>#classes</code></a>, <a href=\"Node.html#method-i-add_class\"><code>#add_class</code></a>, <a href=\"Node.html#method-i-remove_class\"><code>#remove_class</code></a></p><p><code>names</code> (String, Array&lt;String&gt;)</p><p><a href=\"../CSS.html\"><code>CSS</code></a> class names to be appended to the Node\u2019s \u201cclass\u201d attribute. May be a string containing whitespace-delimited names, or an Array of String names. All class names passed in will be appended to the \u201cclass\u201d attribute even if they are already present in the attribute value. If no \u201cclass\u201d attribute exists, one is created.</p><p><code>self</code> (<a href=\"Node.html\"><code>Node</code></a>) for ease of chaining method calls.</p><p><strong>Example:</strong> Append \u201csection\u201d to the node\u2019s <a href=\"../CSS.html\"><code>CSS</code></a> \u201cclass\u201d attribute</p><p><strong>Example:</strong> Append \u201csection\u201d and \u201cheader\u201d to the noded\u2019s <a href=\"../CSS.html\"><code>CSS</code></a> \u201cclass\u201d attribute, via a String argument</p><p>Note that the <a href=\"../CSS.html\"><code>CSS</code></a> class \u201csection\u201d is appended even though it is already present</p><p><strong>Example:</strong> Append \u201csection\u201d and \u201cheader\u201d to the node\u2019s <a href=\"../CSS.html\"><code>CSS</code></a> \u201cclass\u201d attribute, via an Array argument</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-append_class"},{"title":"class Nokogiri::XML::Node#attr","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-attr"},{"title":"class Nokogiri::XML::Node#attribute(name) \u2192 Nokogiri::XML::Attr","text":"<p>Attribute (<a href=\"Attr.html\"><code>Nokogiri::XML::Attr</code></a>) belonging to this node with name <code>name</code>.</p><p>\u26a0 Note that attribute namespaces are ignored and only the simple (non-namespace-prefixed) name is used to find a matching attribute. In case of a simple name collision, only one of the matching attributes will be returned. In this case, you will need to use <a href=\"Node.html#method-i-attribute_with_ns\"><code>#attribute_with_ns</code></a>.</p><p><strong>Example:</strong></p><p><strong>Example</strong> showing that namespaced attributes will not be returned:</p><p>\u26a0 Note that only one of the two matching attributes is returned.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-attribute"},{"title":"class Nokogiri::XML::Node#attribute_nodes() \u2192 Array<Nokogiri::XML::Attr>","text":"<p>Attributes (an Array of <a href=\"Attr.html\"><code>Nokogiri::XML::Attr</code></a>) belonging to this node.</p><p>Note that this is the preferred alternative to <a href=\"Node.html#method-i-attributes\"><code>#attributes</code></a> when the simple (non-namespace-prefixed) attribute names may collide.</p><p><strong>Example:</strong></p><p>Contrast this with the colliding-name example from <a href=\"Node.html#method-i-attributes\"><code>#attributes</code></a>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-attribute_nodes"},{"title":"class Nokogiri::XML::Node#attribute_with_ns(name, namespace) \u2192 Nokogiri::XML::Attr","text":"<p>Attribute (<a href=\"Attr.html\"><code>Nokogiri::XML::Attr</code></a>) belonging to this node with matching <code>name</code> and <code>namespace</code>.</p><p><code>name</code> (String): the simple (non-namespace-prefixed) name of the attribute</p><p><code>namespace</code> (String): the URI of the attribute\u2019s namespace</p><p>See related: <a href=\"Node.html#method-i-attribute\"><code>#attribute</code></a></p><p><strong>Example:</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-attribute_with_ns"},{"title":"class Nokogiri::XML::Node#attributes() \u2192 Hash<String \u21d2 Nokogiri::XML::Attr>","text":"<p>Fetch this node\u2019s attributes.</p><p>\u26a0 Because the keys do not include any namespace information for the attribute, in case of a simple name collision, not all attributes will be returned. In this case, you will need to use <a href=\"Node.html#method-i-attribute_nodes\"><code>#attribute_nodes</code></a>.</p><p>Hash containing attributes belonging to <code>self</code>. The hash keys are String attribute names (without the namespace), and the hash values are <a href=\"Attr.html\"><code>Nokogiri::XML::Attr</code></a>.</p><p><strong>Example</strong> with no namespaces:</p><p><strong>Example</strong> with a namespace:</p><p><strong>Example</strong> with an attribute name collision:</p><p>\u26a0 Note that only one of the attributes is returned in the Hash.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-attributes"},{"title":"class Nokogiri::XML::Node#classes() \u2192 Array<String>","text":"<p>Fetch <a href=\"../CSS.html\"><code>CSS</code></a> class names of a <a href=\"Node.html\"><code>Node</code></a>.</p><p>This is a convenience function and is equivalent to:</p><p>See related: <a href=\"Node.html#method-i-kwattr_values\"><code>#kwattr_values</code></a>, <a href=\"Node.html#method-i-add_class\"><code>#add_class</code></a>, <a href=\"Node.html#method-i-append_class\"><code>#append_class</code></a>, <a href=\"Node.html#method-i-remove_class\"><code>#remove_class</code></a></p><p>The <a href=\"../CSS.html\"><code>CSS</code></a> classes (Array of String) present in the Node\u2019s \u201cclass\u201d attribute. If the attribute is empty or non-existent, the return value is an empty array.</p><p><strong>Example</strong></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-classes"},{"title":"class Nokogiri::XML::Node#delete(name)","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-delete"},{"title":"class Nokogiri::XML::Node#each() { |node_name, value| ... }","text":"<p>Iterate over each attribute name and value pair for this <a href=\"Node.html\"><code>Node</code></a>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-each"},{"title":"class Nokogiri::XML::Node#get_attribute","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-get_attribute"},{"title":"class Nokogiri::XML::Node#has_attribute?","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-has_attribute-3F"},{"title":"class Nokogiri::XML::Node#keys()","text":"<p>Get the attribute names for this <a href=\"Node.html\"><code>Node</code></a>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-keys"},{"title":"class Nokogiri::XML::Node#kwattr_add(attribute_name, keywords) \u2192 self","text":"<p>Ensure that values are present in a keyword attribute.</p><p>Any values in <code>keywords</code> that already exist in the Node\u2019s attribute values are <em>not</em> added. Note that any existing duplicates in the attribute values are not removed. Compare with <a href=\"Node.html#method-i-kwattr_append\"><code>#kwattr_append</code></a>.</p><p>A \u201ckeyword attribute\u201d is a node attribute that contains a set of space-delimited values. Perhaps the most familiar example of this is the <a href=\"../HTML4.html\"><code>HTML</code></a> \u201cclass\u201d attribute used to contain <a href=\"../CSS.html\"><code>CSS</code></a> classes. But other keyword attributes exist, for instance <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\">the \u201crel\u201d attribute</a>.</p><p>See also <a href=\"Node.html#method-i-add_class\"><code>#add_class</code></a>, <a href=\"Node.html#method-i-kwattr_values\"><code>#kwattr_values</code></a>, <a href=\"Node.html#method-i-kwattr_append\"><code>#kwattr_append</code></a>, <a href=\"Node.html#method-i-kwattr_remove\"><code>#kwattr_remove</code></a></p><p><code>attribute_name</code> (String) The name of the keyword attribute to be modified.</p><p><code>keywords</code> (String, Array&lt;String&gt;) Keywords to be added to the attribute named <code>attribute_name</code>. May be a string containing whitespace-delimited values, or an Array of String values. Any values already present will not be added. Any values not present will be added. If the named attribute does not exist, it is created.</p><p><code>self</code> (<a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>) for ease of chaining method calls.</p><p><strong>Example:</strong> Ensure that a <code>Node</code> has \u201cnofollow\u201d in its <code>rel</code> attribute.</p><p>Note that duplicates are not added.</p><p><strong>Example:</strong> Ensure that a <code>Node</code> has \u201cnofollow\u201d and \u201cnoreferrer\u201d in its <code>rel</code> attribute, via a String argument.</p><p><strong>Example:</strong> Ensure that a <code>Node</code> has \u201cnofollow\u201d and \u201cnoreferrer\u201d in its <code>rel</code> attribute, via an Array argument.</p><p>Since v1.11.0</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-kwattr_add"},{"title":"class Nokogiri::XML::Node#kwattr_append(attribute_name, keywords) \u2192 self","text":"<p>Add keywords to a Node\u2019s keyword attribute, regardless of duplication. Compare with <a href=\"Node.html#method-i-kwattr_add\"><code>#kwattr_add</code></a>.</p><p>A \u201ckeyword attribute\u201d is a node attribute that contains a set of space-delimited values. Perhaps the most familiar example of this is the <a href=\"../HTML4.html\"><code>HTML</code></a> \u201cclass\u201d attribute used to contain <a href=\"../CSS.html\"><code>CSS</code></a> classes. But other keyword attributes exist, for instance <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\">the \u201crel\u201d attribute</a>.</p><p>See also <a href=\"Node.html#method-i-append_class\"><code>#append_class</code></a>, <a href=\"Node.html#method-i-kwattr_values\"><code>#kwattr_values</code></a>, <a href=\"Node.html#method-i-kwattr_add\"><code>#kwattr_add</code></a>, <a href=\"Node.html#method-i-kwattr_remove\"><code>#kwattr_remove</code></a></p><p><code>attribute_name</code> (String) The name of the keyword attribute to be modified.</p><p><code>keywords</code> (String, Array&lt;String&gt;) Keywords to be added to the attribute named <code>attribute_name</code>. May be a string containing whitespace-delimited values, or an Array of String values. All values passed in will be appended to the named attribute even if they are already present in the attribute. If the named attribute does not exist, it is created.</p><p><code>self</code> (<a href=\"Node.html\"><code>Node</code></a>) for ease of chaining method calls.</p><p><strong>Example:</strong> Append \u201cnofollow\u201d to the <code>rel</code> attribute.</p><p>Note that duplicates are added.</p><p><strong>Example:</strong> Append \u201cnofollow\u201d and \u201cnoreferrer\u201d to the <code>rel</code> attribute, via a String argument.</p><p>Note that \u201cnofollow\u201d is appended even though it is already present.</p><p><strong>Example:</strong> Append \u201cnofollow\u201d and \u201cnoreferrer\u201d to the <code>rel</code> attribute, via an Array argument.</p><p>Since v1.11.0</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-kwattr_append"},{"title":"class Nokogiri::XML::Node#kwattr_remove(attribute_name, keywords) \u2192 self","text":"<p>Remove keywords from a keyword attribute. Any matching keywords that exist in the named attribute are removed, including any multiple entries.</p><p>If no keywords remain after this operation, or if <code>keywords</code> is <code>nil</code>, the attribute is deleted from the node.</p><p>A \u201ckeyword attribute\u201d is a node attribute that contains a set of space-delimited values. Perhaps the most familiar example of this is the <a href=\"../HTML4.html\"><code>HTML</code></a> \u201cclass\u201d attribute used to contain <a href=\"../CSS.html\"><code>CSS</code></a> classes. But other keyword attributes exist, for instance <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\">the \u201crel\u201d attribute</a>.</p><p>See also <a href=\"Node.html#method-i-remove_class\"><code>#remove_class</code></a>, <a href=\"Node.html#method-i-kwattr_values\"><code>#kwattr_values</code></a>, <a href=\"Node.html#method-i-kwattr_add\"><code>#kwattr_add</code></a>, <a href=\"Node.html#method-i-kwattr_append\"><code>#kwattr_append</code></a></p><p><code>attribute_name</code> (String) The name of the keyword attribute to be modified.</p><p><code>keywords</code> (String, Array&lt;String&gt;) Keywords to be removed from the attribute named <code>attribute_name</code>. May be a string containing whitespace-delimited values, or an Array of String values. Any keywords present in the named attribute will be removed. If no keywords remain, or if <code>keywords</code> is nil, the attribute is deleted.</p><p><code>self</code> (<a href=\"Node.html\"><code>Node</code></a>) for ease of chaining method calls.</p><p><strong>Example:</strong></p><p>Note that the <code>rel</code> attribute is deleted when empty.</p><p>Since v1.11.0</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-kwattr_remove"},{"title":"class Nokogiri::XML::Node#kwattr_values(attribute_name) \u2192 Array<String>","text":"<p>Fetch values from a keyword attribute of a <a href=\"Node.html\"><code>Node</code></a>.</p><p>A \u201ckeyword attribute\u201d is a node attribute that contains a set of space-delimited values. Perhaps the most familiar example of this is the <a href=\"../HTML4.html\"><code>HTML</code></a> \u201cclass\u201d attribute used to contain <a href=\"../CSS.html\"><code>CSS</code></a> classes. But other keyword attributes exist, for instance <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\">the \u201crel\u201d attribute</a>.</p><p>See also <a href=\"Node.html#method-i-classes\"><code>#classes</code></a>, <a href=\"Node.html#method-i-kwattr_add\"><code>#kwattr_add</code></a>, <a href=\"Node.html#method-i-kwattr_append\"><code>#kwattr_append</code></a>, <a href=\"Node.html#method-i-kwattr_remove\"><code>#kwattr_remove</code></a></p><p><code>attribute_name</code> (String) The name of the keyword attribute to be inspected.</p><p>(Array&lt;String&gt;) The values present in the Node\u2019s <code>attribute_name</code> attribute. If the attribute is empty or non-existent, the return value is an empty array.</p><p><strong>Example:</strong></p><p>Since v1.11.0</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-kwattr_values"},{"title":"class Nokogiri::XML::Node#remove_attribute(name)","text":"<p>Remove the attribute named <code>name</code></p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-remove_attribute"},{"title":"class Nokogiri::XML::Node#remove_class(css_classes) \u2192 self","text":"<p>Remove <a href=\"../HTML4.html\"><code>HTML</code></a> <a href=\"../CSS.html\"><code>CSS</code></a> classes from this node. Any <a href=\"../CSS.html\"><code>CSS</code></a> class names in <code>css_classes</code> that exist in this node\u2019s \u201cclass\u201d attribute are removed, including any multiple entries.</p><p>If no <a href=\"../CSS.html\"><code>CSS</code></a> classes remain after this operation, or if <code>css_classes</code> is <code>nil</code>, the \u201cclass\u201d attribute is deleted from the node.</p><p>This is a convenience function and is equivalent to:</p><p>Also see <a href=\"Node.html#method-i-kwattr_remove\"><code>#kwattr_remove</code></a>, <a href=\"Node.html#method-i-classes\"><code>#classes</code></a>, <a href=\"Node.html#method-i-add_class\"><code>#add_class</code></a>, <a href=\"Node.html#method-i-append_class\"><code>#append_class</code></a></p><p><code>css_classes</code> (String, Array&lt;String&gt;)</p><p><a href=\"../CSS.html\"><code>CSS</code></a> class names to be removed from the Node\u2019s \u201cclass\u201d attribute. May be a string containing whitespace-delimited names, or an Array of String names. Any class names already present will be removed. If no <a href=\"../CSS.html\"><code>CSS</code></a> classes remain, the \u201cclass\u201d attribute is deleted.</p><p><code>self</code> (<a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>) for ease of chaining method calls.</p><p><strong>Example</strong>: Deleting a <a href=\"../CSS.html\"><code>CSS</code></a> class</p><p>Note that all instances of the class \u201csection\u201d are removed from the \u201cclass\u201d attribute.</p><p><strong>Example</strong>: Deleting the only remaining <a href=\"../CSS.html\"><code>CSS</code></a> class</p><p>Note that the attribute is removed once there are no remaining classes.</p><p><strong>Example</strong>: Deleting multiple <a href=\"../CSS.html\"><code>CSS</code></a> classes</p><p>Note that the \u201cclass\u201d attribute is deleted once it\u2019s empty.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-remove_class"},{"title":"class Nokogiri::XML::Node#[]=(name, value) \u2192 value","text":"","location":"rdoc/Nokogiri/XML/Node.html#method-i-set_attribute"},{"title":"class Nokogiri::XML::Node#value?(value)","text":"<p>Does this Node\u2019s attributes include &lt;value&gt;</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-value-3F"},{"title":"class Nokogiri::XML::Node#values()","text":"<p>Get the attribute values for this <a href=\"Node.html\"><code>Node</code></a>.</p>","location":"rdoc/Nokogiri/XML/Node.html#method-i-values"},{"title":"class Nokogiri::XML::NodeSet","text":"<section class=\"description\">\n<p>A <a href=\"NodeSet.html\"><code>NodeSet</code></a> is an Enumerable that contains a list of <a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a> objects.</p>\n<p>Typically a <a href=\"NodeSet.html\"><code>NodeSet</code></a> is returned as a result of searching a <a href=\"Document.html\"><code>Document</code></a> via <a href=\"Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a> or <a href=\"Searchable.html#method-i-xpath\"><code>Nokogiri::XML::Searchable#xpath</code></a>.</p>\n<p>Note that the \u2018#dup` and `#clone` methods perform shallow copies; these methods do not copy the Nodes contained in the <a href=\"NodeSet.html\"><code>NodeSet</code></a> (similar to how Array and other Enumerable classes work).</p>\n</section>","location":"rdoc/Nokogiri/XML/NodeSet.html"},{"title":"class Nokogiri::XML::NodeSet#document","text":"<p>The <a href=\"Document.html\"><code>Document</code></a> this <a href=\"NodeSet.html\"><code>NodeSet</code></a> is associated with</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#attribute-i-document"},{"title":"class Nokogiri::XML::NodeSet.new(document, list = []) { |self| ... }","text":"<p>Create a <a href=\"NodeSet.html\"><code>NodeSet</code></a> with <code>document</code> defaulting to <code>list</code></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-c-new"},{"title":"class Nokogiri::XML::NodeSet#search *paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class]","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-25"},{"title":"class Nokogiri::XML::NodeSet#&(node_set)","text":"<p>Set Intersection \u2014 Returns a new <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing nodes common to the two NodeSets.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-26"},{"title":"class Nokogiri::XML::NodeSet#+","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-2B"},{"title":"class Nokogiri::XML::NodeSet#-(node_set)","text":"<p>Difference - returns a new <a href=\"NodeSet.html\"><code>NodeSet</code></a> that is a copy of this <a href=\"NodeSet.html\"><code>NodeSet</code></a>, removing each item that also appears in <code>node_set</code></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-2D"},{"title":"class Nokogiri::XML::NodeSet#<<","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-3C-3C"},{"title":"class Nokogiri::XML::NodeSet#==(other)","text":"<p>Equality \u2013 Two NodeSets are equal if the contain the same number of elements and if each element is equal to the corresponding element in the other <a href=\"NodeSet.html\"><code>NodeSet</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-3D-3D"},{"title":"class Nokogiri::XML::NodeSet#[index] \u2192 Node or nil","text":"<p><a href=\"Element.html\"><code>Element</code></a> reference - returns the node at <code>index</code>, or returns a <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing nodes starting at <code>start</code> and continuing for <code>length</code> elements, or returns a <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing nodes specified by <code>range</code>. Negative <code>indices</code> count backward from the end of the <code>node_set</code> (-1 is the last node). Returns nil if the <code>index</code> (or <code>start</code>) are out of range.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-5B-5D"},{"title":"class Nokogiri::XML::NodeSet#add_class(name)","text":"<p>Add the class attribute <code>name</code> to all <a href=\"Node.html\"><code>Node</code></a> objects in the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p><p>See <a href=\"Node.html#method-i-add_class\"><code>Nokogiri::XML::Node#add_class</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-add_class"},{"title":"class Nokogiri::XML::NodeSet#after(datum)","text":"<p>Insert <code>datum</code> after the last <a href=\"Node.html\"><code>Node</code></a> in this <a href=\"NodeSet.html\"><code>NodeSet</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-after"},{"title":"class Nokogiri::XML::NodeSet#append_class(name)","text":"<p>Append the class attribute <code>name</code> to all <a href=\"Node.html\"><code>Node</code></a> objects in the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p><p>See <a href=\"Node.html#method-i-append_class\"><code>Nokogiri::XML::Node#append_class</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-append_class"},{"title":"class Nokogiri::XML::NodeSet#search *paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class]","text":"<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries.</p><p>See <a href=\"Searchable.html#method-i-search\"><code>Searchable#search</code></a> for more information.</p><p>Or, if passed an integer, index into the NodeSet:</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-at"},{"title":"class Nokogiri::XML::NodeSet#attr(key, value = nil) { |node| ... }","text":"<p>Set attributes on each <a href=\"Node.html\"><code>Node</code></a> in the <a href=\"NodeSet.html\"><code>NodeSet</code></a>, or get an attribute from the first <a href=\"Node.html\"><code>Node</code></a> in the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p><p>To get an attribute from the first <a href=\"Node.html\"><code>Node</code></a> in a NodeSet:</p><p>Note that an empty <a href=\"NodeSet.html\"><code>NodeSet</code></a> will return nil when <code>#attr</code> is called as a getter.</p><p>To set an attribute on each node, <code>key</code> can either be an attribute name, or a Hash of attribute names and values. When called as a setter, <code>#attr</code> returns the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p><p>If <code>key</code> is an attribute name, then either <code>value</code> or <code>block</code> must be passed.</p><p>If <code>key</code> is a Hash then attributes will be set for each key/value pair:</p><p>If <code>value</code> is passed, it will be used as the attribute value for all nodes:</p><p>If <code>block</code> is passed, it will be called on each <a href=\"Node.html\"><code>Node</code></a> object in the <a href=\"NodeSet.html\"><code>NodeSet</code></a> and the return value used as the attribute value for that node:</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-attr"},{"title":"class Nokogiri::XML::NodeSet#attribute(key, value = nil, &block)","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-attribute"},{"title":"class Nokogiri::XML::NodeSet#before(datum)","text":"<p>Insert <code>datum</code> before the first <a href=\"Node.html\"><code>Node</code></a> in this <a href=\"NodeSet.html\"><code>NodeSet</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-before"},{"title":"class Nokogiri::XML::NodeSet#children()","text":"<p>Returns a new <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing all the children of all the nodes in the <a href=\"NodeSet.html\"><code>NodeSet</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-children"},{"title":"class Nokogiri::XML::NodeSet#css *rules, [namespace-bindings, custom-pseudo-class]","text":"<p>Search this node set for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors. For example:</p><p>For more information see <a href=\"Searchable.html#method-i-css\"><code>Nokogiri::XML::Searchable#css</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-css"},{"title":"class Nokogiri::XML::NodeSet#deconstruct() \u2192 Array","text":"<p>Returns the members of this <a href=\"NodeSet.html\"><code>NodeSet</code></a> as an array, to use in pattern matching.</p><p>Since v1.14.0</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-deconstruct"},{"title":"class Nokogiri::XML::NodeSet#delete(node)","text":"<p>Delete <code>node</code> from the Nodeset, if it is a member. Returns the deleted node if found, otherwise returns nil.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-delete"},{"title":"class Nokogiri::XML::NodeSet#each() { |self| ... }","text":"<p>Iterate over each node, yielding  to <code>block</code></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-each"},{"title":"class Nokogiri::XML::NodeSet#empty?()","text":"<p>Is this <a href=\"NodeSet.html\"><code>NodeSet</code></a> empty?</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-empty-3F"},{"title":"class Nokogiri::XML::NodeSet#filter(expr)","text":"<p>Filter this list for nodes that match <code>expr</code></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-filter"},{"title":"class Nokogiri::XML::NodeSet#first(n = nil)","text":"<p>Get the first element of the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-first"},{"title":"class Nokogiri::XML::NodeSet#include?(node)","text":"<p>Returns true if any member of node set equals <code>node</code>.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-include-3F"},{"title":"class Nokogiri::XML::NodeSet#index(node = nil) { |member| ... }","text":"<p>Returns the index of the first node in self that is == to <code>node</code> or meets the given block. Returns nil if no match is found.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-index"},{"title":"class Nokogiri::XML::NodeSet#inner_html(*args)","text":"<p>Get the inner html of all contained <a href=\"Node.html\"><code>Node</code></a> objects</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-inner_html"},{"title":"class Nokogiri::XML::NodeSet#inner_text()","text":"<p>Get the inner text of all contained <a href=\"Node.html\"><code>Node</code></a> objects</p><p>Note: This joins the text of all <a href=\"Node.html\"><code>Node</code></a> objects in the NodeSet:</p><p>Instead, if you want to return the text of all nodes in the NodeSet:</p><p>See <a href=\"Node.html#method-i-content\"><code>Nokogiri::XML::Node#content</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-inner_text"},{"title":"class Nokogiri::XML::NodeSet#inspect()","text":"<p>Return a nicely formatted string representation</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-inspect"},{"title":"class Nokogiri::XML::NodeSet#last()","text":"<p>Get the last element of the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-last"},{"title":"class Nokogiri::XML::NodeSet#length","text":"<p>Get the length of the node set</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-length"},{"title":"class Nokogiri::XML::NodeSet#pop()","text":"<p>Removes the last element from set and returns it, or <code>nil</code> if the set is empty</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-pop"},{"title":"class Nokogiri::XML::NodeSet#push(node)","text":"<p>Append <code>node</code> to the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-push"},{"title":"class Nokogiri::XML::NodeSet#unlink","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-remove"},{"title":"class Nokogiri::XML::NodeSet#remove_attr(name)","text":"<p>Remove the attributed named <code>name</code> from all <a href=\"Node.html\"><code>Node</code></a> objects in the <a href=\"NodeSet.html\"><code>NodeSet</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-remove_attr"},{"title":"class Nokogiri::XML::NodeSet#remove_attribute(name)","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-remove_attribute"},{"title":"class Nokogiri::XML::NodeSet#remove_class(name = nil)","text":"<p>Remove the class attribute <code>name</code> from all <a href=\"Node.html\"><code>Node</code></a> objects in the <a href=\"NodeSet.html\"><code>NodeSet</code></a>.</p><p>See <a href=\"Node.html#method-i-remove_class\"><code>Nokogiri::XML::Node#remove_class</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-remove_class"},{"title":"class Nokogiri::XML::NodeSet#reverse()","text":"<p>Returns a new <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing all the nodes in the <a href=\"NodeSet.html\"><code>NodeSet</code></a> in reverse order</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-reverse"},{"title":"class Nokogiri::XML::NodeSet#set(key, value = nil, &block)","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-set"},{"title":"class Nokogiri::XML::NodeSet#shift()","text":"<p>Returns the first element of the <a href=\"NodeSet.html\"><code>NodeSet</code></a> and removes it.  Returns <code>nil</code> if the set is empty.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-shift"},{"title":"class Nokogiri::XML::NodeSet#length","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-size"},{"title":"class Nokogiri::XML::NodeSet#slice(index) \u2192 Node or nil","text":"<p><a href=\"Element.html\"><code>Element</code></a> reference - returns the node at <code>index</code>, or returns a <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing nodes starting at <code>start</code> and continuing for <code>length</code> elements, or returns a <a href=\"NodeSet.html\"><code>NodeSet</code></a> containing nodes specified by <code>range</code>. Negative <code>indices</code> count backward from the end of the <code>node_set</code> (-1 is the last node). Returns nil if the <code>index</code> (or <code>start</code>) are out of range.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-slice"},{"title":"class Nokogiri::XML::NodeSet#text()","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-text"},{"title":"class Nokogiri::XML::NodeSet#to_a","text":"<p>Return this list as an Array</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-to_a"},{"title":"class Nokogiri::XML::NodeSet#to_a","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-to_ary"},{"title":"class Nokogiri::XML::NodeSet#to_html(*args)","text":"<p>Convert this <a href=\"NodeSet.html\"><code>NodeSet</code></a> to <a href=\"../HTML4.html\"><code>HTML</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-to_html"},{"title":"class Nokogiri::XML::NodeSet#to_s()","text":"<p>Convert this <a href=\"NodeSet.html\"><code>NodeSet</code></a> to a string.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-to_s"},{"title":"class Nokogiri::XML::NodeSet#to_xhtml(*args)","text":"<p>Convert this <a href=\"NodeSet.html\"><code>NodeSet</code></a> to XHTML</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-to_xhtml"},{"title":"class Nokogiri::XML::NodeSet#to_xml(*args)","text":"<p>Convert this <a href=\"NodeSet.html\"><code>NodeSet</code></a> to <a href=\"../XML.html\"><code>XML</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-to_xml"},{"title":"class Nokogiri::XML::NodeSet#unlink","text":"<p>Unlink this <a href=\"NodeSet.html\"><code>NodeSet</code></a> and all <a href=\"Node.html\"><code>Node</code></a> objects it contains from their current context.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-unlink"},{"title":"class Nokogiri::XML::NodeSet#wrap(markup) \u2192 self","text":"<p>Wrap each member of this <a href=\"NodeSet.html\"><code>NodeSet</code></a> with the node parsed from <code>markup</code> or a dup of the <code>node</code>.</p><p><strong>markup</strong> (String) Markup that is parsed, once per member of the <a href=\"NodeSet.html\"><code>NodeSet</code></a>, and used as the wrapper. Each node\u2019s parent, if it exists, is used as the context node for parsing; otherwise the associated document is used. If the parsed fragment has multiple roots, the first root node is used as the wrapper.</p><p><strong>node</strong> (<a href=\"Node.html\"><code>Nokogiri::XML::Node</code></a>) An element that is \u2018#dup`ed and used as the wrapper.</p><p><code>self</code>, to support chaining.</p><p>\u26a0 Note that if a <code>String</code> is passed, the markup will be parsed <strong>once per node</strong> in the <a href=\"NodeSet.html\"><code>NodeSet</code></a>. You can avoid this overhead in cases where you know exactly the wrapper you wish to use by passing a <code>Node</code> instead.</p><p>Also see <a href=\"Node.html#method-i-wrap\"><code>Node#wrap</code></a></p><p><strong>Example</strong> with a <code>String</code> argument:</p><p><strong>Example</strong> with a <code>Node</code> argument</p><p>\ud83d\udca1 Note that this is faster than the equivalent call passing a <code>String</code> because it avoids having to reparse the wrapper markup for each node.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-wrap"},{"title":"class Nokogiri::XML::NodeSet#xpath *paths, [namespace-bindings, variable-bindings, custom-handler-class]","text":"<p>Search this node set for <a href=\"XPath.html\"><code>XPath</code></a> <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>For more information see <a href=\"Searchable.html#method-i-xpath\"><code>Nokogiri::XML::Searchable#xpath</code></a></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-xpath"},{"title":"class Nokogiri::XML::NodeSet#|(node_set)","text":"<p>Returns a new set built by merging the set and the elements of the given set.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-7C"},{"title":"class Nokogiri::XML::NodeSet#/","text":"","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-2F"},{"title":"class Nokogiri::XML::NodeSet#>(selector) \u2192 NodeSet","text":"<p>Search this node\u2019s immediate children using <a href=\"../CSS.html\"><code>CSS</code></a> selector <code>selector</code></p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-3E"},{"title":"class Nokogiri::XML::NodeSet#at_css(*rules, [namespace-bindings, custom-pseudo-class])","text":"<p>Search this object for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>, and return only the first match. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors.</p><p>See <a href=\"Searchable.html#method-i-css\"><code>Searchable#css</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-at_css"},{"title":"class Nokogiri::XML::NodeSet#at_xpath(*paths, [namespace-bindings, variable-bindings, custom-handler-class])","text":"<p>Search this node for <a href=\"XPath.html\"><code>XPath</code></a> <code>paths</code>, and return only the first match. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>See <a href=\"Searchable.html#method-i-xpath\"><code>Searchable#xpath</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-at_xpath"},{"title":"class Nokogiri::XML::NodeSet#search(*paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class])","text":"<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries:</p><p>A hash of namespace bindings may be appended:</p><p>For <a href=\"XPath.html\"><code>XPath</code></a> queries, a hash of variable bindings may also be appended to the namespace bindings. For example:</p><p>\ud83d\udca1 Custom <a href=\"XPath.html\"><code>XPath</code></a> functions and <a href=\"../CSS.html\"><code>CSS</code></a> pseudo-selectors may also be defined. To define custom functions create a class and implement the function you want to define, which will be in the \u2018nokogiri` namespace in <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>The first argument to the method will be the current matching <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. Note that this class may appear anywhere in the argument list. For example:</p><p>See <a href=\"Searchable.html#method-i-xpath\"><code>Searchable#xpath</code></a> and <a href=\"Searchable.html#method-i-css\"><code>Searchable#css</code></a> for further usage help.</p>","location":"rdoc/Nokogiri/XML/NodeSet.html#method-i-search"},{"title":"class Nokogiri::XML::Notation","text":"<section class=\"description\">\n<p>Struct representing an <a href=\"https://www.w3.org/TR/xml/#Notations\">XML Schema Notation</a></p>\n</section>","location":"rdoc/Nokogiri/XML/Notation.html"},{"title":"class Nokogiri::XML::Notation#name","text":"<p>The name for the element.</p>","location":"rdoc/Nokogiri/XML/Notation.html#attribute-i-name"},{"title":"class Nokogiri::XML::Notation#public_id","text":"<p>The URI corresponding to the public identifier</p>","location":"rdoc/Nokogiri/XML/Notation.html#attribute-i-public_id"},{"title":"class Nokogiri::XML::Notation#system_id","text":"<p>The URI corresponding to the system identifier</p>","location":"rdoc/Nokogiri/XML/Notation.html#attribute-i-system_id"},{"title":"module Nokogiri::XML::PP","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/PP.html"},{"title":"class Nokogiri::XML::ParseOptions","text":"<section class=\"description\">\n<p>Options that control the parsing behavior for <a href=\"Document.html\"><code>XML::Document</code></a>, <a href=\"DocumentFragment.html\"><code>XML::DocumentFragment</code></a>, <a href=\"../HTML4/Document.html\"><code>HTML4::Document</code></a>, <a href=\"../HTML4/DocumentFragment.html\"><code>HTML4::DocumentFragment</code></a>, <a href=\"../XSLT/Stylesheet.html\"><code>XSLT::Stylesheet</code></a>, and <a href=\"Schema.html\"><code>XML::Schema</code></a>.</p>\n<p>These options directly expose libxml2\u2019s parse options, which are all boolean in the sense that an option is \u201con\u201d or \u201coff\u201d.</p>\n<p>\ud83d\udca1 Note that <a href=\"../HTML5.html\"><code>HTML5</code></a> parsing has a separate, orthogonal set of options due to the nature of the <a href=\"../HTML5.html\"><code>HTML5</code></a> specification. See <a href=\"../HTML5.html\"><code>Nokogiri::HTML5</code></a>.</p>\n<p>\u26a0 Not all parse options are supported on JRuby. <a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> will attempt to invoke the equivalent behavior in Xerces/NekoHTML on JRuby when it\u2019s possible.</p>\n<h2 id=\"class-Nokogiri::XML::ParseOptions-label-Setting+and+unsetting+parse+options\">Setting and unsetting parse options<span><a href=\"#class-Nokogiri::XML::ParseOptions-label-Setting+and+unsetting+parse+options\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h2>\n<p>You can build your own combinations of parse options by using any of the following methods:</p>\n<dl class=\"rdoc-list label-list\">\n<dt>\n<a href=\"ParseOptions.html\"><code>ParseOptions</code></a> method chaining\n</dt>\n<dd>\n<p>Every option has an equivalent method in lowercase. You can chain these methods together to set various combinations.</p>\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Set the HUGE &amp; PEDANTIC options</span>\n<span class=\"ruby-identifier\">po</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">ParseOptions</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">huge</span>.<span class=\"ruby-identifier\">pedantic</span>\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">xml</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-identifier\">po</span>)\n</pre>\n<p>Every option has an equivalent <code>no{option}</code> method in lowercase. You can call these methods on an instance of <a href=\"ParseOptions.html\"><code>ParseOptions</code></a> to unset the option.</p>\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Set the HUGE &amp; PEDANTIC options</span>\n<span class=\"ruby-identifier\">po</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">ParseOptions</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">huge</span>.<span class=\"ruby-identifier\">pedantic</span>\n\n<span class=\"ruby-comment\"># later we want to modify the options</span>\n<span class=\"ruby-identifier\">po</span>.<span class=\"ruby-identifier\">nohuge</span> <span class=\"ruby-comment\"># Unset the HUGE option</span>\n<span class=\"ruby-identifier\">po</span>.<span class=\"ruby-identifier\">nopedantic</span> <span class=\"ruby-comment\"># Unset the PEDANTIC option</span>\n</pre>\n<p>\ud83d\udca1 Note that some options begin with \u201cno\u201d leading to the logical but perhaps unintuitive double negative:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">po</span>.<span class=\"ruby-identifier\">nocdata</span> <span class=\"ruby-comment\"># Set the NOCDATA parse option</span>\n<span class=\"ruby-identifier\">po</span>.<span class=\"ruby-identifier\">nonocdata</span> <span class=\"ruby-comment\"># Unset the NOCDATA parse option</span>\n</pre>\n<p>\ud83d\udca1 Note that negation is not available for <a href=\"ParseOptions.html#STRICT\"><code>STRICT</code></a>, which is itself a negation of all other features.</p>\n</dd>\n<dt>Using Ruby Blocks\n</dt>\n<dd>\n<p>Most parsing methods will accept a block for configuration of parse options, and we recommend chaining the setter methods:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">xml</span>) { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">config</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">config</span>.<span class=\"ruby-identifier\">huge</span>.<span class=\"ruby-identifier\">pedantic</span> }\n</pre>\n</dd>\n<dt>\n<a href=\"ParseOptions.html\"><code>ParseOptions</code></a> constants\n</dt>\n<dd>\n<p>You can also use the constants declared under <a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a> to set various combinations. They are bits in a bitmask, and so can be combined with bitwise operators:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">po</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">ParseOptions</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">ParseOptions</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HUGE</span> <span class=\"ruby-operator\">|</span> <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">ParseOptions</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PEDANTIC</span>)\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">xml</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-identifier\">po</span>)\n</pre>\n</dd>\n</dl>\n</section>","location":"rdoc/Nokogiri/XML/ParseOptions.html"},{"title":"class Nokogiri::XML::ParseOptions#options","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#attribute-i-options"},{"title":"class Nokogiri::XML::ParseOptions#to_i","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#attribute-i-to_i"},{"title":"class Nokogiri::XML::ParseOptions.new(options = STRICT)","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#method-c-new"},{"title":"class Nokogiri::XML::ParseOptions#==(other)","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#method-i-3D-3D"},{"title":"class Nokogiri::XML::ParseOptions#inspect()","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#method-i-inspect"},{"title":"class Nokogiri::XML::ParseOptions#strict()","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#method-i-strict"},{"title":"class Nokogiri::XML::ParseOptions#strict?()","text":"","location":"rdoc/Nokogiri/XML/ParseOptions.html#method-i-strict-3F"},{"title":"class Nokogiri::XML::ProcessingInstruction","text":"<section class=\"description\">\n<p><a href=\"ProcessingInstruction.html\"><code>ProcessingInstruction</code></a> represents a <a href=\"ProcessingInstruction.html\"><code>ProcessingInstruction</code></a> node in an xml document.</p>\n</section>","location":"rdoc/Nokogiri/XML/ProcessingInstruction.html"},{"title":"class Nokogiri::XML::ProcessingInstruction.new(document, name, content)","text":"<p>Create a new <a href=\"ProcessingInstruction.html\"><code>ProcessingInstruction</code></a> element on the <code>document</code> with <code>name</code> and <code>content</code></p>","location":"rdoc/Nokogiri/XML/ProcessingInstruction.html#method-c-new"},{"title":"class Nokogiri::XML::ProcessingInstruction.new(document, name, content)","text":"","location":"rdoc/Nokogiri/XML/ProcessingInstruction.html#method-c-new"},{"title":"class Nokogiri::XML::Reader","text":"<section class=\"description\">\n<p>The <a href=\"Reader.html\"><code>Reader</code></a> parser allows you to effectively pull parse an <a href=\"../XML.html\"><code>XML</code></a> document. Once instantiated, call <a href=\"Reader.html#method-i-each\"><code>Nokogiri::XML::Reader#each</code></a> to iterate over each node.  Note that you may only iterate over the document once!</p>\n<p><a href=\"Reader.html\"><code>Nokogiri::XML::Reader</code></a> parses an <a href=\"../XML.html\"><code>XML</code></a> document similar to the way a cursor would move. The <a href=\"Reader.html\"><code>Reader</code></a> is given an <a href=\"../XML.html\"><code>XML</code></a> document, and yields nodes to an each block.</p>\n<p>The <a href=\"Reader.html\"><code>Reader</code></a> parser might be good for when you need the speed and low memory usage of the <a href=\"SAX.html\"><code>SAX</code></a> parser, but do not want to write a <a href=\"Document.html\"><code>Document</code></a> handler.</p>\n<p>Here is an example of usage:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reader</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Reader</span>(<span class=\"ruby-identifier\">&lt;&lt;-eoxml</span>)\n<span class=\"ruby-value\">  &lt;x xmlns:tenderlove='http://tenderlovemaking.com/'&gt;\n    &lt;tenderlove:foo awesome='true'&gt;snuggles!&lt;/tenderlove:foo&gt;\n  &lt;/x&gt;\n</span><span class=\"ruby-identifier\">eoxml</span>\n\n<span class=\"ruby-identifier\">reader</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">node</span><span class=\"ruby-operator\">|</span>\n\n  <span class=\"ruby-comment\"># node is an instance of Nokogiri::XML::Reader</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">name</span>\n\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>\u26a0 <a href=\"Reader.html#method-i-each\"><code>Nokogiri::XML::Reader#each</code></a> can only be called once! Once the cursor moves through the entire document, you must parse the document again. It may be better to capture all information you need during a single iteration.</p>\n<p>\u26a0 libxml2 does not support error recovery in the <a href=\"Reader.html\"><code>Reader</code></a> parser. The \u2018RECOVER` ParseOption is ignored. If a syntax error is encountered during parsing, an exception will be raised.</p>\n</section>","location":"rdoc/Nokogiri/XML/Reader.html"},{"title":"class Nokogiri::XML::Reader#errors","text":"<p>A list of errors encountered while parsing</p>","location":"rdoc/Nokogiri/XML/Reader.html#attribute-i-errors"},{"title":"class Nokogiri::XML::Reader#source","text":"<p>The <a href=\"../XML.html\"><code>XML</code></a> source</p>","location":"rdoc/Nokogiri/XML/Reader.html#attribute-i-source"},{"title":"class Nokogiri::XML::Reader.from_io(io, url = nil, encoding = nil, options = 0)","text":"<p>Create a new reader that parses <code>io</code></p>","location":"rdoc/Nokogiri/XML/Reader.html#method-c-from_io"},{"title":"class Nokogiri::XML::Reader.from_memory(string, url = nil, encoding = nil, options = 0)","text":"<p>Create a new reader that parses <code>string</code></p>","location":"rdoc/Nokogiri/XML/Reader.html#method-c-from_memory"},{"title":"class Nokogiri::XML::Reader#attribute(name)","text":"<p>Get the value of attribute named <code>name</code></p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-attribute"},{"title":"class Nokogiri::XML::Reader#attribute_at(index)","text":"<p>Get the value of attribute at <code>index</code></p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-attribute_at"},{"title":"class Nokogiri::XML::Reader#attribute_count","text":"<p>Get the number of attributes for the current node</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-attribute_count"},{"title":"class Nokogiri::XML::Reader#attribute_hash() \u2192 Hash<String \u21d2 String>","text":"<p>Get the attributes of the current node as a Hash of names and values.</p><p>See related: <a href=\"Reader.html#method-i-attributes\"><code>#attributes</code></a> and <a href=\"Reader.html#method-i-namespaces\"><code>#namespaces</code></a></p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-attribute_hash"},{"title":"class Nokogiri::XML::Reader#attributes()","text":"<p>Get the attributes and namespaces of the current node as a Hash.</p><p>This is the union of <a href=\"Reader.html#method-i-attribute_hash\"><code>Reader#attribute_hash</code></a> and <a href=\"Reader.html#method-i-namespaces\"><code>Reader#namespaces</code></a></p><p>(Hash&lt;String, String&gt;) Attribute names and values, and namespace prefixes and hrefs.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-attributes"},{"title":"class Nokogiri::XML::Reader#attributes?","text":"<p>Does this node have attributes?</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-attributes-3F"},{"title":"class Nokogiri::XML::Reader#base_uri","text":"<p>Get the xml:base of the node</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-base_uri"},{"title":"class Nokogiri::XML::Reader#default?","text":"<p>Was an attribute generated from the default value in the <a href=\"DTD.html\"><code>DTD</code></a> or schema?</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-default-3F"},{"title":"class Nokogiri::XML::Reader#depth","text":"<p>Get the depth of the node</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-depth"},{"title":"class Nokogiri::XML::Reader#each() { |cursor| ... }","text":"<p>Move the cursor through the document yielding the cursor to the block</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-each"},{"title":"class Nokogiri::XML::Reader#empty_element? # \u2192 true or false","text":"<p>Returns true if the current node is empty, otherwise false.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-empty_element-3F"},{"title":"class Nokogiri::XML::Reader#encoding()","text":"","location":"rdoc/Nokogiri/XML/Reader.html#method-i-encoding"},{"title":"class Nokogiri::XML::Reader#inner_xml","text":"<p>Read the contents of the current node, including child nodes and markup. Returns a utf-8 encoded string.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-inner_xml"},{"title":"class Nokogiri::XML::Reader#lang","text":"<p>Get the xml:lang scope within which the node resides.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-lang"},{"title":"class Nokogiri::XML::Reader#local_name","text":"<p>Get the local name of the node</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-local_name"},{"title":"class Nokogiri::XML::Reader#name","text":"<p>Get the name of the node. Returns a utf-8 encoded string.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-name"},{"title":"class Nokogiri::XML::Reader#namespace_uri","text":"<p>Get the URI defining the namespace associated with the node</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-namespace_uri"},{"title":"class Nokogiri::XML::Reader#namespaces","text":"<p>Get a hash of namespaces for this <a href=\"Node.html\"><code>Node</code></a></p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-namespaces"},{"title":"class Nokogiri::XML::Reader#node_type","text":"<p>Get the type of readers current node</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-node_type"},{"title":"class Nokogiri::XML::Reader#outer_xml","text":"<p>Read the current node and its contents, including child nodes and markup. Returns a utf-8 encoded string.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-outer_xml"},{"title":"class Nokogiri::XML::Reader#prefix","text":"<p>Get the shorthand reference to the namespace associated with the node.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-prefix"},{"title":"class Nokogiri::XML::Reader#read","text":"<p>Move the <a href=\"Reader.html\"><code>Reader</code></a> forward through the <a href=\"../XML.html\"><code>XML</code></a> document.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-read"},{"title":"class Nokogiri::XML::Reader#self_closing?","text":"","location":"rdoc/Nokogiri/XML/Reader.html#method-i-self_closing-3F"},{"title":"class Nokogiri::XML::Reader#state","text":"<p>Get the state of the reader</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-state"},{"title":"class Nokogiri::XML::Reader#value","text":"<p>Get the text value of the node if present. Returns a utf-8 encoded string.</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-value"},{"title":"class Nokogiri::XML::Reader#value?","text":"<p>Does this node have a text value?</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-value-3F"},{"title":"class Nokogiri::XML::Reader#xml_version","text":"<p>Get the <a href=\"../XML.html\"><code>XML</code></a> version of the document being read</p>","location":"rdoc/Nokogiri/XML/Reader.html#method-i-xml_version"},{"title":"class Nokogiri::XML::RelaxNG","text":"<section class=\"description\">\n<p><a href=\"RelaxNG.html\"><code>Nokogiri::XML::RelaxNG</code></a> is used for validating <a href=\"../XML.html\"><code>XML</code></a> against a RELAX NG schema definition.</p>\n<p><strong>Example:</strong> Determine whether an <a href=\"../XML.html\"><code>XML</code></a> document is valid.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">schema</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">RelaxNG</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">RELAX_NG_FILE</span>))\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">XML_FILE</span>))\n<span class=\"ruby-identifier\">schema</span>.<span class=\"ruby-identifier\">valid?</span>(<span class=\"ruby-identifier\">doc</span>) <span class=\"ruby-comment\"># Boolean</span>\n</pre>\n<p><strong>Example:</strong> Validate an <a href=\"../XML.html\"><code>XML</code></a> document against a <a href=\"RelaxNG.html\"><code>RelaxNG</code></a> schema, and capture any errors that are found.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">schema</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">RelaxNG</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-constant\">RELAX_NG_FILE</span>))\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-constant\">XML_FILE</span>))\n<span class=\"ruby-identifier\">errors</span> = <span class=\"ruby-identifier\">schema</span>.<span class=\"ruby-identifier\">validate</span>(<span class=\"ruby-identifier\">doc</span>) <span class=\"ruby-comment\"># Array&lt;SyntaxError&gt;</span>\n</pre>\n<p>\u26a0 RELAX NG input is always treated as <strong>trusted</strong>, meaning that the underlying parsing libraries *will access network resources*. This is counter to Nokogiri\u2019s \u201cuntrusted by default\u201d security policy, but is an unfortunate limitation of the underlying libraries. Please do not use this class for untrusted schema documents.</p>\n</section>","location":"rdoc/Nokogiri/XML/RelaxNG.html"},{"title":"class Nokogiri::XML::RelaxNG.from_document(document) \u2192 Nokogiri::XML::RelaxNG","text":"<p>Create a <a href=\"Schema.html\"><code>Schema</code></a> from an already-parsed RELAX NG schema definition document.</p><p><code>document</code> (<a href=\"Document.html\"><code>XML::Document</code></a>) A <a href=\"Document.html\"><code>XML::Document</code></a> object representing the parsed RELAX NG</p><p><code>parse_options</code> (<a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) \u26a0 Unused</p><p><a href=\"RelaxNG.html\"><code>Nokogiri::XML::RelaxNG</code></a></p><p>\u26a0 <code>parse_options</code> is currently unused by this method and is present only as a placeholder for future functionality.</p>","location":"rdoc/Nokogiri/XML/RelaxNG.html#method-c-from_document"},{"title":"class Nokogiri::XML::RelaxNG.new(input) \u2192 Nokogiri::XML::RelaxNG","text":"<p>Parse a RELAX NG schema definition and create a new <a href=\"Schema.html\"><code>Schema</code></a> object.</p><p><code>input</code> (String, IO) RELAX NG schema definition</p><p><code>parse_options</code> (<a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) Defaults to ParseOptions::DEFAULT_SCHEMA  \u26a0 Unused</p><p><a href=\"RelaxNG.html\"><code>Nokogiri::XML::RelaxNG</code></a></p><p>\u26a0 <code>parse_options</code> is currently unused by this method and is present only as a placeholder for future functionality.</p>","location":"rdoc/Nokogiri/XML/RelaxNG.html#method-c-new"},{"title":"class Nokogiri::XML::RelaxNG.read_memory(input) \u2192 Nokogiri::XML::RelaxNG","text":"<p>Parse a RELAX NG schema definition and create a new <a href=\"Schema.html\"><code>Schema</code></a> object.</p><p><code>input</code> (String) RELAX NG schema definition</p><p><code>parse_options</code> (<a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) Defaults to ParseOptions::DEFAULT_SCHEMA  \u26a0 Unused</p><p><a href=\"RelaxNG.html\"><code>Nokogiri::XML::RelaxNG</code></a></p><p>\u26a0 <code>parse_options</code> is currently unused by this method and is present only as a placeholder for future functionality.</p>","location":"rdoc/Nokogiri/XML/RelaxNG.html#method-c-read_memory"},{"title":"module Nokogiri::XML::SAX","text":"<section class=\"description\">\n<p><a href=\"SAX.html\"><code>SAX</code></a> Parsers are event-driven parsers.</p>\n<p>Two <a href=\"SAX.html\"><code>SAX</code></a> parsers for <a href=\"../XML.html\"><code>XML</code></a> are available, a parser that reads from a string or IO object as it feels necessary, and a parser that you explicitly feed <a href=\"../XML.html\"><code>XML</code></a> in chunks. If you want to let <a href=\"../../Nokogiri.html\"><code>Nokogiri</code></a> deal with reading your <a href=\"../XML.html\"><code>XML</code></a>, use the <a href=\"SAX/Parser.html\"><code>Nokogiri::XML::SAX::Parser</code></a>. If you want to have fine grain control over the <a href=\"../XML.html\"><code>XML</code></a> input, use the <a href=\"SAX/PushParser.html\"><code>Nokogiri::XML::SAX::PushParser</code></a>.</p>\n<p>If you want to do <a href=\"SAX.html\"><code>SAX</code></a> style parsing of <a href=\"../HTML4.html\"><code>HTML</code></a>, check out <a href=\"../HTML4/SAX.html\"><code>Nokogiri::HTML4::SAX</code></a>.</p>\n<p>The basic way a <a href=\"SAX.html\"><code>SAX</code></a> style parser works is by creating a parser, telling the parser about the events we\u2019re interested in, then giving the parser some <a href=\"../XML.html\"><code>XML</code></a> to process. The parser will notify you when it encounters events you said you would like to know about.</p>\n<p>To register for events, subclass <a href=\"SAX/Document.html\"><code>Nokogiri::XML::SAX::Document</code></a> and implement the methods for which you would like notification.</p>\n<p>For example, if I want to be notified when a document ends, and when an element starts, I would write a class like this:</p>\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyHandler</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">end_document</span>\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">\"the document has ended\"</span>\n  <span class=\"ruby-keyword\">end</span>\n\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">start_element</span> <span class=\"ruby-identifier\">name</span>, <span class=\"ruby-identifier\">attributes</span> = []\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">\"#{name} started\"</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>Then I would instantiate a <a href=\"SAX.html\"><code>SAX</code></a> parser with this document, and feed the parser some <a href=\"../XML.html\"><code>XML</code></a></p>\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Create a new parser</span>\n<span class=\"ruby-identifier\">parser</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">MyHandler</span>.<span class=\"ruby-identifier\">new</span>)\n\n<span class=\"ruby-comment\"># Feed the parser some XML</span>\n<span class=\"ruby-identifier\">parser</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-constant\">ARGV</span>[<span class=\"ruby-value\">0</span>]))\n</pre>\n<p>Now my document handler will be called when each node starts, and when then document ends. To see what kinds of events are available, take a look at <a href=\"SAX/Document.html\"><code>Nokogiri::XML::SAX::Document</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/XML/SAX.html"},{"title":"class Nokogiri::XML::Schema","text":"<section class=\"description\">\n<p><a href=\"Schema.html\"><code>Nokogiri::XML::Schema</code></a> is used for validating <a href=\"../XML.html\"><code>XML</code></a> against an <a href=\"../../XSD.html\"><code>XSD</code></a> schema definition.</p>\n<p><strong>Example:</strong> Determine whether an <a href=\"../XML.html\"><code>XML</code></a> document is valid.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">schema</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Schema</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">XSD_FILE</span>))\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">XML_FILE</span>))\n<span class=\"ruby-identifier\">schema</span>.<span class=\"ruby-identifier\">valid?</span>(<span class=\"ruby-identifier\">doc</span>) <span class=\"ruby-comment\"># Boolean</span>\n</pre>\n<p><strong>Example:</strong> Validate an <a href=\"../XML.html\"><code>XML</code></a> document against a <a href=\"Schema.html\"><code>Schema</code></a>, and capture any errors that are found.</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">schema</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Schema</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">XSD_FILE</span>))\n<span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">XML_FILE</span>))\n<span class=\"ruby-identifier\">errors</span> = <span class=\"ruby-identifier\">schema</span>.<span class=\"ruby-identifier\">validate</span>(<span class=\"ruby-identifier\">doc</span>) <span class=\"ruby-comment\"># Array&lt;SyntaxError&gt;</span>\n</pre>\n<p>\u26a0 As of v1.11.0, <a href=\"Schema.html\"><code>Schema</code></a> treats inputs as <strong>untrusted</strong> by default, and so external entities are not resolved from the network (<code>http://</code> or <code>ftp://</code>). When parsing a trusted document, the caller may turn off the <code>NONET</code> option via the <a href=\"ParseOptions.html\"><code>ParseOptions</code></a> to (re-)enable external entity resolution over a network connection.</p>\n<p>Previously, documents were \u201ctrusted\u201d by default during schema parsing which was counter to Nokogiri\u2019s \u201cuntrusted by default\u201d security policy.</p>\n</section>","location":"rdoc/Nokogiri/XML/Schema.html"},{"title":"class Nokogiri::XML::Schema#errors","text":"<p>The errors found while parsing the <a href=\"../../XSD.html\"><code>XSD</code></a></p><p>Array&lt;Nokogiri::XML::SyntaxError&gt;</p>","location":"rdoc/Nokogiri/XML/Schema.html#attribute-i-errors"},{"title":"class Nokogiri::XML::Schema#parse_options","text":"<p>The options used to parse the schema</p><p><a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a></p>","location":"rdoc/Nokogiri/XML/Schema.html#attribute-i-parse_options"},{"title":"class Nokogiri::XML::Schema.from_document(document) \u2192 Nokogiri::XML::Schema","text":"<p>Create a <a href=\"Schema.html\"><code>Schema</code></a> from an already-parsed <a href=\"../../XSD.html\"><code>XSD</code></a> schema definition document.</p><p><code>document</code> (<a href=\"Document.html\"><code>XML::Document</code></a>) A document object representing the parsed <a href=\"../../XSD.html\"><code>XSD</code></a></p><p><code>parse_options</code> (<a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) Defaults to Nokogiri::XML::ParseOptions::DEFAULT_SCHEMA</p><p><a href=\"Schema.html\"><code>Nokogiri::XML::Schema</code></a></p>","location":"rdoc/Nokogiri/XML/Schema.html#method-c-from_document"},{"title":"class Nokogiri::XML::Schema.new(input) \u2192 Nokogiri::XML::Schema","text":"<p>Parse an <a href=\"../../XSD.html\"><code>XSD</code></a> schema definition and create a new <a href=\"../XML.html\"><code>Nokogiri::XML</code></a>:Schema object.</p><p><code>input</code> (String, IO) <a href=\"../../XSD.html\"><code>XSD</code></a> schema definition</p><p><code>parse_options</code> (<a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) Defaults to Nokogiri::XML::ParseOptions::DEFAULT_SCHEMA</p><p><a href=\"Schema.html\"><code>Nokogiri::XML::Schema</code></a></p>","location":"rdoc/Nokogiri/XML/Schema.html#method-c-new"},{"title":"class Nokogiri::XML::Schema.read_memory(input) \u2192 Nokogiri::XML::Schema","text":"<p>Parse an <a href=\"../../XSD.html\"><code>XSD</code></a> schema definition and create a new <a href=\"Schema.html\"><code>Schema</code></a> object.</p><p>\ud83d\udca1 Note that the limitation of this method relative to <a href=\"Schema.html#method-c-new\"><code>Schema.new</code></a> is that <code>input</code> must be type String, whereas <a href=\"Schema.html#method-c-new\"><code>Schema.new</code></a> also supports IO types.</p><p><code>input</code> (String) <a href=\"../../XSD.html\"><code>XSD</code></a> schema definition</p><p><code>parse_options</code> (<a href=\"ParseOptions.html\"><code>Nokogiri::XML::ParseOptions</code></a>) Defaults to Nokogiri::XML::ParseOptions::DEFAULT_SCHEMA</p><p><a href=\"Schema.html\"><code>Nokogiri::XML::Schema</code></a></p>","location":"rdoc/Nokogiri/XML/Schema.html#method-c-read_memory"},{"title":"class Nokogiri::XML::Schema#valid?(input) \u2192 Boolean","text":"<p>Validate <code>input</code> and return a Boolean indicating whether the document is valid</p><p><code>input</code> (<a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a>, String)</p><p>A parsed document, or a string containing a local filename.</p><p>Boolean</p><p><strong>Example:</strong> Validate an existing <a href=\"Document.html\"><code>XML::Document</code></a> <code>document</code></p><p><strong>Example:</strong> Validate an <a href=\"../XML.html\"><code>XML</code></a> document on disk</p>","location":"rdoc/Nokogiri/XML/Schema.html#method-i-valid-3F"},{"title":"class Nokogiri::XML::Schema#validate(input) \u2192 Array<SyntaxError>","text":"<p>Validate <code>input</code> and return any errors that are found.</p><p><code>input</code> (<a href=\"Document.html\"><code>Nokogiri::XML::Document</code></a>, String)</p><p>A parsed document, or a string containing a local filename.</p><p>Array&lt;SyntaxError&gt;</p><p><strong>Example:</strong> Validate an existing <a href=\"Document.html\"><code>Document</code></a> <code>document</code>, and capture any errors that are found.</p><p><strong>Example:</strong> Validate an <a href=\"../XML.html\"><code>XML</code></a> document on disk, and capture any errors that are found.</p>","location":"rdoc/Nokogiri/XML/Schema.html#method-i-validate"},{"title":"module Nokogiri::XML::Searchable","text":"<section class=\"description\">\n<p>The <a href=\"Searchable.html\"><code>Searchable</code></a> module declares the interface used for searching your DOM.</p>\n<p>It implements the public methods <a href=\"Searchable.html#method-i-search\"><code>#search</code></a>, <a href=\"Searchable.html#method-i-css\"><code>#css</code></a>, and <a href=\"Searchable.html#method-i-xpath\"><code>#xpath</code></a>, as well as allowing specific implementations to specialize some of the important behaviors.</p>\n</section>","location":"rdoc/Nokogiri/XML/Searchable.html"},{"title":"module Nokogiri::XML::Searchable#%","text":"","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-25"},{"title":"module Nokogiri::XML::Searchable#/","text":"","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-2F"},{"title":"module Nokogiri::XML::Searchable#>(selector) \u2192 NodeSet","text":"<p>Search this node\u2019s immediate children using <a href=\"../CSS.html\"><code>CSS</code></a> selector <code>selector</code></p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-3E"},{"title":"module Nokogiri::XML::Searchable#at(*paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class])","text":"<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries.</p><p>See <a href=\"Searchable.html#method-i-search\"><code>Searchable#search</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-at"},{"title":"module Nokogiri::XML::Searchable#at_css(*rules, [namespace-bindings, custom-pseudo-class])","text":"<p>Search this object for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>, and return only the first match. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors.</p><p>See <a href=\"Searchable.html#method-i-css\"><code>Searchable#css</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-at_css"},{"title":"module Nokogiri::XML::Searchable#at_xpath(*paths, [namespace-bindings, variable-bindings, custom-handler-class])","text":"<p>Search this node for <a href=\"XPath.html\"><code>XPath</code></a> <code>paths</code>, and return only the first match. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>See <a href=\"Searchable.html#method-i-xpath\"><code>Searchable#xpath</code></a> for more information.</p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-at_xpath"},{"title":"module Nokogiri::XML::Searchable#css(*rules, [namespace-bindings, custom-pseudo-class])","text":"<p>Search this object for <a href=\"../CSS.html\"><code>CSS</code></a> <code>rules</code>. <code>rules</code> must be one or more <a href=\"../CSS.html\"><code>CSS</code></a> selectors. For example:</p><p>A hash of namespace bindings may be appended. For example:</p><p>\ud83d\udca1 Custom <a href=\"../CSS.html\"><code>CSS</code></a> pseudo classes may also be defined which are mapped to a custom <a href=\"XPath.html\"><code>XPath</code></a> function.  To define custom pseudo classes, create a class and implement the custom pseudo class you want defined. The first argument to the method will be the matching context <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. For example:</p><p>\ud83d\udca1 Some <a href=\"XPath.html\"><code>XPath</code></a> syntax is supported in <a href=\"../CSS.html\"><code>CSS</code></a> queries. For example, to query for an attribute:</p><p>\ud83d\udca1 Array-like syntax is supported in <a href=\"../CSS.html\"><code>CSS</code></a> queries as an alternative to using +:nth-child()+.</p><p>\u26a0 NOTE that indices are 1-based like <code>:nth-child</code> and not 0-based like Ruby Arrays. For example:</p><p>\u26a0 NOTE that the <a href=\"../CSS.html\"><code>CSS</code></a> query string is case-sensitive with regards to your document type. <a href=\"../HTML4.html\"><code>HTML</code></a> tags will match only lowercase <a href=\"../CSS.html\"><code>CSS</code></a> queries, so if you search for \u201cH1\u201d in an <a href=\"../HTML4.html\"><code>HTML</code></a> document, you\u2019ll never find anything. However, \u201cH1\u201d might be found in an <a href=\"../XML.html\"><code>XML</code></a> document, where tags names are case-sensitive (e.g., \u201cH1\u201d is distinct from \u201ch1\u201d).</p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-css"},{"title":"module Nokogiri::XML::Searchable#search(*paths, [namespace-bindings, xpath-variable-bindings, custom-handler-class])","text":"<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> or <a href=\"../CSS.html\"><code>CSS</code></a> queries:</p><p>A hash of namespace bindings may be appended:</p><p>For <a href=\"XPath.html\"><code>XPath</code></a> queries, a hash of variable bindings may also be appended to the namespace bindings. For example:</p><p>\ud83d\udca1 Custom <a href=\"XPath.html\"><code>XPath</code></a> functions and <a href=\"../CSS.html\"><code>CSS</code></a> pseudo-selectors may also be defined. To define custom functions create a class and implement the function you want to define, which will be in the \u2018nokogiri` namespace in <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>The first argument to the method will be the current matching <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. Note that this class may appear anywhere in the argument list. For example:</p><p>See <a href=\"Searchable.html#method-i-xpath\"><code>Searchable#xpath</code></a> and <a href=\"Searchable.html#method-i-css\"><code>Searchable#css</code></a> for further usage help.</p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-search"},{"title":"module Nokogiri::XML::Searchable#xpath(*paths, [namespace-bindings, variable-bindings, custom-handler-class])","text":"<p>Search this node for <a href=\"XPath.html\"><code>XPath</code></a> <code>paths</code>. <code>paths</code> must be one or more <a href=\"XPath.html\"><code>XPath</code></a> queries.</p><p>A hash of namespace bindings may be appended. For example:</p><p>A hash of variable bindings may also be appended to the namespace bindings. For example:</p><p>\ud83d\udca1 Custom <a href=\"XPath.html\"><code>XPath</code></a> functions may also be defined. To define custom functions create a class and implement the function you want to define, which will be in the \u2018nokogiri` namespace.</p><p>The first argument to the method will be the current matching <a href=\"NodeSet.html\"><code>NodeSet</code></a>. Any other arguments are ones that you pass in. Note that this class may appear anywhere in the argument list. For example:</p>","location":"rdoc/Nokogiri/XML/Searchable.html#method-i-xpath"},{"title":"class Nokogiri::XML::SyntaxError","text":"<section class=\"description\">\n<p>The <a href=\"SyntaxError.html\"><code>XML::SyntaxError</code></a> is raised on parse errors</p>\n<p>This class provides information about <a href=\"../XML.html\"><code>XML</code></a> SyntaxErrors.  These exceptions are typically stored on <a href=\"Document.html#attribute-i-errors\"><code>Nokogiri::XML::Document#errors</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/XML/SyntaxError.html"},{"title":"class Nokogiri::XML::SyntaxError#code","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-code"},{"title":"class Nokogiri::XML::SyntaxError#column","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-column"},{"title":"class Nokogiri::XML::SyntaxError#domain","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-domain"},{"title":"class Nokogiri::XML::SyntaxError#file","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-file"},{"title":"class Nokogiri::XML::SyntaxError#int1","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-int1"},{"title":"class Nokogiri::XML::SyntaxError#level","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-level"},{"title":"class Nokogiri::XML::SyntaxError#line","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-line"},{"title":"class Nokogiri::XML::SyntaxError#path","text":"<p>The <a href=\"XPath.html\"><code>XPath</code></a> path of the node that caused the error when validating a \u2018Nokogiri::XML::Document`.</p><p>This attribute will only be non-nil when the error is emitted by \u2018Schema#validate` on <a href=\"Document.html\"><code>Document</code></a> objects. It will return `nil` for DOM parsing errors and for errors emitted during <a href=\"Schema.html\"><code>Schema</code></a> validation of files.</p><p>\u26a0 \u2018#path` is not supported on JRuby, where it will always return `nil`.</p>","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-path"},{"title":"class Nokogiri::XML::SyntaxError#str1","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-str1"},{"title":"class Nokogiri::XML::SyntaxError#str2","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-str2"},{"title":"class Nokogiri::XML::SyntaxError#str3","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#attribute-i-str3"},{"title":"class Nokogiri::XML::SyntaxError.aggregate(errors)","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#method-c-aggregate"},{"title":"class Nokogiri::XML::SyntaxError#error?()","text":"<p>return true if this is an error</p>","location":"rdoc/Nokogiri/XML/SyntaxError.html#method-i-error-3F"},{"title":"class Nokogiri::XML::SyntaxError#fatal?()","text":"<p>return true if this error is fatal</p>","location":"rdoc/Nokogiri/XML/SyntaxError.html#method-i-fatal-3F"},{"title":"class Nokogiri::XML::SyntaxError#none?()","text":"<p>return true if this is a non error</p>","location":"rdoc/Nokogiri/XML/SyntaxError.html#method-i-none-3F"},{"title":"class Nokogiri::XML::SyntaxError#to_s()","text":"","location":"rdoc/Nokogiri/XML/SyntaxError.html#method-i-to_s"},{"title":"class Nokogiri::XML::SyntaxError#warning?()","text":"<p>return true if this is a warning</p>","location":"rdoc/Nokogiri/XML/SyntaxError.html#method-i-warning-3F"},{"title":"class Nokogiri::XML::Text","text":"<section class=\"description\">\n<p>Wraps <a href=\"Text.html\"><code>Text</code></a> nodes.</p>\n</section>","location":"rdoc/Nokogiri/XML/Text.html"},{"title":"class Nokogiri::XML::Text.new(content, document)","text":"<p>Create a new <a href=\"Text.html\"><code>Text</code></a> element on the <code>document</code> with <code>content</code></p>","location":"rdoc/Nokogiri/XML/Text.html#method-c-new"},{"title":"class Nokogiri::XML::Text#content=(string)","text":"","location":"rdoc/Nokogiri/XML/Text.html#method-i-content-3D"},{"title":"module Nokogiri::XML::XPath","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/XPath.html"},{"title":"class Nokogiri::XML::XPathContext","text":"<section class=\"description\">\n<p><a href=\"XPathContext.html\"><code>XPathContext</code></a> is the entry point for searching a <code>Document</code> by using <a href=\"XPath.html\"><code>XPath</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/XML/XPathContext.html"},{"title":"class Nokogiri::XML::XPathContext.new(node)","text":"<p>Create a new <a href=\"XPathContext.html\"><code>XPathContext</code></a> with <code>node</code> as the context node.</p>","location":"rdoc/Nokogiri/XML/XPathContext.html#method-c-new"},{"title":"class Nokogiri::XML::XPathContext#evaluate(search_path, handler = nil) \u2192 Object","text":"<p>Evaluate the <code>search_path</code> query.</p><p>an object of the appropriate type for the query, which could be <code>NodeSet</code>, a <code>String</code>,</p><p>a <code>Float</code>, or a boolean.</p>","location":"rdoc/Nokogiri/XML/XPathContext.html#method-i-evaluate"},{"title":"class Nokogiri::XML::XPathContext#register_namespaces(namespaces)","text":"<p>Register namespaces in <code>namespaces</code></p>","location":"rdoc/Nokogiri/XML/XPathContext.html#method-i-register_namespaces"},{"title":"class Nokogiri::XML::XPathContext#register_ns(prefix, uri) \u2192 Nokogiri::XML::XPathContext","text":"<p>Register the namespace with <code>prefix</code> and <code>uri</code> for use in future queries.</p><p><code>self</code></p>","location":"rdoc/Nokogiri/XML/XPathContext.html#method-i-register_ns"},{"title":"class Nokogiri::XML::XPathContext#register_variable(name, value) \u2192 Nokogiri::XML::XPathContext","text":"<p>Register the variable <code>name</code> with <code>value</code> for use in future queries.</p><p><code>self</code></p>","location":"rdoc/Nokogiri/XML/XPathContext.html#method-i-register_variable"},{"title":"class Nokogiri::XML::Node::SaveOptions","text":"<section class=\"description\">\n<p>Save options for serializing nodes. See the method group entitled <a href=\"../Node.html#class-Nokogiri::XML::Node-label-Serialization+and+Generating+Output\">Serialization and Generating Output at <code>Node</code></a> for usage.</p>\n</section>","location":"rdoc/Nokogiri/XML/Node/SaveOptions.html"},{"title":"class Nokogiri::XML::Node::SaveOptions#options","text":"<p>Integer representation of the <a href=\"SaveOptions.html\"><code>SaveOptions</code></a></p>","location":"rdoc/Nokogiri/XML/Node/SaveOptions.html#attribute-i-options"},{"title":"class Nokogiri::XML::Node::SaveOptions#to_i","text":"<p>Integer representation of the <a href=\"SaveOptions.html\"><code>SaveOptions</code></a></p>","location":"rdoc/Nokogiri/XML/Node/SaveOptions.html#attribute-i-to_i"},{"title":"class Nokogiri::XML::Node::SaveOptions.new(options = 0)","text":"<p>Create a new <a href=\"SaveOptions.html\"><code>SaveOptions</code></a> object with <code>options</code></p>","location":"rdoc/Nokogiri/XML/Node/SaveOptions.html#method-c-new"},{"title":"class Nokogiri::XML::Node::SaveOptions#inspect()","text":"","location":"rdoc/Nokogiri/XML/Node/SaveOptions.html#method-i-inspect"},{"title":"module Nokogiri::XML::PP::CharacterData","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/PP/CharacterData.html"},{"title":"module Nokogiri::XML::PP::Node","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/PP/Node.html"},{"title":"class Nokogiri::XML::SAX::Document","text":"<section class=\"description\">\n<p>The <a href=\"Document.html\"><code>SAX::Document</code></a> class is used for registering types of events you are interested in handling. All of the methods on this class are available as possible events while parsing an XML document. To register for any particular event, subclass this class and implement the methods you are interested in knowing about.</p>\n<p>To only be notified about start and end element events, write a class like this:</p>\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyHandler</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">start_element</span> <span class=\"ruby-identifier\">name</span>, <span class=\"ruby-identifier\">attrs</span> = []\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">\"#{name} started!\"</span>\n  <span class=\"ruby-keyword\">end</span>\n\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">end_element</span> <span class=\"ruby-identifier\">name</span>\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">\"#{name} ended\"</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>You can use this event handler for any SAX-style parser included with <a href=\"../../../Nokogiri.html\"><code>Nokogiri</code></a>.</p>\n<p>See also:</p>\n<ul>\n<li>\n<p><a href=\"../SAX.html\"><code>Nokogiri::XML::SAX</code></a></p>\n</li>\n<li>\n<p><a href=\"../../HTML4/SAX.html\"><code>Nokogiri::HTML4::SAX</code></a></p>\n</li>\n</ul>\n<h3 id=\"class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling<span><a href=\"#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">\u00b6</a> <a href=\"#top\">\u2191</a></span>\n</h3>\n<p>\u26a0 Entity handling is complicated in a <a href=\"../SAX.html\"><code>SAX</code></a> parser! Please read this section carefully if you\u2019re not getting the behavior you expect.</p>\n<p>Entities will be reported to the user via callbacks to <a href=\"Document.html#method-i-characters\"><code>#characters</code></a>, to <a href=\"Document.html#method-i-reference\"><code>#reference</code></a>, or possibly to both. The behavior is determined by a combination of <em>entity type</em> and the value of <a href=\"ParserContext.html#method-i-replace_entities\"><code>ParserContext#replace_entities</code></a>. (Recall that the default value of <a href=\"ParserContext.html#method-i-replace_entities\"><code>ParserContext#replace_entities</code></a> is <code>false</code>.)</p>\n<p>\u26a0 <strong>It is UNSAFE to set ParserContext#replace_entities to <code>true</code></strong> when parsing untrusted documents.</p>\n<p>\ud83d\udca1 For more information on entity types, see <a href=\"https://en.wikipedia.org/wiki/Document_type_definition#Entity_declarations\">Wikipedia\u2019s page on DTDs</a>.</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>Entity type</th>\n<th><a href=\"Document.html#method-i-characters\"><code>#characters</code></a></th>\n<th><a href=\"Document.html#method-i-reference\"><code>#reference</code></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Char ref (e.g., <code>&amp;#146;</code>)</td>\n<td>always</td>\n<td>never</td>\n</tr>\n<tr>\n<td>Predefined (e.g., <code>&amp;amp;</code>)</td>\n<td>always</td>\n<td>never</td>\n</tr>\n<tr>\n<td>Undeclared \u2020</td>\n<td>never</td>\n<td><code>#replace_entities == false</code></td>\n</tr>\n<tr>\n<td>Internal</td>\n<td>always</td>\n<td><code>#replace_entities == false</code></td>\n</tr>\n<tr>\n<td>External \u2020</td>\n<td><code>#replace_entities == true</code></td>\n<td><code>#replace_entities == false</code></td>\n</tr>\n</tbody>\n</table>\n<p>\u00a0</p>\n<p>\u2020 In the case where the replacement text for the entity is unknown (e.g., an undeclared entity or an external entity that could not be resolved because of network issues), then the replacement text will not be reported. If <a href=\"ParserContext.html#method-i-replace_entities\"><code>ParserContext#replace_entities</code></a> is <code>true</code>, this means the <a href=\"Document.html#method-i-characters\"><code>#characters</code></a> callback will not be invoked. If <a href=\"ParserContext.html#method-i-replace_entities\"><code>ParserContext#replace_entities</code></a> is <code>false</code>, then the <a href=\"Document.html#method-i-reference\"><code>#reference</code></a> callback will be invoked, but with <code>nil</code> for the <code>content</code> argument.</p>\n</section>","location":"rdoc/Nokogiri/XML/SAX/Document.html"},{"title":"class Nokogiri::XML::SAX::Document#cdata_block(string)","text":"<p>Called when cdata blocks are found</p><p><code>string</code> contains the cdata content</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-cdata_block"},{"title":"class Nokogiri::XML::SAX::Document#characters(string)","text":"<p>Called when character data is parsed, and for parsed entities when <a href=\"ParserContext.html#method-i-replace_entities\"><code>ParserContext#replace_entities</code></a> is <code>true</code>.</p><p><code>string</code> contains the character data or entity replacement text</p><p>\u26a0 Please see <a href=\"Document.html#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling at <code>Document</code></a> for important information about how entities are handled.</p><p>\u26a0 This method might be called multiple times for a contiguous string of characters.</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-characters"},{"title":"class Nokogiri::XML::SAX::Document#comment(string)","text":"<p>Called when comments are encountered</p><p><code>string</code> contains the comment data</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-comment"},{"title":"class Nokogiri::XML::SAX::Document#end_document()","text":"<p>Called when document ends parsing.</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-end_document"},{"title":"class Nokogiri::XML::SAX::Document#end_element(name)","text":"<p>Called at the end of an element.</p><p><code>name</code> (String) the name of the element being closed</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-end_element"},{"title":"class Nokogiri::XML::SAX::Document#end_element_namespace(name, prefix = nil, uri = nil)","text":"<p>Called at the end of an element.</p><p><code>name</code> (String) is the name of the element</p><p><code>prefix</code> (String, nil) is the namespace prefix for the element</p><p><code>uri</code> (String, nil) is the associated URI for the element\u2019s namespace</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-end_element_namespace"},{"title":"class Nokogiri::XML::SAX::Document#error(string)","text":"<p>Called on document errors</p><p><code>string</code> contains the error</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-error"},{"title":"class Nokogiri::XML::SAX::Document#processing_instruction(name, content)","text":"<p>Called when processing instructions are found</p><p><code>name</code> is the target of the instruction</p><p><code>content</code> is the value of the instruction</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-processing_instruction"},{"title":"class Nokogiri::XML::SAX::Document#reference(name, content)","text":"<p>Called when a parsed entity is referenced and not replaced.</p><p><code>name</code> (String) is the name of the entity</p><p><code>content</code> (String, nil) is the replacement text for the entity, if known</p><p>\u26a0 Please see <a href=\"Document.html#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling at <code>Document</code></a> for important information about how entities are handled.</p><p>\u26a0 An internal entity may result in a call to both <a href=\"Document.html#method-i-characters\"><code>#characters</code></a> and <a href=\"Document.html#method-i-reference\"><code>#reference</code></a>.</p><p>Since v1.17.0</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-reference"},{"title":"class Nokogiri::XML::SAX::Document#start_document()","text":"<p>Called when document starts parsing.</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-start_document"},{"title":"class Nokogiri::XML::SAX::Document#start_element(name, attrs = [])","text":"<p>Called at the beginning of an element.</p><p><code>name</code> (String) the name of the element</p><p><code>attrs</code> (Array&lt;Array&lt;String&gt;&gt;) an assoc list of namespace declarations and attributes, e.g.:</p><p>\ud83d\udca1If you\u2019re dealing with <a href=\"../../XML.html\"><code>XML</code></a> and need to handle namespaces, use the <a href=\"Document.html#method-i-start_element_namespace\"><code>#start_element_namespace</code></a> method instead.</p><p>Note that the element namespace and any attribute namespaces are not provided, and so any namespaced elements or attributes will be returned as strings including the prefix:</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-start_element"},{"title":"class Nokogiri::XML::SAX::Document#start_element_namespace(name, attrs = [], prefix = nil, uri = nil, ns = [])","text":"<p>Called at the beginning of an element.</p><p><code>name</code> (String) is the name of the element</p><p><code>attrs</code> (Array&lt;Attribute&gt;) is an array of structs with the following properties:</p><p><code>localname</code> (String) the local name of the attribute</p><p><code>value</code> (String) the value of the attribute</p><p><code>prefix</code> (String, nil) the namespace prefix of the attribute</p><p><code>uri</code> (String, nil) the namespace URI of the attribute</p><p><code>prefix</code> (String, nil) is the namespace prefix for the element</p><p><code>uri</code> (String, nil) is the associated URI for the element\u2019s namespace</p><p><code>ns</code> (Array&lt;Array&lt;String, String&gt;&gt;) is an assoc list of namespace declarations on the element</p><p>\ud83d\udca1If you\u2019re dealing with <a href=\"../../HTML4.html\"><code>HTML</code></a> or don\u2019t care about namespaces, try <a href=\"Document.html#method-i-start_element\"><code>#start_element</code></a> instead.</p><p>it \u201cstart_elements_namespace is called with namespaced attributes\u201d do</p><p>end</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-start_element_namespace"},{"title":"class Nokogiri::XML::SAX::Document#warning(string)","text":"<p>Called on document warnings</p><p><code>string</code> contains the warning</p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-warning"},{"title":"class Nokogiri::XML::SAX::Document#xmldecl(version, encoding, standalone)","text":"<p>Called when an XML declaration is parsed.</p><p><code>version</code> (String) the version attribute</p><p><code>encoding</code> (String, nil) the encoding of the document if present, else <code>nil</code></p><p><code>standalone</code> (\u201cyes\u201d, \u201cno\u201d, nil) the standalone attribute if present, else <code>nil</code></p>","location":"rdoc/Nokogiri/XML/SAX/Document.html#method-i-xmldecl"},{"title":"class Nokogiri::XML::SAX::Parser","text":"<section class=\"description\">\n<p>This parser is a <a href=\"../SAX.html\"><code>SAX</code></a> style parser that reads its input as it deems necessary. The parser takes a <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a>, an optional encoding, then given an <a href=\"../../XML.html\"><code>XML</code></a> input, sends messages to the <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a>.</p>\n<p>Here is an example of using this parser:</p>\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Create a subclass of Nokogiri::XML::SAX::Document and implement</span>\n<span class=\"ruby-comment\"># the events we care about:</span>\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyHandler</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">start_element</span> <span class=\"ruby-identifier\">name</span>, <span class=\"ruby-identifier\">attrs</span> = []\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">\"starting: #{name}\"</span>\n  <span class=\"ruby-keyword\">end</span>\n\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">end_element</span> <span class=\"ruby-identifier\">name</span>\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">\"ending: #{name}\"</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">parser</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">MyHandler</span>.<span class=\"ruby-identifier\">new</span>)\n\n<span class=\"ruby-comment\"># Hand an IO object to the parser, which will read the XML from the IO.</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-identifier\">path_to_xml</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">f</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">parser</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">f</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>For more information about SAX parsers, see <a href=\"../SAX.html\"><code>Nokogiri::XML::SAX</code></a>.</p>\n<p>Also see <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a> for the available events.</p>\n<p>For HTML documents, use the subclass <a href=\"../../HTML4/SAX/Parser.html\"><code>Nokogiri::HTML4::SAX::Parser</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/XML/SAX/Parser.html"},{"title":"class Nokogiri::XML::SAX::Parser#document","text":"<p>The <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a> where events will be sent.</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#attribute-i-document"},{"title":"class Nokogiri::XML::SAX::Parser#encoding","text":"<p>The encoding beings used for this document.</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#attribute-i-encoding"},{"title":"class Nokogiri::XML::SAX::Parser.new \u21d2 SAX::Parser","text":"<p>Create a new <a href=\"Parser.html\"><code>Parser</code></a>.</p><p><code>handler</code> (optional <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a>) The document that will receive events. Will create a new <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a> if not given, which is accessible through the <a href=\"Parser.html#attribute-i-document\"><code>#document</code></a> attribute.</p><p><code>encoding</code> (optional Encoding, String, nil) An Encoding or encoding name to use when parsing the input. (default <code>nil</code> for auto-detection)</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#method-c-new"},{"title":"class Nokogiri::XML::SAX::Parser#parse(input) { |parser_context| ... }","text":"<p>Parse the input, sending events to the <a href=\"Document.html\"><code>SAX::Document</code></a> at <a href=\"Parser.html#attribute-i-document\"><code>#document</code></a>.</p><p><code>input</code> (String, IO) The input to parse.</p><p>If <code>input</code> quacks like a readable IO object, this method forwards to <a href=\"Parser.html#method-i-parse_io\"><code>Parser.parse_io</code></a>, otherwise it forwards to <a href=\"Parser.html#method-i-parse_memory\"><code>Parser.parse_memory</code></a>.</p><p>If a block is given, the underlying <a href=\"ParserContext.html\"><code>ParserContext</code></a> object will be yielded. This can be used to set options on the parser context before parsing begins.</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#method-i-parse"},{"title":"class Nokogiri::XML::SAX::Parser#parse_file(filename) { |parser_context| ... }","text":"<p>Parse a file.</p><p><code>filename</code> (String) The path to the file to be parsed.</p><p><code>encoding</code> (optional Encoding, String, nil) An Encoding or encoding name to use when parsing the input, or <code>nil</code> for auto-detection. (default <a href=\"Parser.html#attribute-i-encoding\"><code>#encoding</code></a>)</p><p>If a block is given, the underlying <a href=\"ParserContext.html\"><code>ParserContext</code></a> object will be yielded. This can be used to set options on the parser context before parsing begins.</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#method-i-parse_file"},{"title":"class Nokogiri::XML::SAX::Parser#parse_io(io) { |parser_context| ... }","text":"<p>Parse an input stream.</p><p><code>io</code> (IO) The readable IO object from which to read input</p><p><code>encoding</code> (optional Encoding, String, nil) An Encoding or encoding name to use when parsing the input, or <code>nil</code> for auto-detection. (default <a href=\"Parser.html#attribute-i-encoding\"><code>#encoding</code></a>)</p><p>If a block is given, the underlying <a href=\"ParserContext.html\"><code>ParserContext</code></a> object will be yielded. This can be used to set options on the parser context before parsing begins.</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#method-i-parse_io"},{"title":"class Nokogiri::XML::SAX::Parser#parse_memory(input) { |parser_context| ... }","text":"<p>Parse an input string.</p><p><code>input</code> (String) The input string to be parsed.</p><p><code>encoding</code> (optional Encoding, String, nil) An Encoding or encoding name to use when parsing the input, or <code>nil</code> for auto-detection. (default <a href=\"Parser.html#attribute-i-encoding\"><code>#encoding</code></a>)</p><p>If a block is given, the underlying <a href=\"ParserContext.html\"><code>ParserContext</code></a> object will be yielded. This can be used to set options on the parser context before parsing begins.</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#method-i-parse_memory"},{"title":"class Nokogiri::XML::SAX::Parser#related_class(class_name) \u2192 Class","text":"<p>Find a class constant within the</p><p>Some examples:</p><p>Note this will also work for subclasses that follow the same convention, e.g.:</p><p>And even if it\u2019s a subclass, this will iterate through the superclasses:</p>","location":"rdoc/Nokogiri/XML/SAX/Parser.html#method-i-related_class"},{"title":"class Nokogiri::XML::SAX::ParserContext","text":"<section class=\"description\">\n<p>Context object to invoke the <a href=\"../../XML.html\"><code>XML</code></a> <a href=\"../SAX.html\"><code>SAX</code></a> parser on the <a href=\"Document.html\"><code>SAX::Document</code></a> handler.</p>\n<p>\ud83d\udca1 This class is usually not instantiated by the user. Use <a href=\"Parser.html\"><code>Nokogiri::XML::SAX::Parser</code></a> instead.</p>\n</section>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html"},{"title":"class Nokogiri::XML::SAX::ParserContext.file(path)","text":"<p>Create a parser context for the file at <code>path</code>.</p><p><code>path</code> (String) The path to the input file</p><p><code>encoding</code> (optional) (Encoding, String) The <code>Encoding</code> to use, or the name of an encoding to use (default <code>nil</code>, encoding will be autodetected)</p><p><a href=\"ParserContext.html\"><code>Nokogiri::XML::SAX::ParserContext</code></a></p><p>\ud83d\udca1 Calling this method directly is discouraged. Use <a href=\"Parser.html#method-i-parse_file\"><code>Nokogiri::XML::SAX::Parser.parse_file</code></a> which is more convenient for most use cases.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-c-file"},{"title":"class Nokogiri::XML::SAX::ParserContext.io(input)","text":"<p>Create a parser context for an <code>input</code> IO which will assume <code>encoding</code></p><p><code>io</code> (IO) The readable IO object from which to read input</p><p><code>encoding</code> (optional) (Encoding) The <code>Encoding</code> to use, or the name of an encoding to use (default <code>nil</code>, encoding will be autodetected)</p><p><a href=\"ParserContext.html\"><code>Nokogiri::XML::SAX::ParserContext</code></a></p><p>\ud83d\udca1 Calling this method directly is discouraged. Use <a href=\"Parser.html\"><code>Nokogiri::XML::SAX::Parser</code></a> parse methods which are more convenient for most use cases.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-c-io"},{"title":"class Nokogiri::XML::SAX::ParserContext.memory(input)","text":"<p>Create a parser context for the <code>input</code> String.</p><p><code>input</code> (String) The input string to be parsed.</p><p><code>encoding</code> (optional) (Encoding, String) The <code>Encoding</code> to use, or the name of an encoding to use (default <code>nil</code>, encoding will be autodetected)</p><p><a href=\"ParserContext.html\"><code>Nokogiri::XML::SAX::ParserContext</code></a></p><p>\ud83d\udca1 Calling this method directly is discouraged. Use <a href=\"Parser.html\"><code>Nokogiri::XML::SAX::Parser</code></a> parse methods which are more convenient for most use cases.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-c-memory"},{"title":"class Nokogiri::XML::SAX::ParserContext.new(input)","text":"<p>Create a parser context for an IO or a String. This is a shorthand method for <a href=\"ParserContext.html#method-c-io\"><code>ParserContext.io</code></a> and <a href=\"ParserContext.html#method-c-memory\"><code>ParserContext.memory</code></a>.</p><p><code>input</code> (IO, String) A String or a readable IO object</p><p><code>encoding</code> (optional) (Encoding) The <code>Encoding</code> to use, or the name of an encoding to use (default <code>nil</code>, encoding will be autodetected)</p><p>If <code>input</code> quacks like a readable IO object, this method forwards to <a href=\"ParserContext.html#method-c-io\"><code>ParserContext.io</code></a>, otherwise it forwards to <a href=\"ParserContext.html#method-c-memory\"><code>ParserContext.memory</code></a>.</p><p><a href=\"ParserContext.html\"><code>Nokogiri::XML::SAX::ParserContext</code></a></p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-c-new"},{"title":"class Nokogiri::XML::SAX::ParserContext#column","text":"<p>(Integer) the column number of the column being currently parsed.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-column"},{"title":"class Nokogiri::XML::SAX::ParserContext#line","text":"<p>(Integer) the line number of the line being currently parsed.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-line"},{"title":"class Nokogiri::XML::SAX::ParserContext#parse_with(sax_handler)","text":"<p>Use <code>sax_handler</code> and parse the current document</p><p>\ud83d\udca1 Calling this method directly is discouraged. Use <a href=\"Parser.html\"><code>Nokogiri::XML::SAX::Parser</code></a> methods which are more convenient for most use cases.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-parse_with"},{"title":"class Nokogiri::XML::SAX::ParserContext#recovery","text":"<p>Inspect whether this parser will recover from parsing errors. If set to <code>true</code>, the parser will invoke the <a href=\"Document.html#method-i-error\"><code>SAX::Document#error</code></a> callback and continue processing the file. If set to <code>false</code>, the parser will stop processing the file on the first parsing error.</p><p>(Boolean) Whether this parser will recover from parsing errors.</p><p>Default is <code>false</code> for <a href=\"../../XML.html\"><code>XML</code></a> and <code>true</code> for <a href=\"../../HTML4.html\"><code>HTML</code></a>.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-recovery"},{"title":"class Nokogiri::XML::SAX::ParserContext#recovery=(value)","text":"<p>Controls whether this parser will recover from parsing errors. If set to <code>true</code>, the parser will invoke the <a href=\"Document.html#method-i-error\"><code>SAX::Document#error</code></a> callback and continue processing the file. If set to <code>false</code>, the parser will stop processing the file on the first parsing error.</p><p><code>value</code> (Boolean) Recover from parsing errors. (Default is <code>false</code> for <a href=\"../../XML.html\"><code>XML</code></a> and <code>true</code> for <a href=\"../../HTML4.html\"><code>HTML</code></a>.)</p><p>(Boolean) The passed <code>value</code>.</p><p>Because this class is generally not instantiated directly, you would typically set this option via the block argument to <a href=\"Parser.html#method-i-parse\"><code>Nokogiri::XML::SAX::Parser.parse</code></a> et al:</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-recovery-3D"},{"title":"class Nokogiri::XML::SAX::ParserContext#replace_entities","text":"<p>See <a href=\"Document.html#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling at <code>Document</code></a> for an explanation of the behavior controlled by this flag.</p><p>(Boolean) Value of the parse option. (Default <code>false</code>)</p><p>This option is perhaps misnamed by the libxml2 author, since it controls resolution and not replacement.</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities"},{"title":"class Nokogiri::XML::SAX::ParserContext#replace_entities=(value)","text":"<p>See <a href=\"Document.html#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling at <code>Document</code></a> for an explanation of the behavior controlled by this flag.</p><p><code>value</code> (Boolean) Whether external parsed entities will be resolved.</p><p>\u26a0 <strong>It is UNSAFE to set this option to <code>true</code></strong> when parsing untrusted documents. The option defaults to <code>false</code> for this reason.</p><p>This option is perhaps misnamed by the libxml2 author, since it controls resolution and not replacement.</p><p>Because this class is generally not instantiated directly, you would typically set this option via the block argument to <a href=\"Parser.html#method-i-parse\"><code>Nokogiri::XML::SAX::Parser.parse</code></a> et al:</p>","location":"rdoc/Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities-3D"},{"title":"class Nokogiri::XML::SAX::PushParser","text":"<section class=\"description\">\n<p><a href=\"PushParser.html\"><code>PushParser</code></a> can parse a document that is fed to it manually.  It must be given a <a href=\"Document.html\"><code>SAX::Document</code></a> object which will be called with <a href=\"../SAX.html\"><code>SAX</code></a> events as the document is being parsed.</p>\n<p>Calling <a href=\"PushParser.html#method-i-3C-3C\"><code>PushParser#&lt;&lt;</code></a> writes <a href=\"../../XML.html\"><code>XML</code></a> to the parser, calling any <a href=\"../SAX.html\"><code>SAX</code></a> callbacks it can.</p>\n<p><a href=\"PushParser.html#method-i-finish\"><code>PushParser#finish</code></a> tells the parser that the document is finished and calls the end_document <a href=\"../SAX.html\"><code>SAX</code></a> method.</p>\n<p>Example:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">parser</span> = <span class=\"ruby-constant\">PushParser</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SAX</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>) {\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">start_document</span>\n    <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">\"start document called\"</span>\n  <span class=\"ruby-keyword\">end</span>\n}.<span class=\"ruby-identifier\">new</span>)\n<span class=\"ruby-identifier\">parser</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">\"&lt;div&gt;hello&lt;\"</span>\n<span class=\"ruby-identifier\">parser</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">\"/div&gt;\"</span>\n<span class=\"ruby-identifier\">parser</span>.<span class=\"ruby-identifier\">finish</span>\n</pre>\n</section>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html"},{"title":"class Nokogiri::XML::SAX::PushParser#document","text":"<p>The <a href=\"Document.html\"><code>Nokogiri::XML::SAX::Document</code></a> on which the <a href=\"PushParser.html\"><code>PushParser</code></a> will be operating</p>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#attribute-i-document"},{"title":"class Nokogiri::XML::SAX::PushParser.new(doc = XML::SAX::Document.new, file_name = nil, encoding = \"UTF-8\")","text":"<p>Create a new <a href=\"PushParser.html\"><code>PushParser</code></a> with <code>doc</code> as the <a href=\"../SAX.html\"><code>SAX</code></a> <a href=\"Document.html\"><code>Document</code></a>, providing an optional <code>file_name</code> and <code>encoding</code></p>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-c-new"},{"title":"class Nokogiri::XML::SAX::PushParser#<<(chunk, last_chunk = false)","text":"","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-3C-3C"},{"title":"class Nokogiri::XML::SAX::PushParser#finish()","text":"<p>Finish the parsing.  This method is only necessary for <a href=\"Document.html#method-i-end_document\"><code>Nokogiri::XML::SAX::Document#end_document</code></a> to be called.</p><p>\u26a0 Note that empty documents are treated as an error when using the libxml2-based implementation (CRuby), but are fine when using the Xerces-based implementation (JRuby).</p>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-finish"},{"title":"class Nokogiri::XML::SAX::PushParser#options()","text":"","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-options"},{"title":"class Nokogiri::XML::SAX::PushParser#options=(p1)","text":"","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-options-3D"},{"title":"class Nokogiri::XML::SAX::PushParser#replace_entities","text":"<p>See <a href=\"Document.html#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling at <code>Document</code></a> for an explanation of the behavior controlled by this flag.</p><p>(Boolean) Value of the parse option. (Default <code>false</code>)</p><p>This option is perhaps misnamed by the libxml2 author, since it controls resolution and not replacement.</p>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-replace_entities"},{"title":"class Nokogiri::XML::SAX::PushParser#replace_entities=(value)","text":"<p>See <a href=\"Document.html#class-Nokogiri::XML::SAX::Document-label-Entity+Handling\">Entity Handling at <code>Document</code></a> for an explanation of the behavior controlled by this flag.</p><p><code>value</code> (Boolean) Whether external parsed entities will be resolved.</p><p>\u26a0 <strong>It is UNSAFE to set this option to <code>true</code></strong> when parsing untrusted documents. The option defaults to <code>false</code> for this reason.</p><p>This option is perhaps misnamed by the libxml2 author, since it controls resolution and not replacement.</p>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-replace_entities-3D"},{"title":"class Nokogiri::XML::SAX::PushParser#write(chunk, last_chunk = false)","text":"<p>Write a <code>chunk</code> of <a href=\"../../XML.html\"><code>XML</code></a> to the <a href=\"PushParser.html\"><code>PushParser</code></a>.  Any callback methods that can be called will be called immediately.</p>","location":"rdoc/Nokogiri/XML/SAX/PushParser.html#method-i-write"},{"title":"class Nokogiri::XML::SAX::Parser::Attribute","text":"<section class=\"description\">\n<p>Structure used for marshalling attributes for some callbacks in <a href=\"../Document.html\"><code>XML::SAX::Document</code></a>.</p>\n</section>","location":"rdoc/Nokogiri/XML/SAX/Parser/Attribute.html"},{"title":"class Nokogiri::XML::XPath::SyntaxError","text":"<section class=\"description\">\n</section>","location":"rdoc/Nokogiri/XML/XPath/SyntaxError.html"},{"title":"class Nokogiri::XML::XPath::SyntaxError#to_s()","text":"","location":"rdoc/Nokogiri/XML/XPath/SyntaxError.html#method-i-to_s"},{"title":"class Nokogiri::XSLT::Stylesheet","text":"<section class=\"description\">\n<p>A <a href=\"Stylesheet.html\"><code>Stylesheet</code></a> represents an <a href=\"../XSLT.html\"><code>XSLT</code></a> <a href=\"Stylesheet.html\"><code>Stylesheet</code></a> object.  <a href=\"Stylesheet.html\"><code>Stylesheet</code></a> creation is done through <a href=\"../../Nokogiri.html#method-c-XSLT\"><code>Nokogiri.XSLT</code></a>.  Here is an example of transforming an <a href=\"../XML/Document.html\"><code>XML::Document</code></a> with a Stylesheet:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>   = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-string\">'some_file.xml'</span>))\n<span class=\"ruby-identifier\">xslt</span>  = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XSLT</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-string\">'some_transformer.xslt'</span>))\n\n<span class=\"ruby-identifier\">xslt</span>.<span class=\"ruby-identifier\">transform</span>(<span class=\"ruby-identifier\">doc</span>) <span class=\"ruby-comment\"># =&gt; Nokogiri::XML::Document</span>\n</pre>\n<p>Many <a href=\"../XSLT.html\"><code>XSLT</code></a> transformations include serialization behavior to emit a non-XML document. For these cases, please take care to invoke the <a href=\"Stylesheet.html#method-i-serialize\"><code>#serialize</code></a> method on the result of the transformation:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>   = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-string\">'some_file.xml'</span>))\n<span class=\"ruby-identifier\">xslt</span>  = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XSLT</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-string\">'some_transformer.xslt'</span>))\n<span class=\"ruby-identifier\">xslt</span>.<span class=\"ruby-identifier\">serialize</span>(<span class=\"ruby-identifier\">xslt</span>.<span class=\"ruby-identifier\">transform</span>(<span class=\"ruby-identifier\">doc</span>)) <span class=\"ruby-comment\"># =&gt; String</span>\n</pre>\n<p>or use the <a href=\"Stylesheet.html#method-i-apply_to\"><code>#apply_to</code></a> method, which is a shortcut for \u2018serialize(transform(document))`:</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>   = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-string\">'some_file.xml'</span>))\n<span class=\"ruby-identifier\">xslt</span>  = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XSLT</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-string\">'some_transformer.xslt'</span>))\n<span class=\"ruby-identifier\">xslt</span>.<span class=\"ruby-identifier\">apply_to</span>(<span class=\"ruby-identifier\">doc</span>) <span class=\"ruby-comment\"># =&gt; String</span>\n</pre>\n<p>See <a href=\"Stylesheet.html#method-i-transform\"><code>Nokogiri::XSLT::Stylesheet#transform</code></a> for more information and examples.</p>\n</section>","location":"rdoc/Nokogiri/XSLT/Stylesheet.html"},{"title":"class Nokogiri::XSLT::Stylesheet.parse_stylesheet_doc(document)","text":"<p>Parse an <a href=\"Stylesheet.html\"><code>XSLT::Stylesheet</code></a> from <code>document</code>.</p><p><code>document</code> (<a href=\"../XML/Document.html\"><code>Nokogiri::XML::Document</code></a>) the document to be parsed.</p><p><a href=\"Stylesheet.html\"><code>Nokogiri::XSLT::Stylesheet</code></a></p>","location":"rdoc/Nokogiri/XSLT/Stylesheet.html#method-c-parse_stylesheet_doc"},{"title":"class Nokogiri::XSLT::Stylesheet#apply_to(document, params = []) \u2192 String","text":"<p>Apply an <a href=\"../XSLT.html\"><code>XSLT</code></a> stylesheet to an <a href=\"../XML/Document.html\"><code>XML::Document</code></a> and serialize it properly. This method is equivalent to calling <a href=\"Stylesheet.html#method-i-serialize\"><code>#serialize</code></a> on the result of <a href=\"Stylesheet.html#method-i-transform\"><code>#transform</code></a>.</p><p><code>document</code> is an instance of <a href=\"../XML/Document.html\"><code>XML::Document</code></a> to transform</p><p><code>params</code> is an array of strings used as <a href=\"../XSLT.html\"><code>XSLT</code></a> parameters, passed into <a href=\"Stylesheet.html#method-i-transform\"><code>#transform</code></a></p><p>A string containing the serialized result of the transformation.</p><p>See <a href=\"Stylesheet.html#method-i-transform\"><code>Nokogiri::XSLT::Stylesheet#transform</code></a> for more information and examples.</p>","location":"rdoc/Nokogiri/XSLT/Stylesheet.html#method-i-apply_to"},{"title":"class Nokogiri::XSLT::Stylesheet#serialize(document)","text":"<p>Serialize <code>document</code> to an xml string, as specified by the <code>method</code> parameter in the <a href=\"Stylesheet.html\"><code>Stylesheet</code></a>.</p>","location":"rdoc/Nokogiri/XSLT/Stylesheet.html#method-i-serialize"},{"title":"class Nokogiri::XSLT::Stylesheet#transform(document)","text":"<p>Transform an <a href=\"../XML/Document.html\"><code>XML::Document</code></a> as defined by an <a href=\"Stylesheet.html\"><code>XSLT::Stylesheet</code></a>.</p><p><code>document</code> (<a href=\"../XML/Document.html\"><code>Nokogiri::XML::Document</code></a>) the document to be transformed.</p><p><code>params</code> (Hash, Array) strings used as <a href=\"../XSLT.html\"><code>XSLT</code></a> parameters.</p><p><a href=\"../XML/Document.html\"><code>Nokogiri::XML::Document</code></a></p><p><strong>Example</strong> of basic transformation:</p><p>\u26a0 Note that the <code>h1</code> element is empty because no param has been provided!</p><p><strong>Example</strong> of using an input parameter hash:</p><p>\u26a0 The title is populated, but note how we need to quote-escape the value.</p><p><strong>Example</strong> using the <a href=\"../XSLT.html#method-c-quote_params\"><code>XSLT.quote_params</code></a> helper method to safely quote-escape strings:</p><p><strong>Example</strong> using an array of <a href=\"../XSLT.html\"><code>XSLT</code></a> parameters</p><p>You can also use an array if you want to.</p><p>Or pass an array to <a href=\"../XSLT.html#method-c-quote_params\"><code>XSLT.quote_params</code></a>:</p><p>See: <a href=\"../XSLT.html#method-c-quote_params\"><code>Nokogiri::XSLT.quote_params</code></a></p>","location":"rdoc/Nokogiri/XSLT/Stylesheet.html#method-i-transform"},{"title":"module XSD::XMLParser","text":"<section class=\"description\">\n</section>","location":"rdoc/XSD/XMLParser.html"},{"title":"class XSD::XMLParser::Nokogiri","text":"<section class=\"description\">\n<p><a href=\"Nokogiri.html\"><code>Nokogiri</code></a> XML parser for soap4r.</p>\n<p><a href=\"Nokogiri.html\"><code>Nokogiri</code></a> may be used as the XML parser in soap4r. Require \u2018xsd/xmlparser/nokogiri\u2019 in your soap4r applications, and soap4r will use <a href=\"Nokogiri.html\"><code>Nokogiri</code></a> as its XML parser. No other changes should be required to use <a href=\"Nokogiri.html\"><code>Nokogiri</code></a> as the XML parser.</p>\n<p>Example (using UW ITS Web Services):</p>\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'rubygems'</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'nokogiri'</span>\n<span class=\"ruby-identifier\">gem</span> <span class=\"ruby-string\">'soap4r'</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'defaultDriver'</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'xsd/xmlparser/nokogiri'</span>\n\n<span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-constant\">AvlPortType</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">getLatestByRoute</span>(<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">getAgencies</span>.<span class=\"ruby-identifier\">first</span>, <span class=\"ruby-value\">8</span>).<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">bus</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">p</span> <span class=\"ruby-node\">\"#{bus.routeID}, #{bus.longitude}, #{bus.latitude}\"</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n</section>","location":"rdoc/XSD/XMLParser/Nokogiri.html"},{"title":"class XSD::XMLParser::Nokogiri.new(host, opt = {})","text":"<p>Create a new <a href=\"../../XSD.html\"><code>XSD</code></a> parser with <code>host</code> and <code>opt</code></p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-c-new"},{"title":"class XSD::XMLParser::Nokogiri#cdata_block(string)","text":"<p>Handle cdata_blocks containing <code>string</code></p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-cdata_block"},{"title":"class XSD::XMLParser::Nokogiri#do_parse(string_or_readable)","text":"<p>Start parsing <code>string_or_readable</code></p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-do_parse"},{"title":"class XSD::XMLParser::Nokogiri#end_element(name)","text":"<p>Handle the <a href=\"Nokogiri.html#method-i-end_element\"><code>end_element</code></a> event with <code>name</code></p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-end_element"},{"title":"class XSD::XMLParser::Nokogiri#end_element_namespace(name, prefix = nil, uri = nil)","text":"<p>Called at the end of an element <code>name</code> is the element\u2019s name <code>prefix</code> is the namespace prefix associated with the element <code>uri</code> is the associated namespace URI</p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-end_element_namespace"},{"title":"class XSD::XMLParser::Nokogiri#error(msg)","text":"<p>Handle errors with message <code>msg</code></p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-error"},{"title":"class XSD::XMLParser::Nokogiri#start_element(name, attrs = [])","text":"<p>Handle the <a href=\"Nokogiri.html#method-i-start_element\"><code>start_element</code></a> event with <code>name</code> and <code>attrs</code></p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-start_element"},{"title":"class XSD::XMLParser::Nokogiri#start_element_namespace(name, attrs = [], prefix = nil, uri = nil, ns = [])","text":"<p>Called at the beginning of an element <code>name</code> is the element name <code>attrs</code> is a list of attributes <code>prefix</code> is the namespace prefix for the element <code>uri</code> is the associated namespace URI <code>ns</code> is a hash of namespace prefix:urls associated with the element</p>","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-start_element_namespace"},{"title":"class XSD::XMLParser::Nokogiri#warning(msg)","text":"","location":"rdoc/XSD/XMLParser/Nokogiri.html#method-i-warning"},{"location":"index.html","title":"Overview","text":""},{"location":"index.html#nokogiri","title":"Nokogiri","text":"<p>Nokogiri (\u92f8) makes it easy and painless to work with XML and HTML from Ruby. It provides a sensible, easy-to-understand API for reading, writing, modifying, and querying documents. It is fast and standards-compliant by relying on native parsers like libxml2, libgumbo, and xerces.</p>"},{"location":"index.html#guiding-principles","title":"Guiding Principles","text":"<p>Some guiding principles Nokogiri tries to follow:</p> <ul> <li>be secure-by-default by treating all documents as untrusted by default</li> <li>be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers</li> </ul>"},{"location":"index.html#features-overview","title":"Features Overview","text":"<ul> <li>DOM Parser for XML, HTML4, and HTML5</li> <li>SAX Parser for XML and HTML4</li> <li>Push Parser for XML and HTML4</li> <li>Document search via XPath 1.0</li> <li>Document search via CSS3 selectors, with some jquery-like extensions</li> <li>XSD Schema validation</li> <li>XSLT transformation</li> <li>\"Builder\" DSL for XML and HTML documents</li> </ul>"},{"location":"index.html#status","title":"Status","text":""},{"location":"index.html#support-getting-help-and-reporting-issues","title":"Support, Getting Help, and Reporting Issues","text":"<p>All official documentation is posted at https://nokogiri.org (the source for which is at https://github.com/sparklemotion/nokogiri.org/, and we welcome contributions).</p>"},{"location":"index.html#reading","title":"Reading","text":"<p>Your first stops for learning more about Nokogiri should be:</p> <ul> <li>API Documentation</li> <li>Tutorials</li> <li>An excellent community-maintained Cheat Sheet</li> </ul>"},{"location":"index.html#ask-for-help","title":"Ask For Help","text":"<p>There are a few ways to ask exploratory questions:</p> <ul> <li>The Nokogiri mailing list is active at https://groups.google.com/group/nokogiri-talk</li> <li>Open an issue using the \"Help Request\" template at https://github.com/sparklemotion/nokogiri/issues</li> <li>Open a discussion at https://github.com/sparklemotion/nokogiri/discussions</li> </ul> <p>Please do not mail the maintainers at their personal addresses.</p>"},{"location":"index.html#report-a-bug","title":"Report A Bug","text":"<p>The Nokogiri bug tracker is at https://github.com/sparklemotion/nokogiri/issues</p> <p>Please use the \"Bug Report\" or \"Installation Difficulties\" templates.</p>"},{"location":"index.html#security-and-vulnerability-reporting","title":"Security and Vulnerability Reporting","text":"<p>Please report vulnerabilities at https://hackerone.com/nokogiri</p> <p>Full information and description of our security policy is in <code>SECURITY.md</code></p>"},{"location":"index.html#semantic-versioning-policy","title":"Semantic Versioning Policy","text":"<p>Nokogiri follows Semantic Versioning (since 2017 or so). </p> <p>We bump <code>Major.Minor.Patch</code> versions following this guidance:</p> <p><code>Major</code>: (we've never done this)</p> <ul> <li>Significant backwards-incompatible changes to the public API that would require rewriting existing application code.</li> <li>Some examples of backwards-incompatible changes we might someday consider for a Major release are at <code>ROADMAP.md</code>.</li> </ul> <p><code>Minor</code>:</p> <ul> <li>Features and bugfixes.</li> <li>Updating packaged libraries for non-security-related reasons.</li> <li>Dropping support for EOLed Ruby versions. Some folks find this objectionable, but SemVer says this is OK if the public API hasn't changed.</li> <li>Backwards-incompatible changes to internal or private methods and constants. These are detailed in the \"Changes\" section of each changelog entry.</li> <li>Removal of deprecated methods or parameters, after a generous transition period; usually when those methods or parameters are rarely-used or dangerous to the user. Essentially, removals that do not justify a major version bump.</li> </ul> <p><code>Patch</code>:</p> <ul> <li>Bugfixes.</li> <li>Security updates.</li> <li>Updating packaged libraries for security-related reasons.</li> </ul>"},{"location":"index.html#sponsorship","title":"Sponsorship","text":"<p>You can help sponsor the maintainers of this software through one of these organizations:</p> <ul> <li>github.com/sponsors/flavorjones</li> <li>opencollective.com/nokogiri</li> <li>tidelift.com/subscription/pkg/rubygems-nokogiri</li> </ul>"},{"location":"index.html#installation","title":"Installation","text":"<p>Requirements:</p> <ul> <li>Ruby &gt;= 3.0</li> <li>JRuby &gt;= 9.4.0.0</li> </ul> <p>If you are compiling the native extension against a system version of libxml2:</p> <ul> <li>libxml2 &gt;= 2.9.2 (recommended &gt;= 2.12.0)</li> </ul>"},{"location":"index.html#native-gems-faster-more-reliable-installation","title":"Native Gems: Faster, more reliable installation","text":"<p>\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or for system dependencies to exist. This results in much faster installation and more reliable installation, which as you probably know are the biggest headaches for Nokogiri users.</p>"},{"location":"index.html#supported-platforms","title":"Supported Platforms","text":"<p>Nokogiri ships pre-compiled, \"native\" gems for the following platforms:</p> <ul> <li>Linux:</li> <li><code>x86-linux</code> and <code>x86_64-linux</code> (req: <code>glibc &gt;= 2.17</code>)</li> <li><code>aarch64-linux</code> and <code>arm-linux</code> (req: <code>glibc &gt;= 2.29</code>)</li> <li>Note that musl platforms like Alpine are supported</li> <li>Darwin/MacOS: <code>x86_64-darwin</code> and <code>arm64-darwin</code></li> <li>Windows: <code>x86-mingw32</code>, <code>x64-mingw32</code>, and <code>x64-mingw-ucrt</code></li> <li>Java: any platform running JRuby 9.4 or higher</li> </ul> <p>To determine whether your system supports one of these gems, look at the output of <code>bundle platform</code> or <code>ruby -e 'puts Gem::Platform.local.to_s'</code>.</p> <p>If you're on a supported platform, either <code>gem install</code> or <code>bundle install</code> should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like:</p> <pre><code>$ gem install nokogiri\nFetching nokogiri-1.11.0-x86_64-linux.gem\nSuccessfully installed nokogiri-1.11.0-x86_64-linux\n1 gem installed\n</code></pre>"},{"location":"index.html#other-installation-options","title":"Other Installation Options","text":"<p>Because Nokogiri is a C extension, it requires that you have a C compiler toolchain, Ruby development header files, and some system dependencies installed.</p> <p>The following may work for you if you have an appropriately-configured system:</p> <pre><code>gem install nokogiri\n</code></pre> <p>If you have any issues, please visit Installing Nokogiri for more complete instructions and troubleshooting.</p>"},{"location":"index.html#how-to-use-nokogiri","title":"How To Use Nokogiri","text":"<p>Nokogiri is a large library, and so it's challenging to briefly summarize it. We've tried to provide long, real-world examples at Tutorials.</p>"},{"location":"index.html#parsing-and-querying","title":"Parsing and Querying","text":"<p>Here is example usage for parsing and querying a document:</p> <pre><code>#! /usr/bin/env ruby\n\nrequire 'nokogiri'\nrequire 'open-uri'\n\n# Fetch and parse HTML document\ndoc = Nokogiri::HTML(URI.open('https://nokogiri.org/tutorials/installing_nokogiri.html'))\n\n# Search for nodes by css\ndoc.css('nav ul.menu li a', 'article h2').each do |link|\n  puts link.content\nend\n\n# Search for nodes by xpath\ndoc.xpath('//nav//ul//li/a', '//article//h2').each do |link|\n  puts link.content\nend\n\n# Or mix and match\ndoc.search('nav ul.menu li a', '//article//h2').each do |link|\n  puts link.content\nend\n</code></pre>"},{"location":"index.html#encoding","title":"Encoding","text":"<p>Strings are always stored as UTF-8 internally.  Methods that return text values will always return UTF-8 encoded strings.  Methods that return a string containing markup (like <code>to_xml</code>, <code>to_html</code> and <code>inner_html</code>) will return a string encoded like the source document.</p> <p>WARNING</p> <p>Some documents declare one encoding, but actually use a different one. In these cases, which encoding should the parser choose?</p> <p>Data is just a stream of bytes. Humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. <code>libxml2</code> does its best, but it can't be right all the time.</p> <p>If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding.  Here is an example of explicitly setting the encoding to EUC-JP on the parser:</p> <pre><code>  doc = Nokogiri.XML('&lt;foo&gt;&lt;bar /&gt;&lt;/foo&gt;', nil, 'EUC-JP')\n</code></pre>"},{"location":"index.html#technical-overview","title":"Technical Overview","text":""},{"location":"index.html#guiding-principles_1","title":"Guiding Principles","text":"<p>As noted above, two guiding principles of the software are:</p> <ul> <li>be secure-by-default by treating all documents as untrusted by default</li> <li>be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers</li> </ul> <p>Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example).</p>"},{"location":"index.html#cruby","title":"CRuby","text":"<p>The Ruby (a.k.a., CRuby, MRI, YARV) implementation is a C extension that depends on libxml2 and libxslt (which in turn depend on zlib and possibly libiconv).</p> <p>These dependencies are met by default by Nokogiri's packaged versions of the libxml2 and libxslt source code, but a configuration option <code>--use-system-libraries</code> is provided to allow specification of alternative library locations. See Installing Nokogiri for full documentation.</p> <p>We provide native gems by pre-compiling libxml2 and libxslt (and potentially zlib and libiconv) and packaging them into the gem file. In this case, no compilation is necessary at installation time, which leads to faster and more reliable installation.</p> <p>See <code>LICENSE-DEPENDENCIES.md</code> for more information on which dependencies are provided in which native and source gems.</p>"},{"location":"index.html#jruby","title":"JRuby","text":"<p>The Java (a.k.a. JRuby) implementation is a Java extension that depends primarily on Xerces and NekoHTML for parsing, though additional dependencies are on <code>isorelax</code>, <code>nekodtd</code>, <code>jing</code>, <code>serializer</code>, <code>xalan-j</code>, and <code>xml-apis</code>.</p> <p>These dependencies are provided by pre-compiled jar files packaged in the <code>java</code> platform gem.</p> <p>See <code>LICENSE-DEPENDENCIES.md</code> for more information on which dependencies are provided in which native and source gems.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>See <code>CONTRIBUTING.md</code> for an intro guide to developing Nokogiri.</p>"},{"location":"index.html#code-of-conduct","title":"Code of Conduct","text":"<p>We've adopted the Contributor Covenant code of conduct, which you can read in full in <code>CODE_OF_CONDUCT.md</code>.</p>"},{"location":"index.html#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p> <p>See this license at <code>LICENSE.md</code>.</p>"},{"location":"index.html#dependencies","title":"Dependencies","text":"<p>Some additional libraries may be distributed with your version of Nokogiri. Please see <code>LICENSE-DEPENDENCIES.md</code> for a discussion of the variations as well as the licenses thereof.</p>"},{"location":"index.html#authors","title":"Authors","text":"<ul> <li>Mike Dalessio</li> <li>Aaron Patterson</li> <li>Yoko Harada</li> <li>Akinori MUSHA</li> <li>John Shahid</li> <li>Karol Bucek</li> <li>Sam Ruby</li> <li>Craig Barnes</li> <li>Stephen Checkoway</li> <li>Lars Kanis</li> <li>Sergio Arbeo</li> <li>Timothy Elliott</li> <li>Nobuyoshi Nakada</li> </ul>"},{"location":"CHANGELOG.html","title":"Nokogiri Changelog","text":"<p>Nokogiri follows Semantic Versioning, please see the README.md for details.</p>"},{"location":"CHANGELOG.html#v1next-unreleased","title":"v1.next / unreleased","text":""},{"location":"CHANGELOG.html#dependencies","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.13.4. @flavorjones</li> <li>[CRuby] Vendored libxslt is updated to v1.1.42. @flavorjones</li> <li>[CRuby] Minimum supported version of libxml2 raised to v2.9.2 (released 2014-10-16) from v2.6.21. [#3232, #3287] @flavorjones</li> <li>[JRuby] Minimum supported versino of Java raised to 8 (released 2014-03-18) from 7. [#3134] @flavorjones </li> <li>[CRuby] Update to rake-compiler-dock v1.5.1 for building precompiled native gems. [#3216] @flavorjones</li> </ul>"},{"location":"CHANGELOG.html#notable-changes","title":"Notable changes","text":""},{"location":"CHANGELOG.html#sax-parsers","title":"SAX Parsers","text":"<p>The XML and HTML4 SAX parsers have received a lot of attention in this release, and we've fixed multiple long-standing bugs with encoding and entity handling. In addition, libxml2 v2.13 has also made some underlying fixes and improvements to encoding and entity handling.</p> <p>We're shipping these fixes in a minor release because we firmly believe the resulting behavior is correct and standards-compliant, however applications that have been depending on the buggy behavior may be impacted.</p> <p>If your application relies on the SAX parsers, and in particular if you're SAX-parsing documents with parsed entities or incorrect encoding declarations, please read the changelog below carefully.</p>"},{"location":"CHANGELOG.html#fragment-parsing","title":"Fragment parsing","text":"<p>Document fragment parsing has been improved, particularly with respect to handling malformed fragments or fragments with implicit namespace prefixes. Namespace reconciliation still isn't where we want it to be, but it's an improvement.</p> <p>HTML5 fragment parsing now allows the context node to be specified as a keyword argument to the <code>HTML5::DocumentFragment.parse</code> and <code>.new</code> methods, which in particular should allow for more flexible sanitization and support for the draft HTML Sanitizer API in downstream libraries.</p>"},{"location":"CHANGELOG.html#error-handling","title":"Error handling","text":"<p>In scenarios where multiple errors could be reported by the underlying parser, the errors will be aggregated into a single <code>Nokogiri::XML::SyntaxError</code> that is raised. Previously only the final error reported by libxml2 was raised which was often misleading if it was only a warning and not the fatal error.</p>"},{"location":"CHANGELOG.html#schema-validation","title":"Schema validation","text":"<p>We've resolved many long-standing bugs in the various schema classes, validation methods, and their error reporting. Behavior is now consistent across schema types and input types, as well as parser backends (Xerces and libxml2).</p>"},{"location":"CHANGELOG.html#added","title":"Added","text":"<ul> <li>Introduce support for a new SAX callback <code>XML::SAX::Document#reference</code>, which is called to report some parsed XML entities when <code>XML::SAX::ParserContext#replace_entities</code> is set to the default value <code>false</code>. This is necessary functionality for some applications that were previously relying on incorrect entity error reporting which has been fixed (see below). For more information, read the docs for <code>Nokogiri::XML::SAX::Document</code>. [#1926] @flavorjones</li> <li><code>XML::SAX::Parser#parse_memory</code> and <code>#parse_file</code> now accept an optional <code>encoding</code> argument. When not provided, the parser will fall back to the encoding passed to the initializer, and then fall back to autodetection. [#3288] @flavorjones</li> <li><code>XML::SAX::ParserContext.memory</code> now accepts an optional <code>encoding</code> argument. When not provided, the encoding will be autodetected. [#3288] @flavorjones</li> <li>New attributes <code>XML::DocumentFragment#parse_options</code> and <code>HTML4::DocumentFragment#parse_options</code> contain the options used to parse the document fragment. @flavorjones</li> <li>[CRuby] <code>Nokogiri::HTML5::Builder</code> is similar to <code>HTML4::Builder</code> but returns an <code>HTML5::Document</code>. [#3119] @flavorjones</li> <li>[CRuby] Attributes in an HTML5 document can be serialized individually, something that has always been supported by the HTML4 serializer. [#3125, #3127] @flavorjones</li> <li>[CRuby] Introduce a compile-time option, <code>--disable-xml2-legacy</code>, to remove from libxml2 its dependencies on <code>zlib</code> and <code>liblzma</code> and disable implicit <code>HTTP</code> network requests. These all remain enabled by default, and are present in the precompiled native gems. This option is a precursor for removing these libraries in a future major release, but may be interesting for the security-minded who do not need features like automatic decompression and would like to remove these dependencies. You can read more and give feedback on these plans in #3168. [#3247] @flavorjones</li> <li>[CRuby] If errors are returned from schema validation, a new attribute <code>SyntaxError#path</code> will contain the XPath path of the node that caused the validation failure. [#3316] @ryanong</li> </ul>"},{"location":"CHANGELOG.html#improved","title":"Improved","text":"<ul> <li>Documentation has been improved for <code>CSS.xpath_for</code>. [#3224] @flavorjones</li> <li>Documentation for the SAX parsing classes has been greatly improved, including encoding overrides and the complex entity-handling behavior. [#3265] @flavorjones</li> <li><code>XML::Schema#read_memory</code> and <code>XML::RelaxNG#read_memory</code> are now Ruby methods that call <code>#from_document</code>. Previously these were native functions, but they were buggy on both CRuby and JRuby (but worse on JRuby) and so this is now useful, comparable in performance, and simpler code that is easier to maintain. [#2113, #2115] @flavorjones</li> <li><code>XML::SAX::ParserContext.io</code>'s <code>encoding</code> argument is now optional, and can now be an <code>Encoding</code> or an encoding name. When not provided will default to autodetecting the encoding. [#3288] @flavorjones</li> <li>[CRuby] When compiling packaged libraries from source, allow users' <code>AR</code> and <code>LD</code> environment variables to set the archiver and linker commands, respectively. This augments the existing <code>CC</code> environment variable to set the compiler command. [#3165] @ziggythehamster</li> <li>[CRuby] The HTML5 parse methods accept a <code>:parse_noscript_content_as_text</code> keyword argument which will emulate the parsing behavior of a browser which has scripting enabled. [#3178, #3231] @stevecheckoway</li> <li>[CRuby] <code>HTML5::DocumentFragment.parse</code> and <code>.new</code> accept a <code>:context</code> keyword argument that is the parse context node or element name. Previously this could only be passed in as a positional argument to <code>.new</code> and not at all to <code>.parse</code>. @flavorjones</li> <li>[CRuby] The update to libxml v2.13 improves \"in context\" fragment parsing recovery. We removed our hacky workaround for recovery that led to silently-degraded functionality when parsing fragments with parse errors. Specifically, malformed XML fragments that used implicit namespace prefixes will now \"link up\" to the namespaces in the parent document or node, where previously they did not. [#2092] @flavorjones</li> <li>[CRuby] When multiple errors could be detected by the parser and there's no obvious document to save them in (for example, when parsing a document with the recovery parse option turned off), the libxml2 errors are aggregated into a single <code>Nokogiri::XML::SyntaxError</code>. Previously, only the last error recorded by libxml2 was raised, which might be misleading if it's merely a warning and not the fatal error preventing the operation. [#2562] @flavorjones</li> <li>[CRuby] The SAX parser context and handler implementation has been simplified and now takes advantage of some of libxml2's default SAX handlers for entities and DTD management. [#3265] @flavorjones</li> </ul>"},{"location":"CHANGELOG.html#fixed","title":"Fixed","text":"<ul> <li><code>Node#clone</code>, <code>NodeSet#clone</code>, and <code>*::Document#clone</code> all properly copy the metaclass of the original as expected. Previously, <code>#clone</code> had been aliased to <code>#dup</code> for these classes (since v1.3.0 in 2009). [#316, #3117] @flavorjones</li> <li>CSS queries for pseudo-selectors that cannot be translated into XPath expressions now raise a more descriptive <code>Nokogiri::CSS::SyntaxError</code> when they are parsed. Previously, an invalid XPath expression was evaluated and a hard-to-understand XPath error was raised by the query engine. [#3193] @flavorjones</li> <li><code>Schema#validate</code> returns errors on empty and malformed files. Previously, it would return errors on empty/malformed Documents, but not when reading from files. [#642] @flavorjones</li> <li><code>XML::Builder</code> is now consistent with how it sets block scope. Previously, missing methods with blocks on dynamically-created nodes were always handled by invoking <code>instance_eval(&amp;block)</code> on the Builder, even when the Builder was yielding self for all other missing methods with blocks. [#1041] @flavorjones</li> <li><code>HTML4::DocumentFragment.parse</code> accepts <code>IO</code> input. Previously, it required a string and would raise a <code>TypeError</code> when passed an <code>IO</code>. [#2069] @sharvy</li> <li>[CRuby] libgumbo (the HTML5 parser) treats reaching max-depth as EOF. This addresses a class of issues when the parser is interrupted in this way. [#3121] @stevecheckoway</li> <li>[CRuby] Update node GC lifecycle to avoid a potential memory leak with fragments in libxml 2.13.0 caused by changes in <code>xmlAddChild</code>. [#3156] @flavorjones</li> <li>[CRuby] libgumbo correctly prints nonstandard element names in error messages. [#3219] @stevecheckoway</li> <li>[CRuby] SAX parsing no longer registers errors when encountering external entity references. [#1926] @flavorjones</li> <li>[JRuby] Fixed entity reference serialization, which rendered both the reference and the replacement text. Incredibly nobody noticed this bug for over a decade. [#3272] @flavorjones</li> <li>[JRuby] Fixed some bugs in how <code>Node#attributes</code> handles attributes with namespaces. [#2677, #2679] @flavorjones</li> <li>[JRuby] Fix <code>Schema#validate</code> to only return the most recent Document's errors. Previously, if multiple documents were validated, this method returned the accumulated errors of all previous documents. [#1282] @flavorjones</li> <li>[JRuby] Fix <code>Schema#validate</code> to not clobber the <code>[@errors](https://github.com/errors)</code> instance variable. [#1282] @flavorjones</li> <li>[JRuby] Empty documents fail schema validation as they should. [#783] @flavorjones</li> <li>[JRuby] SAX parsing now respects the <code>#replace_entities</code> attribute, which defaults to <code>false</code>. Previously this flag defaulted to <code>true</code> and was completely ignored. [#614] @flavorjones</li> <li>[JRuby] The SAX callback <code>Document#start_element_namespace</code> received a blank string for the URI when a namespace was not present. It now receives <code>nil</code> (as does the CRuby impl). [#3265] @flavorjones</li> <li>[JRuby] <code>Reader#outer_xml</code> and <code>#inner_xml</code> encode entities properly. [#1523] @flavorjones</li> </ul>"},{"location":"CHANGELOG.html#changed","title":"Changed","text":"<ul> <li>[CRuby] <code>Nokogiri::XML::CData.new</code> no longer accepts <code>nil</code> as the content argument, making <code>CData</code> behave like other character data classes (like <code>Comment</code> and <code>Text</code>). This change was necessitated by behavioral changes in the upcoming libxml 2.13.0 release. If you wish to create an empty CDATA node, pass an empty string. [#3156] @flavorjones</li> <li>Internals:</li> <li>The internal <code>CSS::XPathVisitor</code> class now accepts the xpath prefix and the context namespaces as constructor arguments. The <code>prefix:</code> and <code>ns:</code> keyword arguments to <code>CSS.xpath_for</code> cannot be specified if the <code>visitor:</code> keyword argument is also used. <code>CSS::XPathVisitor</code> now exposes <code>#builtins</code>, <code>#doctype</code>, <code>#prefix</code>, and <code>#namespaces</code> attributes. [#3225] @flavorjones</li> <li>The internal CSS selector cache has been extracted into a distinct class, <code>CSS::SelectorCache</code>. Previously it was part of the <code>CSS::Parser</code> class. [#3226] @flavorjones</li> <li>The internal <code>Gumbo.parse</code> and <code>Gumbo.fragment</code> methods now take keyword arguments instead of positional arguments. [#3199] @flavorjones</li> </ul>"},{"location":"CHANGELOG.html#deprecated","title":"Deprecated","text":"<ul> <li>The undocumented and unused method <code>Nokogiri::CSS.parse</code> is now deprecated and will generate a warning. The AST returned by this method is private and subject to change and removal in future versions of Nokogiri. This method will be removed in a future version of Nokogiri.</li> <li>Passing an options hash to <code>CSS.xpath_for</code> is now deprecated and will generate a warning. Use keyword arguments instead. This will become an error in a future version of Nokogiri.</li> <li>Passing an options hash to <code>HTML5::DocumentFragment.parse</code> is now deprecated and will generate a warning. Use keyword arguments instead. This will become an error in a future version of Nokogiri.</li> <li>Passing libxml2 encoding IDs to <code>SAX::ParserContext</code> methods is now deprecated and will generate a warning. The use of <code>SAX::Parser::ENCODINGS</code> is also deprecated. Use <code>Encoding</code> objects or encoding names instead.</li> </ul>"},{"location":"CHANGELOG.html#v1167-2024-07-27","title":"v1.16.7 / 2024-07-27","text":""},{"location":"CHANGELOG.html#dependencies_1","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.9, which the upstream release notes state is a security release to address CVE-2024-40896. Nokogiri's maintainers believe this vulnerability does not affect users of Nokogiri, but we advise upgrading at your earliest convenience anyway.</li> </ul>"},{"location":"CHANGELOG.html#v1166-2024-06-13","title":"v1.16.6 / 2024-06-13","text":""},{"location":"CHANGELOG.html#dependencies_2","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.8, which the release notes state is a bugfix release.</li> </ul>"},{"location":"CHANGELOG.html#v1165","title":"v1.16.5","text":""},{"location":"CHANGELOG.html#security","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to address CVE-2024-34459. See GHSA-r95h-9x8f-r3f7 for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_3","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.7 from v2.12.6. (@flavorjones)</li> </ul>"},{"location":"CHANGELOG.html#v1164-2024-04-10","title":"v1.16.4 / 2024-04-10","text":""},{"location":"CHANGELOG.html#dependencies_4","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored zlib in the precompiled native gems is updated to v1.3.1 from v1.3. Nokogiri is not affected by the minizip CVE patched in this version, but this update may satisfy some security scanners. Related, see this discussion about removing the compression libraries altogether in a future version of Nokogiri.</li> </ul>"},{"location":"CHANGELOG.html#v1163-2024-03-15","title":"v1.16.3 / 2024-03-15","text":""},{"location":"CHANGELOG.html#dependencies_5","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.6 from v2.12.5. (@flavorjones)</li> </ul>"},{"location":"CHANGELOG.html#changed_1","title":"Changed","text":"<ul> <li>[CRuby] <code>XML::Reader</code> sets the <code>[@encoding](https://github.com/encoding)</code> instance variable during reading if it is not passed into the initializer. Previously, it would remain <code>nil</code>. The behavior of <code>Reader#encoding</code> has not changed. This works around changes to how libxml2 reports the encoding used in v2.12.6.</li> </ul>"},{"location":"CHANGELOG.html#v1162-2024-02-04","title":"v1.16.2 / 2024-02-04","text":""},{"location":"CHANGELOG.html#security_1","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to address CVE-2024-25062. See GHSA-xc9x-jj77-9p9j for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_6","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.5 from v2.12.4. (@flavorjones)</li> </ul>"},{"location":"CHANGELOG.html#v1161-2024-02-03","title":"v1.16.1 / 2024-02-03","text":""},{"location":"CHANGELOG.html#dependencies_7","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.4 from v2.12.3. (@flavorjones)</li> </ul>"},{"location":"CHANGELOG.html#fixed_1","title":"Fixed","text":"<ul> <li>[CRuby] <code>XML::Reader</code> defaults the encoding to UTF-8 if it's not specified in either the document or as a method parameter. Previously non-ASCII characters were serialized as NCRs in this case. [#2891] (@flavorjones)</li> <li>[CRuby] Restored support for compilation by GCC versions earlier than 4.6, which was broken in v1.15.0 (540e9aee). [#3090] (@adfoster-r7)</li> <li>[CRuby] Patched upstream libxml2 to allow parsing HTML5 in the context of a namespaced node (e.g., foreign content like MathML). [#3112, #3116] (@flavorjones)</li> <li>[CRuby] Fixed a small memory leak in libgumbo (HTML5 parser) when the maximum tree depth limit is hit. [#3098, #3100] (@stevecheckoway)</li> </ul>"},{"location":"CHANGELOG.html#v1160-2023-12-27","title":"v1.16.0 / 2023-12-27","text":""},{"location":"CHANGELOG.html#notable-changes_1","title":"Notable Changes","text":""},{"location":"CHANGELOG.html#ruby","title":"Ruby","text":"<p>This release introduces native gem support for Ruby 3.3.</p> <p>This release ends support for Ruby 2.7, for which upstream support ended 2023-03-31.</p>"},{"location":"CHANGELOG.html#pattern-matching","title":"Pattern matching","text":"<p>This version marks official support for the pattern matching API in <code>XML::Attr</code>, <code>XML::Document</code>, <code>XML::DocumentFragment</code>, <code>XML::Namespace</code>, <code>XML::Node</code>, and <code>XML::NodeSet</code> (and their subclasses), originally introduced as an experimental feature in v1.14.0. (@flavorjones)</p> <p>Documentation on what can be matched:</p> <ul> <li><code>XML::Attr#deconstruct_keys</code></li> <li><code>XML::Document#deconstruct_keys</code></li> <li><code>XML::Namespace#deconstruct_keys</code></li> <li><code>XML::Node#deconstruct_keys</code></li> <li><code>XML::DocumentFragment#deconstruct</code></li> <li><code>XML::NodeSet#deconstruct</code></li> </ul>"},{"location":"CHANGELOG.html#dependencies_8","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.12.3 from v2.11.6. (@flavorjones)</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.12.0</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.12.1</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.12.2</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.12.3</li> </ul>"},{"location":"CHANGELOG.html#fixed_2","title":"Fixed","text":"<ul> <li>CSS <code>nth</code> pseudo-classes now handle spaces, e.g. <code>\"2n + 1\"</code>. [#3018] (@fusion2004)</li> <li>[CRuby] <code>libgumbo</code> no longer leaks memory when an incomplete tag is abandoned by the HTML5 parser. [#3036] (@flavorjones)</li> </ul>"},{"location":"CHANGELOG.html#removed","title":"Removed","text":"<ul> <li>Removed <code>Nokogiri::HTML5.get</code> which was deprecated in v1.12.0. [#2278] (@flavorjones)</li> <li>Removed the CSS-to-XPath utility modules <code>XPathVisitorAlwaysUseBuiltins</code> and <code>XPathVisitorOptimallyUseBuiltins</code>, which were deprecated in v1.13.0 in favor of <code>XPathVisitor</code> constructor args. [#2403] (@flavorjones)</li> <li>Removed <code>XML::Reader#attribute_nodes</code> which was deprecated in v1.13.8 in favor of <code>#attribute_hash</code>. [#2598, #2599] (@flavorjones)</li> <li>[CRuby] Removed the <code>libxml/libxml2_path</code> key from <code>VersionInfo</code>, used in the past for third-party library integration, in favor of the <code>nokogiri/cppflags</code> and <code>nokogiri/ldflags</code> keys. Please note that third-party library integration is not fully supported and may be deprecated soon, see #2746 for more context. [#2143] (@flavorjones)</li> </ul>"},{"location":"CHANGELOG.html#thank-you","title":"Thank you!","text":"<p>The following people and organizations were kind enough to sponsor @flavorjones or the Nokogiri project during the development of v1.16.0:</p> <ul> <li>G\u00f6tz G\u00f6risch @GoetzGoerisch</li> <li>Airbnb @airbnb</li> <li>Maxime Gauthier @biximilien</li> <li>Renuo AG @renuo</li> <li>YOSHIDA Katsuhiko @kyoshidajp</li> <li>Homebrew @Homebrew</li> <li>Hiroshi SHIBATA @hsbt</li> <li>@zzak</li> <li>Evil Martians @evilmartians</li> <li>Ajaya Agrawalla @ajaya</li> <li>Modern Treasury @Modern-Treasury</li> <li>Danilo Lessa Bernardineli @danlessa</li> <li>matt marques @mestre-dos-magos</li> <li>Quan Nguyen @qu8n</li> <li>Harry Lascelles @hlascelles</li> <li>Oleksandr Tyshchenko @altivi</li> <li>Prowly @prowlycom</li> <li>Better Stack Community @betterstack-community</li> <li>Sentry @getsentry</li> <li>Codecov @codecov</li> <li>Typesense @typesense</li> <li>Roy Boivin II @Yabbo</li> <li>Frank Groeneveld @frenkel</li> </ul> <p>We'd also like to thank @github who donate a ton of compute time for our CI pipelines!</p>"},{"location":"CHANGELOG.html#1156-2024-03-16","title":"1.15.6 / 2024-03-16","text":""},{"location":"CHANGELOG.html#security_2","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to address CVE-2024-25062. See GHSA-xc9x-jj77-9p9j for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_9","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.11.7 from v2.11.6. For details please see https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.7</li> </ul>"},{"location":"CHANGELOG.html#1155-2023-11-17","title":"1.15.5 / 2023-11-17","text":""},{"location":"CHANGELOG.html#dependencies_10","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.11.6 from v2.11.5. For details please see https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.6</li> <li>[CRuby] Vendored libxslt is updated to v1.1.39 from v1.1.38. For details please see https://gitlab.gnome.org/GNOME/libxslt/-/releases/v1.1.39</li> </ul>"},{"location":"CHANGELOG.html#1154-2023-08-11","title":"1.15.4 / 2023-08-11","text":""},{"location":"CHANGELOG.html#dependencies_11","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.11.5 from v2.11.4. For details please see https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.5</li> </ul>"},{"location":"CHANGELOG.html#fixed_3","title":"Fixed","text":"<ul> <li>Fixed a typo in a HTML5 parser error message. [#2927] (@anishathalye)</li> <li>[CRuby] <code>ObjectSpace.memsize_of</code> is now safe to call on <code>Document</code>s with complex DTDs. In previous versions, this debugging method could result in a segfault. [#2923, #2924]</li> </ul>"},{"location":"CHANGELOG.html#1153-2023-07-05","title":"1.15.3 / 2023-07-05","text":""},{"location":"CHANGELOG.html#fixed_4","title":"Fixed","text":"<ul> <li>Passing an object that is not a kind of <code>XML::Node</code> as the first parameter to <code>CDATA.new</code> now raises a <code>TypeError</code>. Previously this would result in either a segfault (CRuby) or a Java exception (JRuby). [#2920]</li> <li>Passing an object that is not a kind of <code>XML::Node</code> as the first parameter to <code>Schema.from_document</code> now raises a <code>TypeError</code>. Previously this would result in either a segfault (CRuby) or a Java exception (JRuby). [#2920]</li> <li>[CRuby] Passing an object that is not a kind of <code>XML::Node</code> as the second parameter to <code>Text.new</code> now raises a <code>TypeError</code>. Previously this would result in a segfault. [#2920]</li> <li>[CRuby] Replacing a node's children via methods like <code>Node#inner_html=</code>, <code>#children=</code>, and <code>#replace</code> no longer defensively dups the node's next sibling if it is a Text node. This behavior was originally adopted to work around libxml2's memory management (see #283 and #595) but should not have included operations involving <code>xmlAddChild()</code>. [#2916]</li> <li>[JRuby] Fixed NPE when serializing an unparented HTML node. [#2559, #2895] (@cbasguti)</li> </ul>"},{"location":"CHANGELOG.html#1152-2023-05-24","title":"1.15.2 / 2023-05-24","text":""},{"location":"CHANGELOG.html#dependencies_12","title":"Dependencies","text":"<ul> <li>[JRuby] Vendored org.nokogiri:nekodtd is updated to v0.1.11.noko2. This is functionally equivalent to v0.1.11.noko1 but restores support for Java 8.</li> </ul>"},{"location":"CHANGELOG.html#fixed_5","title":"Fixed","text":"<ul> <li>[JRuby] Java 8 support is restored, fixing a regression present in v1.14.0..v1.14.4 and v1.15.0..v1.15.1. [#2887]</li> </ul>"},{"location":"CHANGELOG.html#1151-2023-05-19","title":"1.15.1 / 2023-05-19","text":""},{"location":"CHANGELOG.html#dependencies_13","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.11.4 from v2.11.3. For details please see https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.4</li> </ul>"},{"location":"CHANGELOG.html#fixed_6","title":"Fixed","text":"<ul> <li>[CRuby] The libxml2 update fixes an encoding regression when push-parsing UTF-8 sequences. [#2882, upstream issue and commit]</li> </ul>"},{"location":"CHANGELOG.html#1150-2023-05-15","title":"1.15.0 / 2023-05-15","text":""},{"location":"CHANGELOG.html#notes","title":"Notes","text":""},{"location":"CHANGELOG.html#ability-to-opt-into-system-malloc-and-free","title":"Ability to opt into system <code>malloc</code> and <code>free</code>","text":"<p>Since 2009, Nokogiri has configured libxml2 to use <code>ruby_xmalloc</code> et al for memory management. This has provided benefits for memory management, but comes with a performance penalty.</p> <p>Users can now opt into using system <code>malloc</code> for libxml2 memory management by setting an environment variable:</p> <pre><code># \"default\" here means \"libxml2's default\" which is system malloc\nNOKOGIRI_LIBXML_MEMORY_MANAGEMENT=default\n</code></pre> <p>Benchmarks show that this setting will significantly improve performance, but be aware that the tradeoff may involve poorer memory management including bloated heap sizes and/or OOM conditions.</p> <p>You can read more about this in the decision record at <code>adr/2023-04-libxml-memory-management.md</code>.</p>"},{"location":"CHANGELOG.html#dependencies_14","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.11.3 from v2.10.4. For details please see:</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.0</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.1</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.2</li> <li>https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.11.3</li> <li>[CRuby] Vendored libxslt is updated to v1.1.38 from v1.1.37. For details please see:</li> <li>https://gitlab.gnome.org/GNOME/libxslt/-/releases/v1.1.38</li> </ul>"},{"location":"CHANGELOG.html#added_1","title":"Added","text":"<ul> <li><code>Encoding</code> objects may now be passed to serialization methods like <code>#to_xml</code>, <code>#to_html</code>, <code>#serialize</code>, and <code>#write_to</code> to specify the output encoding. Previously only encoding names (strings) were accepted. [#2774, #2798] (@ellaklara)</li> <li>[CRuby] Users may opt into using system <code>malloc</code> for libxml2 memory management. For more detail, see note above or <code>adr/2023-04-libxml-memory-management.md</code>.</li> </ul>"},{"location":"CHANGELOG.html#changed_2","title":"Changed","text":"<ul> <li>[CRuby] <code>Schema.from_document</code> now makes a defensive copy of the document if it has blank text nodes with Ruby objects instantiated for them. This prevents unsafe behavior in libxml2 from causing a segfault. There is a small performance cost, but we think this has the virtue of being \"what the user meant\" since modifying the original is surprising behavior for most users. Previously this was addressed in v1.10.9 by raising an exception.</li> </ul>"},{"location":"CHANGELOG.html#fixed_7","title":"Fixed","text":"<ul> <li>[CRuby] <code>XSLT.transform</code> now makes a defensive copy of the document if it has blank text nodes with Ruby objects instantiated for them and the template uses <code>xsl:strip-spaces</code>. This prevents unsafe behavior in libxslt from causing a segfault. There is a small performance cost, but we think this has the virtue of being \"what the user meant\" since modifying the original is surprising behavior for most users. Previously this would allow unsafe memory access and potentially segfault. [#2800]</li> </ul>"},{"location":"CHANGELOG.html#improved_1","title":"Improved","text":"<ul> <li><code>Nokogiri::XML::Node::SaveOptions#inspect</code> now shows the names of the options set in the bitmask, similar to <code>ParseOptions</code>. [#2767]</li> <li><code>#inspect</code> and pretty-printing are improved for <code>AttributeDecl</code>, <code>ElementContent</code>, <code>ElementDecl</code>, and <code>EntityDecl</code>.</li> <li>[CRuby] The C extension now uses Ruby's TypedData API for managing all the libxml2 structs. Write barriers may improve GC performance in some extreme cases. [#2808] (@etiennebarrie and @byroot)</li> <li>[CRuby] <code>ObjectSpace.memsize_of</code> reports a pretty good guess of memory usage when called on <code>Nokogiri::XML::Document</code> objects. [#2807] (@etiennebarrie and @byroot)</li> <li>[CRuby] Users installing the \"ruby\" platform gem and compiling libxml2 and libxslt from source will now be using a modern <code>config.guess</code> and <code>config.sub</code> that supports new architectures like <code>loongarch64</code>. [#2831] (@zhangwenlong8911)</li> <li>[CRuby] HTML5 parser:</li> <li>adjusts the specified attributes, adding <code>xlink:arcrole</code> and removing <code>xml:base</code> [#2841, #2842]</li> <li>allows <code>&lt;hr&gt;</code> in <code>&lt;select&gt;</code> [whatwg/html#3410, whatwg/html#9124]</li> <li>[JRuby] <code>Node#first_element_child</code> now returns <code>nil</code> if there are only non-element children. Previously a null pointer exception was raised. [#2808, #2844]</li> <li>Documentation for <code>Nokogiri::XSLT</code> now has usage examples including custom function handlers.</li> </ul>"},{"location":"CHANGELOG.html#deprecated_1","title":"Deprecated","text":"<ul> <li>Passing a <code>Nokogiri::XML::Node</code> as the first parameter to <code>CDATA.new</code> is deprecated and will generate a warning. This parameter should be a kind of <code>Nokogiri::XML::Document</code>. This will become an error in a future version of Nokogiri.</li> <li>Passing a <code>Nokogiri::XML::Node</code> as the first parameter to <code>Schema.from_document</code> is deprecated and will generate a warning. This parameter should be a kind of <code>Nokogiri::XML::Document</code>. This will become an error in a future version of Nokogiri.</li> <li>Passing a <code>Nokogiri::XML::Node</code> as the second parameter to <code>Text.new</code> is deprecated and will generate a warning. This parameter should be a kind of <code>Nokogiri::XML::Document</code>. This will become an error in a future version of Nokogiri.</li> <li>[CRuby] Calling a custom XPath function without the <code>nokogiri</code> namespace is deprecated and will generate a warning. Support for non-namespaced functions will be removed in a future version of Nokogiri. (Note that JRuby has never supported non-namespaced custom XPath functions.)</li> </ul>"},{"location":"CHANGELOG.html#thank-you_1","title":"Thank you!","text":"<p>The following people and organizations were kind enough to sponsor @flavorjones or the Nokogiri project during the development of v1.15.0:</p> <ul> <li>G\u00f6tz G\u00f6risch (@GoetzGoerisch)</li> <li>Airbnb (@airbnb)</li> <li>Kyohei Nanba (@kyo-nanba)</li> <li>Maxime Gauthier (@biximilien)</li> <li>@renuo</li> <li>@dbootyfvrt</li> <li>YOSHIDA Katsuhiko (@kyoshidajp)</li> <li>Homebrew (@Homebrew)</li> <li>Hiroshi SHIBATA (@hsbt)</li> <li>PuLLi (@the-pulli)</li> <li>SiteLog GmbH (@sitelog-gmbh)</li> <li>@zzak</li> <li>Evil Martians (@evilmartians)</li> <li>Ajaya Agrawalla (@ajaya)</li> <li>Modern Treasury (@Modern-Treasury)</li> <li>Danilo Lessa Bernardineli (@danlessa)</li> </ul> <p>We'd also like to thank @github who donate a ton of compute time for our CI pipelines!</p>"},{"location":"CHANGELOG.html#1145-2023-05-24","title":"1.14.5 / 2023-05-24","text":""},{"location":"CHANGELOG.html#note","title":"Note","text":"<p>To ensure that JRuby users on Java 8 can apply the security changes from v1.14.4, we're cutting this release on the v1.14.x branch. We don't expect to make any more v1.14.x releases.</p> <p>(The changes in this release are incorporated into the v1.15.x release branch at v1.15.2.)</p>"},{"location":"CHANGELOG.html#dependencies_15","title":"Dependencies","text":"<ul> <li>[JRuby] Vendored org.nokogiri:nekodtd is updated to v0.1.11.noko2. This is functionally equivalent to v0.1.11.noko1 but restores support for Java 8.</li> </ul>"},{"location":"CHANGELOG.html#fixed_8","title":"Fixed","text":"<ul> <li>[JRuby] Java 8 support is restored, fixing a regression introduced in v1.14.0. [#2887]</li> </ul>"},{"location":"CHANGELOG.html#1144-2023-05-11","title":"1.14.4 / 2023-05-11","text":""},{"location":"CHANGELOG.html#dependencies_16","title":"Dependencies","text":"<ul> <li>[JRuby] Vendored Xalan-J is updated to v2.7.3. This is the first Xalan release in nine years, and it was done to address CVE-2022-34169.</li> </ul> <p>The Nokogiri maintainers wish to stress that Nokogiri users were not vulnerable to this CVE, as we explained in GHSA-qwq9-89rg-ww72, and so upgrading is really at the discretion of users.</p> <p>This release was cut primarily so that JRuby users of v1.14.x can avoid vulnerability scanner alerts on earlier versions of Xalan-J.</p>"},{"location":"CHANGELOG.html#1143-2023-04-11","title":"1.14.3 / 2023-04-11","text":""},{"location":"CHANGELOG.html#security_3","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to address CVE-2023-29469, CVE-2023-28484, and one other security-related issue. See GHSA-pxvg-2qj5-37jqGHSA-pxvg-2qj5-37jq for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_17","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.10.4 from v2.10.3.</li> </ul>"},{"location":"CHANGELOG.html#1142-2023-02-13","title":"1.14.2 / 2023-02-13","text":""},{"location":"CHANGELOG.html#fixed_9","title":"Fixed","text":"<ul> <li>Calling <code>NodeSet#to_html</code> on an empty node set no longer raises an encoding-related exception. This bug was introduced in v1.14.0 while fixing #2649. [#2784]</li> </ul>"},{"location":"CHANGELOG.html#1141-2023-01-30","title":"1.14.1 / 2023-01-30","text":""},{"location":"CHANGELOG.html#fixed_10","title":"Fixed","text":"<ul> <li>Serializing documents now works again with pseudo-IO objects that don't support IO's encoding API (like rubyzip's <code>Zip::OutputStream</code>). This was a regression in v1.14.0 due to the fix for #752 in #2434, and was not completely fixed by #2753. [#2773]</li> <li>[CRuby] Address compiler warnings about <code>void*</code> casting and old-style C function definitions.</li> </ul>"},{"location":"CHANGELOG.html#1140-2023-01-12","title":"1.14.0 / 2023-01-12","text":""},{"location":"CHANGELOG.html#notable-changes_2","title":"Notable Changes","text":""},{"location":"CHANGELOG.html#ruby_1","title":"Ruby","text":"<p>This release introduces native gem support for Ruby 3.2. (Also see \"Technical note\" under \"Changed\" below.)</p> <p>This release ends support for:</p> <ul> <li>Ruby 2.6, for which upstream support ended 2022-04-12.</li> <li>JRuby 9.3, which is not fully compatible with Ruby 2.7+</li> </ul>"},{"location":"CHANGELOG.html#faster-more-reliable-installation-native-gem-for-aarch64-linux-aka-linuxarm64v8","title":"Faster, more reliable installation: Native Gem for <code>aarch64-linux</code> (aka <code>linux/arm64/v8</code>)","text":"<p>This version of Nokogiri ships official native gem support for the <code>aarch64-linux</code> platform, which should support AWS Graviton and other ARM64 Linux platforms. Please note that glibc &gt;= 2.29 is required for aarch64-linux systems, see Supported Platforms for more information.</p>"},{"location":"CHANGELOG.html#faster-more-reliable-installation-native-gem-for-arm-linux-aka-linuxarmv7","title":"Faster, more reliable installation: Native Gem for <code>arm-linux</code> (aka <code>linux/arm/v7</code>)","text":"<p>This version of Nokogiri ships experimental native gem support for the <code>arm-linux</code> platform. Please note that glibc &gt;= 2.29 is required for arm-linux systems, see Supported Platforms for more information.</p>"},{"location":"CHANGELOG.html#pattern-matching_1","title":"Pattern matching","text":"<p>This version introduces an experimental pattern matching API for <code>XML::Attr</code>, <code>XML::Document</code>, <code>XML::DocumentFragment</code>, <code>XML::Namespace</code>, <code>XML::Node</code>, and <code>XML::NodeSet</code> (and their subclasses).</p> <p>Some documentation on what can be matched:</p> <ul> <li><code>XML::Attr#deconstruct_keys</code></li> <li><code>XML::Document#deconstruct_keys</code></li> <li><code>XML::Namespace#deconstruct_keys</code></li> <li><code>XML::Node#deconstruct_keys</code></li> <li><code>XML::DocumentFragment#deconstruct</code></li> <li><code>XML::NodeSet#deconstruct</code></li> </ul> <p>We welcome feedback on this API at #2360.</p>"},{"location":"CHANGELOG.html#dependencies_18","title":"Dependencies","text":""},{"location":"CHANGELOG.html#cruby","title":"CRuby","text":"<ul> <li>Vendored libiconv is updated to v1.17</li> </ul>"},{"location":"CHANGELOG.html#jruby","title":"JRuby","text":"<ul> <li>This version of Nokogiri uses <code>jar-dependencies</code> to manage most of the vendored Java dependencies. <code>nokogiri -v</code> now outputs maven metadata for all Java dependencies, and <code>Nokogiri::VERSION_INFO</code> also contains this metadata. [#2432]</li> <li>HTML parsing is now provided by <code>net.sourceforge.htmlunit:neko-htmlunit:2.61.0</code> (previously Nokogiri used a fork of <code>org.cyberneko.html:nekohtml</code>)</li> <li>Vendored Jing is updated from <code>com.thaiopensource:jing:20091111</code> to <code>nu.validator:jing:20200702VNU</code>.</li> <li>New dependency on <code>net.sf.saxon:Saxon-HE:9.6.0-4</code> (via <code>nu.validator:jing:20200702VNU</code>).</li> </ul>"},{"location":"CHANGELOG.html#added_2","title":"Added","text":"<ul> <li><code>Node#wrap</code> and <code>NodeSet#wrap</code> now also accept a <code>Node</code> type argument, which will be <code>dup</code>ed for each wrapper. For cases where many nodes are being wrapped, creating a <code>Node</code> once using <code>Document#create_element</code> and passing that <code>Node</code> multiple times is significantly faster than re-parsing markup on each call. [#2657]</li> <li>[CRuby] Invocation of custom XPath or CSS handler functions may now use the <code>nokogiri</code> namespace prefix. Historically, the JRuby implementation required this namespace but the CRuby implementation did not support it. It's recommended that all XPath and CSS queries use the <code>nokogiri</code> namespace going forward. Invocation without the namespace is planned for deprecation in v1.15.0 and removal in a future release. [#2147]</li> <li><code>HTML5::Document#quirks_mode</code> and <code>HTML5::DocumentFragment#quirks_mode</code> expose the quirks mode used by the parser.</li> </ul>"},{"location":"CHANGELOG.html#improved_2","title":"Improved","text":""},{"location":"CHANGELOG.html#functional","title":"Functional","text":"<ul> <li>HTML5 parser update to reflect changes to the living specification:</li> <li>Add the &lt;search&gt; element by domenic \u00b7 whatwg/html</li> <li>Remove parse error for &lt;template&gt;&lt;tr&gt;&lt;/tr&gt; &lt;/template&gt; by zcorpan \u00b7 whatwg/html</li> </ul>"},{"location":"CHANGELOG.html#performance","title":"Performance","text":"<ul> <li>Serialization of HTML5 documents and fragments has been re-implemented and is ~10x faster than previous versions. [#2596, #2569]</li> <li>Parsing of HTML5 documents is ~90% faster thanks to additional compiler optimizations being applied. [#2639]</li> <li>Compare <code>Encoding</code> objects rather than compare their names. This is a slight performance improvement and is future-proof. [#2454] (@casperisfine)</li> </ul>"},{"location":"CHANGELOG.html#error-handling_1","title":"Error handling","text":"<ul> <li><code>Document#canonicalize</code> now raises an exception if <code>inclusive_namespaces</code> is non-nil and the mode is inclusive, i.e. <code>XML_C14N_1_0</code> or <code>XML_C14N_1_1</code>. <code>inclusive_namespaces</code> can only be passed with exclusive modes, and previously this silently failed.</li> <li>Empty CSS selectors now raise a clearer <code>Nokogiri::CSS::SyntaxError</code> message, \"empty CSS selector\". Previously the exception raised from the bowels of <code>racc</code> was \"unexpected '$' after ''\". [#2700]</li> <li>[CRuby] <code>XML::Reader</code> parsing errors encountered during <code>Reader#attribute_hash</code> and <code>Reader#namespaces</code> now raise an <code>XML::SyntaxError</code>. Previously these methods would return <code>nil</code> and users would generally experience <code>NoMethodErrors</code> from elsewhere in the code.</li> <li>Prefer <code>ruby_xmalloc</code> to <code>malloc</code> within the C extension. [#2480] (@Garfield96)</li> </ul>"},{"location":"CHANGELOG.html#installation","title":"Installation","text":"<ul> <li>Avoid compile-time conflict with system-installed <code>gumbo.h</code> on OpenBSD. [#2464]</li> <li>Remove calls to <code>vasprintf</code> in favor of platform-independent <code>rb_vsprintf</code></li> <li>Installation from source on systems missing libiconv will once again generate a helpful error message (broken since v1.11.0). [#2505]</li> <li>[CRuby+OSX] Compiling from source on MacOS will use the clang option <code>-Wno-unknown-warning-option</code> to avoid errors when Ruby injects options that clang doesn't know about. [#2689]</li> </ul>"},{"location":"CHANGELOG.html#fixed_11","title":"Fixed","text":"<ul> <li><code>SAX::Parser</code>'s <code>encoding</code> attribute will not be clobbered when an alternative encoding is passed into <code>SAX::Parser#parse_io</code>. [#1942] (@kp666)</li> <li>Serialized <code>HTML4::DocumentFragment</code> will now be properly encoded. Previously this empty string was encoded as <code>US-ASCII</code>. [#2649]</li> <li><code>Node#wrap</code> now uses the parent as the context node for parsing wrapper markup, falling back to the document for unparented nodes. Previously the document was always used.</li> <li>[CRuby] UTF-16-encoded documents longer than ~4000 code points now serialize properly. Previously the serialized document was corrupted when it exceeded the length of libxml2's internal string buffer. [#752]</li> <li>[CRuby] The HTML5 parser now correctly handles text at the end of <code>form</code> elements.</li> <li>[CRuby] <code>HTML5::Document#fragment</code> now always uses <code>body</code> as the parsing context. Previously, fragments were parsed in the context of the associated document's root node, which allowed for inconsistent parsing. [#2553]</li> <li>[CRuby] <code>Nokogiri::HTML5::Document#url</code> now correctly returns the URL passed to the constructor method. Previously it always returned <code>nil</code>. [#2583]</li> <li>[CRuby] <code>HTML5</code> encoding detection is now case-insensitive with respect to <code>meta</code> tag charset declaration. [#2693]</li> <li>[CRuby] <code>HTML5</code> fragment parsing in context of an annotation-xml node now works. Previously this rarely-used path invoked rb_funcall with incorrect parameters, resulting in an exception, a fatal error, or potentially a segfault. [#2692]</li> <li>[CRuby] <code>HTML5</code> quirks mode during fragment parsing more closely matches document parsing. [#2646]</li> <li>[JRuby] Fixed a bug with adding the same namespace to multiple nodes via <code>#add_namespace_definition</code>. [#1247]</li> <li>[JRuby] <code>NodeSet#[]</code> now raises a TypeError if passed an invalid parameter type. [#2211]</li> </ul>"},{"location":"CHANGELOG.html#deprecated_2","title":"Deprecated","text":"<ul> <li><code>Nokogiri.install_default_aliases</code> is deprecated in favor of <code>Nokogiri::EncodingHandler.install_default_aliases</code>. This is part of a private API and is probably not called by anybody, but we'll go through a deprecation cycle before removal anyway. [#2643, #2446]</li> </ul>"},{"location":"CHANGELOG.html#changed_3","title":"Changed","text":"<ul> <li>[CRuby+OSX] Technical note: On MacOS Ruby 3.2, the symbols from libxml2 and libxslt are no longer exported. Ruby 3.2 adopted new features from the Darwin toolchain that make it challenging to continue to support this rarely-used binary API. A future minor release of Nokogiri may remove these symbols (and others) entirely. Feedback from downstream gem maintainers is welcome at #2746, where you'll also be able to read deeper context on this decision.</li> </ul>"},{"location":"CHANGELOG.html#thank-you_2","title":"Thank you!","text":"<p>The following people and organizations were kind enough to sponsor @flavorjones or the Nokogiri project during the development of v1.14.0:</p> <ul> <li>G\u00f6tz G\u00f6risch (@GoetzGoerisch)</li> <li>Airbnb (@airbnb)</li> <li>Kyohei Nanba (@kyo-nanba)</li> <li>Maxime Gauthier (@biximilien)</li> <li>@renuo</li> <li>@dbootyfvrt</li> <li>YOSHIDA Katsuhiko (@kyoshidajp)</li> <li>Homebrew (@Homebrew)</li> <li>David Vrensk (@dvrensk)</li> <li>Alex Daragiu (@daragiu)</li> <li>Github (@github)</li> <li>Julian Joseph (@Julian88Tex)</li> <li>Charles Simon-Meunier (@csimonmeunier)</li> <li>Ben Slaughter (@benSlaughter)</li> <li>Garen Torikian (@gjtorikian)</li> <li>Frank Groeneveld (@frenkel)</li> <li>Hiroshi SHIBATA (@hsbt)</li> </ul>"},{"location":"CHANGELOG.html#11310-2022-12-07","title":"1.13.10 / 2022-12-07","text":""},{"location":"CHANGELOG.html#security_4","title":"Security","text":"<ul> <li>[CRuby] Address CVE-2022-23476, unchecked return value from <code>xmlTextReaderExpand</code>. See GHSA-qv4q-mr5r-qprj for more information.</li> </ul>"},{"location":"CHANGELOG.html#improvements","title":"Improvements","text":"<ul> <li>[CRuby] <code>XML::Reader#attribute_hash</code> now returns <code>nil</code> on parse errors. This restores the behavior of <code>#attributes</code> from v1.13.7 and earlier. [#2715]</li> </ul>"},{"location":"CHANGELOG.html#1139-2022-10-18","title":"1.13.9 / 2022-10-18","text":""},{"location":"CHANGELOG.html#security_5","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to address CVE-2022-2309, CVE-2022-40304, and CVE-2022-40303. See GHSA-2qc6-mcvw-92cw for more information.</li> <li>[CRuby] Vendored zlib is updated to address CVE-2022-37434. Nokogiri was not affected by this vulnerability, but this version of zlib was being flagged up by some vulnerability scanners, see #2626 for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_19","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to v2.10.3 from v2.9.14.</li> <li>[CRuby] Vendored libxslt is updated to v1.1.37 from v1.1.35.</li> <li>[CRuby] Vendored zlib is updated from 1.2.12 to 1.2.13. (See LICENSE-DEPENDENCIES.md for details on which packages redistribute this library.)</li> </ul>"},{"location":"CHANGELOG.html#fixed_12","title":"Fixed","text":"<ul> <li>[CRuby] <code>Nokogiri::XML::Namespace</code> objects, when compacted, update their internal struct's reference to the Ruby object wrapper. Previously, with GC compaction enabled, a segmentation fault was possible after compaction was triggered. [#2658] (@eightbitraptor and @peterzhu2118)</li> <li>[CRuby] <code>Document#remove_namespaces!</code> now defers freeing the underlying <code>xmlNs</code> struct until the <code>Document</code> is GCed. Previously, maintaining a reference to a <code>Namespace</code> object that was removed in this way could lead to a segfault. [#2658]</li> </ul>"},{"location":"CHANGELOG.html#1138-2022-07-23","title":"1.13.8 / 2022-07-23","text":""},{"location":"CHANGELOG.html#deprecated_3","title":"Deprecated","text":"<ul> <li><code>XML::Reader#attribute_nodes</code> is deprecated due to incompatibility between libxml2's <code>xmlReader</code> memory semantics and Ruby's garbage collector. Although this method continues to exist for backwards compatibility, it is unsafe to call and may segfault. This method will be removed in a future version of Nokogiri, and callers should use <code>#attribute_hash</code> instead. [#2598]</li> </ul>"},{"location":"CHANGELOG.html#improvements_1","title":"Improvements","text":"<ul> <li><code>XML::Reader#attribute_hash</code> is a new method to safely retrieve the attributes of a node from <code>XML::Reader</code>. [#2598, #2599]</li> </ul>"},{"location":"CHANGELOG.html#fixed_13","title":"Fixed","text":"<ul> <li>[CRuby] Calling <code>XML::Reader#attributes</code> is now safe to call. In Nokogiri &lt;= 1.13.7 this method may segfault. [#2598, #2599]</li> </ul>"},{"location":"CHANGELOG.html#1137-2022-07-12","title":"1.13.7 / 2022-07-12","text":""},{"location":"CHANGELOG.html#fixed_14","title":"Fixed","text":"<p><code>XML::Node</code> objects, when compacted, update their internal struct's reference to the Ruby object wrapper. Previously, with GC compaction enabled, a segmentation fault was possible after compaction was triggered. [#2578] (@eightbitraptor)</p>"},{"location":"CHANGELOG.html#1136-2022-05-08","title":"1.13.6 / 2022-05-08","text":""},{"location":"CHANGELOG.html#security_6","title":"Security","text":"<ul> <li>[CRuby] Address CVE-2022-29181, improper handling of unexpected data types, related to untrusted inputs to the SAX parsers. See GHSA-xh29-r2w5-wx8m for more information.</li> </ul>"},{"location":"CHANGELOG.html#improvements_2","title":"Improvements","text":"<ul> <li><code>{HTML4,XML}::SAX::{Parser,ParserContext}</code> constructor methods now raise <code>TypeError</code> instead of segfaulting when an incorrect type is passed.</li> </ul>"},{"location":"CHANGELOG.html#1135-2022-05-04","title":"1.13.5 / 2022-05-04","text":""},{"location":"CHANGELOG.html#security_7","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated to address CVE-2022-29824. See GHSA-cgx6-hpwq-fhv5 for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_20","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated from v2.9.13 to v2.9.14.</li> </ul>"},{"location":"CHANGELOG.html#improvements_3","title":"Improvements","text":"<ul> <li>[CRuby] The libxml2 HTML parser no longer exhibits quadratic behavior when recovering some broken markup related to start-of-tag and bare <code>&lt;</code> characters.</li> </ul>"},{"location":"CHANGELOG.html#changed_4","title":"Changed","text":"<ul> <li>[CRuby] The libxml2 HTML parser in v2.9.14 recovers from some broken markup differently. Notably, the XML CDATA escape sequence <code>&lt;![CDATA[</code> and incorrectly-opened comments will result in HTML text nodes starting with <code>&amp;lt;!</code> instead of skipping the invalid tag. This behavior is a direct result of the quadratic-behavior fix noted above. The behavior of downstream sanitizers relying on this behavior will also change. Some tests describing the changed behavior are in <code>test/html4/test_comments.rb</code>.</li> </ul>"},{"location":"CHANGELOG.html#1134-2022-04-11","title":"1.13.4 / 2022-04-11","text":""},{"location":"CHANGELOG.html#security_8","title":"Security","text":"<ul> <li>Address CVE-2022-24836, a regular expression denial-of-service vulnerability. See GHSA-crjr-9rc5-ghw8 for more information.</li> <li>[CRuby] Vendored zlib is updated to address CVE-2018-25032. See GHSA-v6gp-9mmm-c6p5 for more information.</li> <li>[JRuby] Vendored Xerces-J (<code>xerces:xercesImpl</code>) is updated to address CVE-2022-23437. See GHSA-xxx9-3xcr-gjj3 for more information.</li> <li>[JRuby] Vendored nekohtml (<code>org.cyberneko.html</code>) is updated to address CVE-2022-24839. See GHSA-gx8x-g87m-h5q6 for more information.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_21","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored zlib is updated from 1.2.11 to 1.2.12. (See LICENSE-DEPENDENCIES.md for details on which packages redistribute this library.)</li> <li>[JRuby] Vendored Xerces-J (<code>xerces:xercesImpl</code>) is updated from 2.12.0 to 2.12.2.</li> <li>[JRuby] Vendored nekohtml (<code>org.cyberneko.html</code>) is updated from a fork of 1.9.21 to 1.9.22.noko2. This fork is now publicly developed at https://github.com/sparklemotion/nekohtml</li> </ul>"},{"location":"CHANGELOG.html#1133-2022-02-21","title":"1.13.3 / 2022-02-21","text":""},{"location":"CHANGELOG.html#fixed_15","title":"Fixed","text":"<ul> <li>[CRuby] Revert a HTML4 parser bug in libxml 2.9.13 (introduced in Nokogiri v1.13.2). The bug causes libxml2's HTML4 parser to fail to recover when encountering a bare <code>&lt;</code> character in some contexts. This version of Nokogiri restores the earlier behavior, which is to recover from the parse error and treat the <code>&lt;</code> as normal character data (which will be serialized as <code>&amp;lt;</code> in a text node). The bug (and the fix) is only relevant when the <code>RECOVER</code> parse option is set, as it is by default. [#2461]</li> </ul>"},{"location":"CHANGELOG.html#1132-2022-02-21","title":"1.13.2 / 2022-02-21","text":""},{"location":"CHANGELOG.html#security_9","title":"Security","text":"<ul> <li>[CRuby] Vendored libxml2 is updated from 2.9.12 to 2.9.13. This update addresses CVE-2022-23308.</li> <li>[CRuby] Vendored libxslt is updated from 1.1.34 to 1.1.35. This update addresses CVE-2021-30560.</li> </ul> <p>Please see GHSA-fq42-c5rg-92c2 for more information about these CVEs.</p>"},{"location":"CHANGELOG.html#dependencies_22","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libxml2 is updated from 2.9.12 to 2.9.13. Full changelog is available at https://download.gnome.org/sources/libxml2/2.9/libxml2-2.9.13.news</li> <li>[CRuby] Vendored libxslt is updated from 1.1.34 to 1.1.35. Full changelog is available at https://download.gnome.org/sources/libxslt/1.1/libxslt-1.1.35.news</li> </ul>"},{"location":"CHANGELOG.html#1131-2022-01-13","title":"1.13.1 / 2022-01-13","text":""},{"location":"CHANGELOG.html#fixed_16","title":"Fixed","text":"<ul> <li>Fix <code>Nokogiri::XSLT.quote_params</code> regression in v1.13.0 that raised an exception when non-string stylesheet parameters were passed. Non-string parameters (e.g., integers and symbols) are now explicitly supported and both keys and values will be stringified with <code>#to_s</code>. [#2418]</li> <li>Fix CSS selector query regression in v1.13.0 that raised an <code>Nokogiri::XML::XPath::SyntaxError</code> when parsing XPath attributes mixed into the CSS query. Although this mash-up of XPath and CSS syntax previously worked unintentionally, it is now an officially supported feature and is documented as such. [#2419]</li> </ul>"},{"location":"CHANGELOG.html#1130-2022-01-06","title":"1.13.0 / 2022-01-06","text":""},{"location":"CHANGELOG.html#notes_1","title":"Notes","text":""},{"location":"CHANGELOG.html#ruby_2","title":"Ruby","text":"<p>This release introduces native gem support for Ruby 3.1. Please note that Windows users should use the <code>x64-mingw-ucrt</code> platform gem for Ruby 3.1, and <code>x64-mingw32</code> for Ruby 2.6\u20133.0 (see RubyInstaller 3.1.0 release notes).</p> <p>This release ends support for:</p> <ul> <li>Ruby 2.5, for which official support ended 2021-03-31.</li> <li>JRuby 9.2, which is a Ruby 2.5-compatible release.</li> </ul>"},{"location":"CHANGELOG.html#faster-more-reliable-installation-native-gem-for-arm64-linux","title":"Faster, more reliable installation: Native Gem for ARM64 Linux","text":"<p>This version of Nokogiri ships experimental native gem support for the <code>aarch64-linux</code> platform, which should support AWS Graviton and other ARM Linux platforms. We don't yet have CI running for this platform, and so we're interested in hearing back from y'all whether this is working, and what problems you're seeing. Please send us feedback here: Feedback: Have you used the <code>aarch64-linux</code> native gem?</p>"},{"location":"CHANGELOG.html#publishing","title":"Publishing","text":"<p>This version of Nokogiri opts-in to the \"MFA required to publish\" setting on Rubygems.org. This and all future Nokogiri gem files must be published to Rubygems by an account with multi-factor authentication enabled. This should provide some additional protection against supply-chain attacks.</p> <p>A related discussion about Trust exists at #2357 in which I invite you to participate if you have feelings or opinions on this topic.</p>"},{"location":"CHANGELOG.html#dependencies_23","title":"Dependencies","text":"<ul> <li>[CRuby] Vendored libiconv is updated from 1.15 to 1.16. (Note that libiconv is only redistributed in the native windows and native darwin gems, see <code>LICENSE-DEPENDENCIES.md</code> for more information.) [#2206]</li> <li>[CRuby] Upgrade mini_portile2 dependency from <code>~&gt; 2.6.1</code> to <code>~&gt; 2.7.0</code>. (\"ruby\" platform gem only.)</li> </ul>"},{"location":"CHANGELOG.html#improved_3","title":"Improved","text":"<ul> <li><code>{XML,HTML4}::DocumentFragment</code> constructors all now take an optional parse options parameter or block (similar to Document constructors). [#1692] (@JackMc)</li> <li><code>Nokogiri::CSS.xpath_for</code> allows an <code>XPathVisitor</code> to be injected, for finer-grained control over how CSS queries are translated into XPath.</li> <li>[CRuby] <code>XML::Reader#encoding</code> will return the encoding detected by the parser when it's not passed to the constructor. [#980]</li> <li>[CRuby] Handle abruptly-closed HTML comments as recommended by WHATWG. (Thanks to tehryanx for reporting)</li> <li>[CRuby] <code>Node#line</code> is no longer capped at 65535. libxml v2.9.0 and later support a new parse option, exposed as <code>Nokogiri::XML::ParseOptions::PARSE_BIG_LINES</code>, which is turned on by default in <code>ParseOptions::DEFAULT_{XML,XSLT,HTML,SCHEMA}</code> (Note that JRuby already supported large line numbers.) [#1764, #1493, #1617, #1505, #1003, #533]</li> <li>[CRuby] If a cycle is introduced when reparenting a node (i.e., the node becomes its own ancestor), a <code>RuntimeError</code> is raised. libxml2 does no checking for this, which means cycles would otherwise result in infinite loops on subsequent operations. (Note that JRuby already did this.) [#1912]</li> <li>[CRuby] Source builds will download zlib and libiconv via HTTPS. (\"ruby\" platform gem only.) [#2391] (@jmartin-r7)</li> <li>[JRuby] <code>Node#line</code> behavior has been modified to return the line number of the node in the final DOM structure. This behavior is different from CRuby, which returns the node's position in the input string. Ideally the two implementations would be the same, but at least is now officially documented and tested. The real-world impact of this change is that the value returned in JRuby is greater by 1 to account for the XML prolog in the output. [#2380] (@dabdine)</li> </ul>"},{"location":"CHANGELOG.html#fixed_17","title":"Fixed","text":"<ul> <li>CSS queries on HTML5 documents now correctly match foreign elements (SVG, MathML) when namespaces are not specified in the query. [#2376]</li> <li><code>XML::Builder</code> blocks restore context properly when exceptions are raised. [#2372] (@ric2b and @rinthedev)</li> <li>The <code>Nokogiri::CSS::Parser</code> cache now uses the <code>XPathVisitor</code> configuration as part of the cache key, preventing incorrect cache results from being returned when multiple <code>XPathVisitor</code> options are being used.</li> <li>Error recovery from in-context parsing (e.g., <code>Node#parse</code>) now always uses the correct <code>DocumentFragment</code> class. Previously <code>Nokogiri::HTML4::DocumentFragment</code> was always used, even for XML documents. [#1158]</li> <li><code>DocumentFragment#&gt;</code> now works properly, matching a CSS selector against only the fragment roots. [#1857]</li> <li><code>XML::DocumentFragment#errors</code> now correctly contains any parsing errors encountered. Previously this was always empty. (Note that <code>HTML::DocumentFragment#errors</code> already did this.)</li> <li>[CRuby] Fix memory leak in <code>Document#canonicalize</code> when inclusive namespaces are passed in. [#2345]</li> <li>[CRuby] Fix memory leak in <code>Document#canonicalize</code> when an argument type error is raised. [#2345]</li> <li>[CRuby] Fix memory leak in <code>EncodingHandler</code> where iconv handlers were not being cleaned up. [#2345]</li> <li>[CRuby] Fix memory leak in XPath custom handlers where string arguments were not being cleaned up. [#2345]</li> <li>[CRuby] Fix memory leak in <code>Reader#base_uri</code> where the string returned by libxml2 was not freed. [#2347]</li> <li>[JRuby] Deleting a <code>Namespace</code> from a <code>NodeSet</code> no longer modifies the <code>href</code> to be the default namespace URL.</li> <li>[JRuby] Fix XHTML formatting of closing tags for non-container elements. [#2355]</li> </ul>"},{"location":"CHANGELOG.html#deprecated_4","title":"Deprecated","text":"<ul> <li>Passing a <code>Nokogiri::XML::Node</code> as the second parameter to <code>Node.new</code> is deprecated and will generate a warning. This parameter should be a kind of <code>Nokogiri::XML::Document</code>. This will become an error in a future version of Nokogiri. [#975]</li> <li><code>Nokogiri::CSS::Parser</code>, <code>Nokogiri::CSS::Tokenizer</code>, and <code>Nokogiri::CSS::Node</code> are now internal-only APIs that are no longer documented, and should not be considered stable. With the introduction of <code>XPathVisitor</code> injection into <code>Nokogiri::CSS.xpath_for</code> there should be no reason to rely on these internal APIs.</li> <li>CSS-to-XPath utility classes <code>Nokogiri::CSS::XPathVisitorAlwaysUseBuiltins</code> and <code>XPathVisitorOptimallyUseBuiltins</code> are deprecated. Prefer <code>Nokogiri::CSS::XPathVisitor</code> with appropriate constructor arguments. These classes will be removed in a future version of Nokogiri.</li> </ul>"},{"location":"CHANGELOG.html#1125-2021-09-27","title":"1.12.5 / 2021-09-27","text":""},{"location":"CHANGELOG.html#security_10","title":"Security","text":"<p>[JRuby] Address CVE-2021-41098 (GHSA-2rr5-8q37-2w7h).</p> <p>In Nokogiri v1.12.4 and earlier, on JRuby only, the SAX parsers resolve external entities (XXE) by default. This fix turns off entity-resolution-by-default in the JRuby SAX parsers to match the CRuby SAX parsers' behavior.</p> <p>CRuby users are not affected by this CVE.</p>"},{"location":"CHANGELOG.html#fixed_18","title":"Fixed","text":"<ul> <li>[CRuby] <code>Document#to_xhtml</code> properly serializes self-closing tags in libxml &gt; 2.9.10. A behavior change introduced in libxml 2.9.11 resulted in emitting start and and tags (e.g., <code>&lt;br&gt;&lt;/br&gt;</code>) instead of a self-closing tag (e.g., <code>&lt;br/&gt;</code>) in previous Nokogiri versions. [#2324]</li> </ul>"},{"location":"CHANGELOG.html#1124-2021-08-29","title":"1.12.4 / 2021-08-29","text":""},{"location":"CHANGELOG.html#notable-fix-namespace-inheritance","title":"Notable fix: Namespace inheritance","text":"<p>Namespace behavior when reparenting nodes has historically been poorly specified and the behavior diverged between CRuby and JRuby. As a result, making this behavior consistent in v1.12.0 introduced a breaking change.</p> <p>This patch release reverts the Builder behavior present in v1.12.0..v1.12.3 but keeps the Document behavior. This release also introduces a Document attribute to allow affected users to easily change this behavior for their legacy code without invasive changes.</p>"},{"location":"CHANGELOG.html#compensating-feature-in-xmldocument","title":"Compensating Feature in XML::Document","text":"<p>This release of Nokogiri introduces a new <code>Document</code> boolean attribute, <code>namespace_inheritance</code>, which controls whether children should inherit a namespace when they are reparented. <code>Nokogiri::XML:Document</code> defaults this attribute to <code>false</code> meaning \"do not inherit,\" thereby making explicit the behavior change introduced in v1.12.0.</p> <p>CRuby users who desire the pre-v1.12.0 behavior may set <code>document.namespace_inheritance = true</code> before reparenting nodes.</p> <p>See https://nokogiri.org/rdoc/Nokogiri/XML/Document.html#namespace_inheritance-instance_method for example usage.</p>"},{"location":"CHANGELOG.html#fix-for-xmlbuilder","title":"Fix for XML::Builder","text":"<p>However, recognizing that we want <code>Builder</code>-created children to inherit namespaces, Builder now will set <code>namespace_inheritance=true</code> on the underlying document for both JRuby and CRuby. This means that, on CRuby, the pre-v1.12.0 behavior is restored.</p> <p>Users who want to turn this behavior off may pass a keyword argument to the Builder constructor like so:</p> <pre><code>Nokogiri::XML::Builder.new(namespace_inheritance: false)\n</code></pre> <p>See https://nokogiri.org/rdoc/Nokogiri/XML/Builder.html#label-Namespace+inheritance for example usage.</p>"},{"location":"CHANGELOG.html#downstream-gem-maintainers","title":"Downstream gem maintainers","text":"<p>Note that any downstream gems may want to specifically omit Nokogiri v1.12.0--v1.12.3 from their dependency specification if they rely on child namespace inheritance:</p> <pre><code>Gem::Specification.new do |gem|\n  # ...\n  gem.add_runtime_dependency 'nokogiri', '!=1.12.3', '!=1.12.2', '!=1.12.1', '!=1.12.0'\n  # ...\nend\n</code></pre>"},{"location":"CHANGELOG.html#fixed_19","title":"Fixed","text":"<ul> <li>[JRuby] Fix NPE in Schema parsing when an imported resource doesn't have a <code>systemId</code>. [#2296] (@pepijnve)</li> </ul>"},{"location":"CHANGELOG.html#1123-2021-08-10","title":"1.12.3 / 2021-08-10","text":""},{"location":"CHANGELOG.html#fixed_20","title":"Fixed","text":"<ul> <li>[CRuby] Fix compilation of libgumbo on older systems with versions of GCC that give errors on C99-isms. Affected systems include RHEL6, RHEL7, and SLES12. [#2302]</li> </ul>"},{"location":"CHANGELOG.html#1122-2021-08-04","title":"1.12.2 / 2021-08-04","text":""},{"location":"CHANGELOG.html#fixed_21","title":"Fixed","text":"<ul> <li>[CRuby] Ensure that C extension files in non-native gem installations are loaded using <code>require</code> and rely on <code>$LOAD_PATH</code> instead of using <code>require_relative</code>. This issue only exists when deleting shared libraries that exist outside the extensions directory, something users occasionally do to conserve disk space. [#2300]</li> </ul>"},{"location":"CHANGELOG.html#1121-2021-08-03","title":"1.12.1 / 2021-08-03","text":""},{"location":"CHANGELOG.html#fixed_22","title":"Fixed","text":"<ul> <li>[CRuby] Fix compilation of libgumbo on BSD systems by avoiding GNU-isms. [#2298]</li> </ul>"},{"location":"CHANGELOG.html#1120-2021-08-02","title":"1.12.0 / 2021-08-02","text":""},{"location":"CHANGELOG.html#notable-addition-html5-support-cruby-only","title":"Notable Addition: HTML5 Support (CRuby only)","text":"<p>HTML5 support has been added (to CRuby only) by merging Nokogumbo into Nokogiri. The Nokogumbo public API has been preserved, so this functionality is available under the <code>Nokogiri::HTML5</code> namespace. [#2204]</p> <p>Please note that HTML5 support is not available for JRuby in this version. However, we feel it is important to think about JRuby and we hope to work on this in the future. If you're interested in helping with HTML5 support on JRuby, please reach out to the maintainers by commenting on issue #2227.</p> <p>Many thanks to Sam Ruby, Steve Checkoway, and Craig Barnes for creating and maintaining Nokogumbo and supporting the Gumbo HTML5 parser. They're now Nokogiri core contributors with all the powers and privileges pertaining thereto. \ud83d\ude4c</p>"},{"location":"CHANGELOG.html#notable-change-nokogirihtml4-module-and-namespace","title":"Notable Change: <code>Nokogiri::HTML4</code> module and namespace","text":"<p><code>Nokogiri::HTML</code> has been renamed to <code>Nokogiri::HTML4</code>, and <code>Nokogiri::HTML</code> is aliased to preserve backwards-compatibility. <code>Nokogiri::HTML</code> and <code>Nokogiri::HTML4</code> parse methods still use libxml2's (or NekoHTML's) HTML4 parser in the v1.12 release series.</p> <p>Take special note that if you rely on the class name of an object in your code, objects will now report a class of <code>Nokogiri::HTML4::Foo</code> where they previously reported <code>Nokogiri::HTML::Foo</code>. Instead of relying on the string returned by <code>Object#class</code>, prefer <code>Class#===</code> or <code>Object#is_a?</code> or <code>Object#instance_of?</code>.</p> <p>Future releases of Nokogiri may deprecate <code>HTML</code> methods or otherwise change this behavior, so please start using <code>HTML4</code> in place of <code>HTML</code>.</p>"},{"location":"CHANGELOG.html#added_3","title":"Added","text":"<ul> <li>[CRuby] <code>Nokogiri::VERSION_INFO[\"libxslt\"][\"datetime_enabled\"]</code> is a new boolean value which describes whether libxslt (or, more properly, libexslt) has compiled-in datetime support. This generally going to be <code>true</code>, but some distros ship without this support (e.g., some mingw UCRT-based packages, see https://github.com/msys2/MINGW-packages/pull/8957). See #2272 for more details.</li> </ul>"},{"location":"CHANGELOG.html#changed_5","title":"Changed","text":"<ul> <li>Introduce a new constant, <code>Nokogiri::XML::ParseOptions::DEFAULT_XSLT</code>, which adds the libxslt-preferred options of <code>NOENT | DTDLOAD | DTDATTR | NOCDATA</code> to <code>ParseOptions::DEFAULT_XML</code>.</li> <li><code>Nokogiri.XSLT</code> parses stylesheets using <code>ParseOptions::DEFAULT_XSLT</code>, which should make some edge-case XSL transformations match libxslt's default behavior. [#1940]</li> </ul>"},{"location":"CHANGELOG.html#fixed_23","title":"Fixed","text":"<ul> <li>[CRuby] Namespaced attributes are handled properly when their parent node is reparented into another document. Previously, the namespace may have gotten dropped. [#2228]</li> <li>[CRuby] Reparented nodes no longer inherit their parent's namespace. Previously, a node without a namespace was forced to adopt its parent's namespace. [#1712, #425]</li> </ul>"},{"location":"CHANGELOG.html#improved_4","title":"Improved","text":"<ul> <li>[CRuby] Speed up (slightly) the compile time of packaged libraries <code>libiconv</code>, <code>libxml2</code>, and <code>libxslt</code> by using autoconf's <code>--disable-dependency-tracking</code> option. (\"ruby\" platform gem only.)</li> </ul>"},{"location":"CHANGELOG.html#deprecated_5","title":"Deprecated","text":"<ul> <li>Deprecating Nokogumbo's <code>Nokogiri::HTML5.get</code>. This method will be removed in a future version of Nokogiri.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_24","title":"Dependencies","text":"<ul> <li>[CRuby] Upgrade mini_portile2 dependency from <code>~&gt; 2.5.0</code> to <code>~&gt; 2.6.1</code>. (\"ruby\" platform gem only.)</li> </ul>"},{"location":"CHANGELOG.html#1117-2021-06-02","title":"1.11.7 / 2021-06-02","text":""},{"location":"CHANGELOG.html#fixed_24","title":"Fixed","text":"<ul> <li>[CRuby] Backporting an upstream fix to XPath recursion depth limits which impacted some users of complex XPath queries. This issue is present in libxml 2.9.11 and 2.9.12. [#2257]</li> </ul>"},{"location":"CHANGELOG.html#1116-2021-05-26","title":"1.11.6 / 2021-05-26","text":""},{"location":"CHANGELOG.html#fixed_25","title":"Fixed","text":"<ul> <li>[CRuby] <code>DocumentFragment#path</code> now does proper error-checking to handle behavior introduced in libxml &gt; 2.9.10. In v1.11.4 and v1.11.5, calling <code>DocumentFragment#path</code> could result in a segfault.</li> </ul>"},{"location":"CHANGELOG.html#1115-2021-05-19","title":"1.11.5 / 2021-05-19","text":""},{"location":"CHANGELOG.html#fixed_26","title":"Fixed","text":"<p>[Windows CRuby] Work around segfault at process exit on Windows when using libxml2 system DLLs.</p> <p>libxml 2.9.12 introduced new behavior to avoid memory leaks when unloading libxml2 shared libraries (see libxml/!66). Early testing caught this segfault on non-Windows platforms (see #2059 and libxml@956534e) but it was incompletely fixed and is still an issue on Windows platforms that are using system DLLs.</p> <p>We work around this by configuring libxml2 in this situation to use its default memory management functions. Note that if Nokogiri is not on Windows, or is not using shared system libraries, it will will continue to configure libxml2 to use Ruby's memory management functions. <code>Nokogiri::VERSION_INFO[\"libxml\"][\"memory_management\"]</code> will allow you to verify when the default memory management functions are being used. [#2241]</p>"},{"location":"CHANGELOG.html#added_4","title":"Added","text":"<p><code>Nokogiri::VERSION_INFO[\"libxml\"]</code> now contains the key <code>\"memory_management\"</code> to declare whether libxml2 is using its <code>default</code> memory management functions, or whether it uses the memory management functions from <code>ruby</code>. See above for more details.</p>"},{"location":"CHANGELOG.html#1114-2021-05-14","title":"1.11.4 / 2021-05-14","text":""},{"location":"CHANGELOG.html#security_11","title":"Security","text":"<p>[CRuby] Vendored libxml2 upgraded to v2.9.12 which addresses:</p> <ul> <li>CVE-2019-20388</li> <li>CVE-2020-24977</li> <li>CVE-2021-3517</li> <li>CVE-2021-3518</li> <li>CVE-2021-3537</li> <li>CVE-2021-3541</li> </ul> <p>Note that two additional CVEs were addressed upstream but are not relevant to this release. CVE-2021-3516 via <code>xmllint</code> is not present in Nokogiri, and CVE-2020-7595 has been patched in Nokogiri since v1.10.8 (see #1992).</p> <p>Please see nokogiri/GHSA-7rrm-v45f-jp64  or #2233 for a more complete analysis of these CVEs and patches.</p>"},{"location":"CHANGELOG.html#dependencies_25","title":"Dependencies","text":"<ul> <li>[CRuby] vendored libxml2 is updated from 2.9.10 to 2.9.12. (Note that 2.9.11 was skipped because it was superseded by 2.9.12 a few hours after its release.)</li> </ul>"},{"location":"CHANGELOG.html#1113-2021-04-07","title":"1.11.3 / 2021-04-07","text":""},{"location":"CHANGELOG.html#fixed_27","title":"Fixed","text":"<ul> <li>[CRuby] Passing non-<code>Node</code> objects to <code>Document#root=</code> now raises an <code>ArgumentError</code> exception. Previously this likely segfaulted. [#1900]</li> <li>[JRuby] Passing non-<code>Node</code> objects to <code>Document#root=</code> now raises an <code>ArgumentError</code> exception. Previously this raised a <code>TypeError</code> exception.</li> <li>[CRuby] arm64/aarch64 systems (like Apple's M1) can now compile libxml2 and libxslt from source (though we continue to strongly advise users to install the native gems for the best possible experience)</li> </ul>"},{"location":"CHANGELOG.html#1112-2021-03-11","title":"1.11.2 / 2021-03-11","text":""},{"location":"CHANGELOG.html#fixed_28","title":"Fixed","text":"<ul> <li>[CRuby] <code>NodeSet</code> may now safely contain <code>Node</code> objects from multiple documents. Previously the GC lifecycle of the parent <code>Document</code> objects could lead to nodes being GCed while still in scope. [#1952]</li> <li>[CRuby] Patch libxml2 to avoid \"huge input lookup\" errors on large CDATA elements. (See upstream GNOME/libxml2#200 and GNOME/libxml2!100.) [#2132].</li> <li>[CRuby+Windows] Enable Nokogumbo (and other downstream gems) to compile and link against <code>nokogiri.so</code> by including <code>LDFLAGS</code> in <code>Nokogiri::VERSION_INFO</code>. [#2167]</li> <li>[CRuby] <code>{XML,HTML}::Document.parse</code> now invokes <code>#initialize</code> exactly once. Previously <code>#initialize</code> was invoked twice on each object.</li> <li>[JRuby] <code>{XML,HTML}::Document.parse</code> now invokes <code>#initialize</code> exactly once. Previously <code>#initialize</code> was not called, which was a problem for subclassing such as done by <code>Loofah</code>.</li> </ul>"},{"location":"CHANGELOG.html#improved_5","title":"Improved","text":"<ul> <li>Reduce the number of object allocations needed when parsing an <code>HTML::DocumentFragment</code>. [#2087] (@ashmaroli)</li> <li>[JRuby] Update the algorithm used to calculate <code>Node#line</code> to be wrong less-often. The underlying parser, Xerces, does not track line numbers, and so we've always used a hacky solution for this method. [#1223, #2177]</li> <li>Introduce <code>--enable-system-libraries</code> and <code>--disable-system-libraries</code> flags to <code>extconf.rb</code>. These flags provide the same functionality as <code>--use-system-libraries</code> and the <code>NOKOGIRI_USE_SYSTEM_LIBRARIES</code> environment variable, but are more idiomatic. [#2193] (@eregon)</li> <li>[TruffleRuby] <code>--disable-static</code> is now the default on TruffleRuby when the packaged libraries are used. This is more flexible and compiles faster. (Note, though, that the default on TR is still to use system libraries.) [#2191, #2193] (@eregon)</li> </ul>"},{"location":"CHANGELOG.html#changed_6","title":"Changed","text":"<ul> <li><code>Nokogiri::XML::Path</code> is now a Module (previously it has been a Class). It has been acting solely as a Module since v1.0.0. See 8461c74.</li> </ul>"},{"location":"CHANGELOG.html#1111-2021-01-06","title":"1.11.1 / 2021-01-06","text":""},{"location":"CHANGELOG.html#fixed_29","title":"Fixed","text":"<ul> <li>[CRuby] If <code>libxml-ruby</code> is loaded before <code>nokogiri</code>, the SAX and Push parsers no longer call <code>libxml-ruby</code>'s handlers. Instead, they defensively override the libxml2 global handler before parsing. [#2168]</li> </ul>"},{"location":"CHANGELOG.html#1110-2021-01-03","title":"1.11.0 / 2021-01-03","text":""},{"location":"CHANGELOG.html#notes_2","title":"Notes","text":""},{"location":"CHANGELOG.html#faster-more-reliable-installation-native-gems-for-linux-and-osxdarwin","title":"Faster, more reliable installation: Native Gems for Linux and OSX/Darwin","text":"<p>\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries. This results in much faster installation and more reliable installation, which as you probably know are the biggest headaches for Nokogiri users.</p> <p>We've been shipping native Windows gems since 2009, but starting in v1.11.0 we are also shipping native gems for these platforms:</p> <ul> <li>Linux: <code>x86-linux</code> and <code>x86_64-linux</code> -- including musl platforms like alpine</li> <li>OSX/Darwin: <code>x86_64-darwin</code> and <code>arm64-darwin</code></li> </ul> <p>We'd appreciate your thoughts and feedback on this work at #2075.</p>"},{"location":"CHANGELOG.html#dependencies_26","title":"Dependencies","text":""},{"location":"CHANGELOG.html#ruby_3","title":"Ruby","text":"<p>This release introduces support for Ruby 2.7 and 3.0 in the precompiled native gems.</p> <p>This release ends support for:</p> <ul> <li>Ruby 2.3, for which official support ended on 2019-03-31 [#1886] (@ashmaroli)</li> <li>Ruby 2.4, for which official support ended on 2020-04-05</li> <li>JRuby 9.1, which is the Ruby 2.3-compatible release.</li> </ul>"},{"location":"CHANGELOG.html#gems","title":"Gems","text":"<ul> <li>Explicitly add racc as a runtime dependency. [#1988] (@voxik)</li> <li>[MRI] Upgrade mini_portile2 dependency from <code>~&gt; 2.4.0</code> to <code>~&gt; 2.5.0</code> [#2005] (@alejandroperea)</li> </ul>"},{"location":"CHANGELOG.html#security_12","title":"Security","text":"<p>See note below about CVE-2020-26247 in the \"Changed\" subsection entitled \"XML::Schema parsing treats input as untrusted by default\".</p>"},{"location":"CHANGELOG.html#added_5","title":"Added","text":"<ul> <li>Add Node methods for manipulating \"keyword attributes\" (for example, <code>class</code> and <code>rel</code>): <code>#kwattr_values</code>, <code>#kwattr_add</code>, <code>#kwattr_append</code>, and <code>#kwattr_remove</code>. [#2000]</li> <li>Add support for CSS queries <code>a:has(&gt; b)</code>, <code>a:has(~ b)</code>, and <code>a:has(+ b)</code>. [#688] (@jonathanhefner)</li> <li>Add <code>Node#value?</code> to better match expected semantics of a Hash-like object. [#1838, #1840] (@MatzFan)</li> <li>[CRuby] Add <code>Nokogiri::XML::Node#line=</code> for use by downstream libs like nokogumbo. [#1918] (@stevecheckoway)</li> <li><code>nokogiri.gemspec</code> is back after a 10-year hiatus. We still prefer you use the official releases, but <code>main</code> is pretty stable these days, and YOLO.</li> </ul>"},{"location":"CHANGELOG.html#performance_1","title":"Performance","text":"<ul> <li>[CRuby] The CSS <code>~=</code> operator and class selector <code>.</code> are about 2x faster. [#2137, #2135]</li> <li>[CRuby] Patch libxml2 to call <code>strlen</code> from <code>xmlStrlen</code> rather than the naive implementation, because <code>strlen</code> is generally optimized for the architecture. [#2144] (@ilyazub)</li> <li>Improve performance of some namespace operations. [#1916] (@ashmaroli)</li> <li>Remove unnecessary array allocations from Node serialization methods [#1911] (@ashmaroli)</li> <li>Avoid creation of unnecessary zero-length String objects. [#1970] (@ashmaroli)</li> <li>Always compile libxml2 and libxslt with '-O2' [#2022, #2100] (@ilyazub)</li> <li>[JRuby] Lots of code cleanup and performance improvements. [#1934] (@kares)</li> <li>[CRuby] <code>RelaxNG.from_document</code> no longer leaks memory. [#2114]</li> </ul>"},{"location":"CHANGELOG.html#improved_6","title":"Improved","text":"<ul> <li>[CRuby] Handle incorrectly-closed HTML comments as WHATWG recommends for browsers. [#2058] (Thanks to HackerOne user mayflower for reporting this)</li> <li><code>{HTML,XML}::Document#parse</code> now accept <code>Pathname</code> objects. Previously this worked only if the referenced file was less than 4096 bytes long; longer files resulted in undefined behavior because the <code>read</code> method would be repeatedly invoked. [#1821, #2110] (@doriantaylor and @phokz)</li> <li>[CRuby] Nokogumbo builds faster because it can now use header files provided by Nokogiri. [#1788] (@stevecheckoway)</li> <li>Add <code>frozen_string_literal: true</code> magic comment to all <code>lib</code> files. [#1745] (@oniofchaos)</li> <li>[JRuby] Clean up deprecated calls into JRuby. [#2027] (@headius)</li> </ul>"},{"location":"CHANGELOG.html#fixed_30","title":"Fixed","text":"<ul> <li>HTML Parsing in \"strict\" mode (i.e., the <code>RECOVER</code> parse option not set) now correctly raises a <code>XML::SyntaxError</code> exception. Previously the value of the <code>RECOVER</code> bit was being ignored by CRuby and was misinterpreted by JRuby. [#2130]</li> <li>The CSS <code>~=</code> operator now correctly handles non-space whitespace in the <code>class</code> attribute. commit e45dedd</li> <li>The switch to turn off the CSS-to-XPath cache is now thread-local, rather than being shared mutable state. [#1935]</li> <li>The Node methods <code>add_previous_sibling</code>, <code>previous=</code>, <code>before</code>, <code>add_next_sibling</code>, <code>next=</code>, <code>after</code>, <code>replace</code>, and <code>swap</code> now correctly use their parent as the context node for parsing markup. These methods now also raise a <code>RuntimeError</code> if they are called on a node with no parent. [nokogumbo#160]</li> <li>[JRuby] <code>XML::Schema</code> XSD validation errors are captured in <code>XML::Schema#errors</code>. These errors were previously ignored.</li> <li>[JRuby] Standardize reading from IO like objects, including StringIO. [#1888, #1897]</li> <li>[JRuby] Fix how custom XPath function namespaces are inferred to be less naive. [#1890, #2148]</li> <li>[JRuby] Clarify exception message when custom XPath functions can't be resolved.</li> <li>[JRuby] Comparison of Node to Document with <code>Node#&lt;=&gt;</code> now matches CRuby/libxml2 behavior.</li> <li>[CRuby] Syntax errors are now correctly captured in <code>Document#errors</code> for short HTML documents. Previously the SAX parser used for encoding detection was clobbering libxml2's global error handler.</li> <li>[CRuby] Fixed installation on AIX with respect to <code>vasprintf</code>. [#1908]</li> <li>[CRuby] On some platforms, avoid symbol name collision with glibc's <code>canonicalize</code>. [#2105]</li> <li>[Windows Visual C++] Fixed compiler warnings and errors. [#2061, #2068]</li> <li>[CRuby] Fixed Nokogumbo integration which broke in the v1.11.0 release candidates. [#1788] (@stevecheckoway)</li> <li>[JRuby] Fixed document encoding regression in v1.11.0 release candidates. [#2080, #2083] (@thbar)</li> </ul>"},{"location":"CHANGELOG.html#removed_1","title":"Removed","text":"<ul> <li>The internal method <code>Nokogiri::CSS::Parser.cache_on=</code> has been removed. Use <code>.set_cache</code> if you need to muck with the cache internals.</li> <li>The class method <code>Nokogiri::CSS::Parser.parse</code> has been removed. This was originally deprecated in 2009 in 13db61b. Use <code>Nokogiri::CSS.parse</code> instead.</li> </ul>"},{"location":"CHANGELOG.html#changed_7","title":"Changed","text":""},{"location":"CHANGELOG.html#xmlschema-input-is-now-untrusted-by-default","title":"<code>XML::Schema</code> input is now \"untrusted\" by default","text":"<p>Address CVE-2020-26247.</p> <p>In Nokogiri versions &lt;= 1.11.0.rc3, XML Schemas parsed by <code>Nokogiri::XML::Schema</code> were trusted by default, allowing external resources to be accessed over the network, potentially enabling XXE or SSRF attacks.</p> <p>This behavior is counter to the security policy intended by Nokogiri maintainers, which is to treat all input as untrusted by default whenever possible.</p> <p>Please note that this security fix was pushed into a new minor version, 1.11.x, rather than a patch release to the 1.10.x branch, because it is a breaking change for some schemas and the risk was assessed to be \"Low Severity\".</p> <p>More information and instructions for enabling \"trusted input\" behavior in v1.11.0.rc4 and later is available at the public advisory.</p>"},{"location":"CHANGELOG.html#html-parser-now-obeys-the-strict-or-norecover-parsing-option","title":"HTML parser now obeys the <code>strict</code> or <code>norecover</code> parsing option","text":"<p>(Also noted above in the \"Fixed\" section) HTML Parsing in \"strict\" mode (i.e., the <code>RECOVER</code> parse option not set) now correctly raises a <code>XML::SyntaxError</code> exception. Previously the value of the <code>RECOVER</code> bit was being ignored by CRuby and was misinterpreted by JRuby.</p> <p>If you're using the default parser options, you will be unaffected by this fix. If you're passing <code>strict</code> or <code>norecover</code> to your HTML parser call, you may be surprised to see that the parser now fails to recover and raises a <code>XML::SyntaxError</code> exception. Given the number of HTML documents on the internet that libxml2 would consider to be ill-formed, this is probably not what you want, and you can omit setting that parse option to restore the behavior that you have been relying upon.</p> <p>Apologies to anyone inconvenienced by this breaking bugfix being present in a minor release, but I felt it was appropriate to introduce this fix because it's straightforward to fix any code that has been relying on this buggy behavior.</p>"},{"location":"CHANGELOG.html#versioninfo-the-output-of-nokogiri-v-and-related-constants","title":"<code>VersionInfo</code>, the output of <code>nokogiri -v</code>, and related constants","text":"<p>This release changes the metadata provided in <code>Nokogiri::VersionInfo</code> which also affects the output of <code>nokogiri -v</code>. Some related constants have also been changed. If you're using <code>VersionInfo</code> programmatically, or relying on constants related to underlying library versions, please read the detailed changes for <code>Nokogiri::VersionInfo</code> at #2139 and accept our apologies for the inconvenience.</p>"},{"location":"CHANGELOG.html#11010-2020-07-06","title":"1.10.10 / 2020-07-06","text":""},{"location":"CHANGELOG.html#features","title":"Features","text":"<ul> <li>[MRI] Cross-built Windows gems now support Ruby 2.7 [#2029]. Note that prior to this release, the v1.11.x prereleases provided this support.</li> </ul>"},{"location":"CHANGELOG.html#1109-2020-03-01","title":"1.10.9 / 2020-03-01","text":""},{"location":"CHANGELOG.html#fixed_31","title":"Fixed","text":"<ul> <li>[MRI] Raise an exception when Nokogiri detects a specific libxml2 edge case involving blank Schema nodes wrapped by Ruby objects that would cause a segfault. Currently no fix is available upstream, so we're preventing a dangerous operation and informing users to code around it if possible. [#1985, #2001]</li> <li>[JRuby] Change <code>NodeSet#to_a</code> to return a RubyArray instead of Object, for compilation under JRuby 9.2.9 and later. [#1968, #1969] (@headius)</li> </ul>"},{"location":"CHANGELOG.html#1108-2020-02-10","title":"1.10.8 / 2020-02-10","text":""},{"location":"CHANGELOG.html#security_13","title":"Security","text":"<p>[MRI] Pulled in upstream patch from libxml that addresses CVE-2020-7595. Full details are available in #1992. Note that this patch is not yet (as of 2020-02-10) in an upstream release of libxml.</p>"},{"location":"CHANGELOG.html#1107-2019-12-03","title":"1.10.7 / 2019-12-03","text":""},{"location":"CHANGELOG.html#fixed_32","title":"Fixed","text":"<ul> <li>[MRI] Ensure the patch applied in v1.10.6 works with GNU <code>patch</code>. [#1954]</li> </ul>"},{"location":"CHANGELOG.html#1106-2019-12-03","title":"1.10.6 / 2019-12-03","text":""},{"location":"CHANGELOG.html#fixed_33","title":"Fixed","text":"<ul> <li>[MRI] Fix FreeBSD installation of vendored libxml2. [#1941, #1953] (@nurse)</li> </ul>"},{"location":"CHANGELOG.html#1105-2019-10-31","title":"1.10.5 / 2019-10-31","text":""},{"location":"CHANGELOG.html#security_14","title":"Security","text":"<p>[MRI] Vendored libxslt upgraded to v1.1.34 which addresses three CVEs for libxslt:</p> <ul> <li>CVE-2019-13117</li> <li>CVE-2019-13118</li> <li>CVE-2019-18197</li> <li>CVE-2019-19956</li> </ul> <p>More details are available at #1943.</p>"},{"location":"CHANGELOG.html#dependencies_27","title":"Dependencies","text":"<ul> <li>[MRI] vendored libxml2 is updated from 2.9.9 to 2.9.10</li> <li>[MRI] vendored libxslt is updated from 1.1.33 to 1.1.34</li> </ul>"},{"location":"CHANGELOG.html#1104-2019-08-11","title":"1.10.4 / 2019-08-11","text":""},{"location":"CHANGELOG.html#security_15","title":"Security","text":"<p>Address CVE-2019-5477 [#1915].</p> <p>A command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess by Ruby's <code>Kernel.open</code> method. Processes are vulnerable only if the undocumented method <code>Nokogiri::CSS::Tokenizer#load_file</code> is being passed untrusted user input.</p> <p>This vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4.</p> <p>This CVE's public notice is #1915</p>"},{"location":"CHANGELOG.html#1103-2019-04-22","title":"1.10.3 / 2019-04-22","text":""},{"location":"CHANGELOG.html#security_16","title":"Security","text":"<p>[MRI] Pulled in upstream patch from libxslt that addresses CVE-2019-11068. Full details are available in #1892. Note that this patch is not yet (as of 2019-04-22) in an upstream release of libxslt.</p>"},{"location":"CHANGELOG.html#1102-2019-03-24","title":"1.10.2 / 2019-03-24","text":""},{"location":"CHANGELOG.html#security_17","title":"Security","text":"<ul> <li>[MRI] Remove support from vendored libxml2 for future script macros. [#1871]</li> <li>[MRI] Remove support from vendored libxml2 for server-side includes within attributes. [#1877]</li> </ul>"},{"location":"CHANGELOG.html#fixed_34","title":"Fixed","text":"<ul> <li>[JRuby] Fix node ownership in duplicated documents. [#1060]</li> <li>[JRuby] Rethrow exceptions caught by Java SAX handler. [#1847, #1872] (@adjam)</li> </ul>"},{"location":"CHANGELOG.html#1101-2019-01-13","title":"1.10.1 / 2019-01-13","text":""},{"location":"CHANGELOG.html#added_6","title":"Added","text":"<ul> <li>[MRI] During installation, handle Xcode 10's new library path. [#1801, #1851] (@mlj and @deepj)</li> <li>Avoid unnecessary creation of <code>Proc</code>s in many methods. [#1776] (@chopraanmol1)</li> </ul>"},{"location":"CHANGELOG.html#fixed_35","title":"Fixed","text":"<ul> <li>CSS selector <code>:has()</code> now correctly matches against any descendant. Previously this selector matched against only direct children). [#350] (@Phrogz)</li> <li><code>NodeSet#attr</code> now returns <code>nil</code> if it's empty. Previously this raised a NoMethodError.</li> <li>[MRI] XPath errors are no longer suppressed during <code>XSLT::Stylesheet#transform</code>. Previously these errors were suppressed which led to silent failures and a subsequent segfault. [#1802]</li> </ul>"},{"location":"CHANGELOG.html#1100-2019-01-04","title":"1.10.0 / 2019-01-04","text":""},{"location":"CHANGELOG.html#added_7","title":"Added","text":"<ul> <li>[MRI] Cross-built Windows gems now support Ruby 2.6 [#1842, #1850]</li> </ul>"},{"location":"CHANGELOG.html#dependencies_28","title":"Dependencies","text":"<ul> <li>This release ends support for Ruby 2.2, for which official support ended on 2018-03-31 [#1841]</li> <li>This release ends support for JRuby 1.7, for which official support ended on 2017-11-21 [#1741]</li> <li>[MRI] libxml2 is updated from 2.9.8 to 2.9.9</li> <li>[MRI] libxslt is updated from 1.1.32 to 1.1.33</li> </ul>"},{"location":"CHANGELOG.html#191-2018-12-17","title":"1.9.1 / 2018-12-17","text":""},{"location":"CHANGELOG.html#fixed_36","title":"Fixed","text":"<ul> <li>Fix a bug introduced in v1.9.0 where <code>XML::DocumentFragment#dup</code> no longer returned an instance of the callee's class, instead always returning an <code>XML::DocumentFragment</code>. This notably broke any subclass of <code>XML::DocumentFragment</code> including <code>HTML::DocumentFragment</code> as well as the Loofah gem's <code>Loofah::HTML::DocumentFragment</code>. [#1846]</li> </ul>"},{"location":"CHANGELOG.html#190-2018-12-17","title":"1.9.0 / 2018-12-17","text":""},{"location":"CHANGELOG.html#security_18","title":"Security","text":"<ul> <li>[JRuby] Upgrade Xerces dependency from 2.11.0 to 2.12.0 to address upstream vulnerability CVE-2012-0881 [#1831] (Thanks @grajagandev for reporting.)</li> </ul>"},{"location":"CHANGELOG.html#improved_7","title":"Improved","text":"<ul> <li>Decrease installation size by removing many unneeded files (e.g., <code>/test</code>) from the packaged gems. [#1719] (@stevecrozz)</li> </ul>"},{"location":"CHANGELOG.html#added_8","title":"Added","text":"<ul> <li><code>XML::Attr#value=</code> allows HTML node attribute values to be set to either a blank string or an empty boolean attribute. [#1800]</li> <li>Introduce <code>XML::Node#wrap</code> which does what <code>XML::NodeSet#wrap</code> has always done, but for a single node. [#1531] (@ethirajsrinivasan)</li> <li>[MRI] Improve installation experience on macOS High Sierra (Darwin). [#1812, #1813] (@gpakosz and @nurse)</li> <li>[MRI] <code>Node#dup</code> supports copying a node directly to a new document. See the method documentation for details.</li> <li>[MRI] <code>DocumentFragment#dup</code> is now more memory-efficient, avoiding making unnecessary copies. [#1063]</li> <li>[JRuby] <code>NodeSet</code> has been rewritten to improve performance! [#1795]</li> </ul>"},{"location":"CHANGELOG.html#fixed_37","title":"Fixed","text":"<ul> <li><code>NodeSet#each</code> now returns <code>self</code> instead of zero. [#1822] (@olehif)</li> <li>[MRI] Address a memory leak when using <code>XML::Builder</code> to create nodes with namespaces. [#1810]</li> <li>[MRI] Address a memory leak when unparenting a DTD. [#1784] (@stevecheckoway)</li> <li>[MRI] Use <code>RbConfig::CONFIG</code> instead of <code>::MAKEFILE_CONFIG</code> to fix installations that use Makefile macros. [#1820] (@nobu)</li> <li>[JRuby] Decrease large memory usage when making nested XPath queries. [#1749]</li> <li>[JRuby] Fix failing tests on JRuby 9.2.x</li> <li>[JRuby] Fix default namespaces in nodes reparented into a different document [#1774]</li> <li>[JRuby] Fix support for Java 9. [#1759] (@Taywee)</li> </ul>"},{"location":"CHANGELOG.html#dependencies_29","title":"Dependencies","text":"<ul> <li>[MRI] Upgrade mini_portile2 dependency from <code>~&gt; 2.3.0</code> to <code>~&gt; 2.4.0</code></li> </ul>"},{"location":"CHANGELOG.html#185-2018-10-04","title":"1.8.5 / 2018-10-04","text":""},{"location":"CHANGELOG.html#security_19","title":"Security","text":"<p>[MRI] Pulled in upstream patches from libxml2 that address CVE-2018-14404 and CVE-2018-14567. Full details are available in #1785. Note that these patches are not yet (as of 2018-10-04) in an upstream release of libxml2.</p>"},{"location":"CHANGELOG.html#fixed_38","title":"Fixed","text":"<ul> <li>[MRI] Fix regression in installation when building against system libraries, where some systems would not be able to find libxml2 or libxslt when present. (Regression introduced in v1.8.3.) [#1722]</li> <li>[JRuby] Fix node reparenting when the destination doc is empty. [#1773]</li> </ul>"},{"location":"CHANGELOG.html#184-2018-07-03","title":"1.8.4 / 2018-07-03","text":""},{"location":"CHANGELOG.html#fixed_39","title":"Fixed","text":"<ul> <li>[MRI] Fix memory leak when creating nodes with namespaces. (Introduced in v1.5.7) [#1771]</li> </ul>"},{"location":"CHANGELOG.html#183-2018-06-16","title":"1.8.3 / 2018-06-16","text":""},{"location":"CHANGELOG.html#security_20","title":"Security","text":"<p>[MRI] Behavior in libxml2 has been reverted which caused CVE-2018-8048 (loofah gem), CVE-2018-3740 (sanitize gem), and CVE-2018-3741 (rails-html-sanitizer gem). The commit in question is here:</p> <p>https://github.com/GNOME/libxml2/commit/960f0e2</p> <p>and more information is available about this commit and its impact here:</p> <p>https://github.com/flavorjones/loofah/issues/144</p> <p>This release simply reverts the libxml2 commit in question to protect users of Nokogiri's vendored libraries from similar vulnerabilities.</p> <p>If you're offended by what happened here, I'd kindly ask that you comment on the upstream bug report here:</p> <p>https://bugzilla.gnome.org/show_bug.cgi?id=769760</p>"},{"location":"CHANGELOG.html#more-security","title":"More Security","text":"<p>[MRI] Vendored libxml2 upgraded to v2.9.8 which addresses CVE-2016-9318 [#1582].</p>"},{"location":"CHANGELOG.html#dependencies_30","title":"Dependencies","text":"<ul> <li>[MRI] libxml2 is updated from 2.9.7 to 2.9.8</li> </ul>"},{"location":"CHANGELOG.html#added_9","title":"Added","text":"<ul> <li><code>Node#classes</code>, <code>#add_class</code>, <code>#append_class</code>, and <code>#remove_class</code> are added.</li> <li><code>NodeSet#append_class</code> is added.</li> <li><code>NodeSet#remove_attribute</code> is a new alias for <code>NodeSet#remove_attr</code>.</li> <li><code>NodeSet#each</code> now returns an <code>Enumerator</code> when no block is passed (@park53kr)</li> <li>[JRuby] General improvements in JRuby implementation (@kares)</li> </ul>"},{"location":"CHANGELOG.html#fixed_40","title":"Fixed","text":"<ul> <li>CSS attribute selectors now gracefully handle queries using integers. [#711]</li> <li>Handle ASCII-8BIT encoding on fragment input [#553]</li> <li>Handle non-string return values within <code>Reader</code> [#898]</li> <li>[JRuby] Allow <code>Node#replace</code> to insert Comment and CDATA nodes. [#1666]</li> <li>[JRuby] Stability and speed improvements to <code>Node</code>, <code>Sax::PushParser</code>, and the JRuby implementation [#1708, #1710, #1501]</li> </ul>"},{"location":"CHANGELOG.html#182-2018-01-29","title":"1.8.2 / 2018-01-29","text":""},{"location":"CHANGELOG.html#security_21","title":"Security","text":"<p>[MRI] The update of vendored libxml2 from 2.9.5 to 2.9.7 addresses at least one published vulnerability, CVE-2017-15412. [#1714 has complete details]</p>"},{"location":"CHANGELOG.html#dependencies_31","title":"Dependencies","text":"<ul> <li>[MRI] libxml2 is updated from 2.9.5 to 2.9.7</li> <li>[MRI] libxslt is updated from 1.1.30 to 1.1.32</li> </ul>"},{"location":"CHANGELOG.html#added_10","title":"Added","text":"<ul> <li>[MRI] OpenBSD installation should be a bit easier now. [#1685] (@jeremyevans)</li> <li>[MRI] Cross-built Windows gems now support Ruby 2.5</li> </ul>"},{"location":"CHANGELOG.html#fixed_41","title":"Fixed","text":"<ul> <li><code>Node#serialize</code> once again returns UTF-8-encoded strings. [#1659]</li> <li>[JRuby] made SAX parsing of characters consistent with C implementation [#1676] (@andrew-aladev)</li> <li>[MRI] Predefined entities, when inspected, no longer cause a segfault. [#1238]</li> </ul>"},{"location":"CHANGELOG.html#181-2017-09-19","title":"1.8.1 / 2017-09-19","text":""},{"location":"CHANGELOG.html#dependencies_32","title":"Dependencies","text":"<ul> <li>[MRI] libxml2 is updated from 2.9.4 to 2.9.5.</li> <li>[MRI] libxslt is updated from 1.1.29 to 1.1.30.</li> <li>[MRI] optional dependency on the pkg-config gem has had its constraint loosened to <code>~&gt; 1.1</code> (from <code>~&gt; 1.1.7</code>). [#1660]</li> <li>[MRI] Upgrade mini_portile2 dependency from <code>~&gt; 2.2.0</code> to <code>~&gt; 2.3.0</code>, which will validate checksums on the vendored libxml2 and libxslt tarballs before using them.</li> </ul>"},{"location":"CHANGELOG.html#fixed_42","title":"Fixed","text":"<ul> <li><code>NodeSet#first</code> with an integer argument longer than the length of the <code>NodeSet</code> now correctly clamps the length of the returned <code>NodeSet</code> to the original length. [#1650] (@Derenge)</li> <li>[MRI] Ensure CData.new raises TypeError if the <code>content</code> argument is not implicitly convertible into a string. [#1669]</li> </ul>"},{"location":"CHANGELOG.html#180-2017-06-04","title":"1.8.0 / 2017-06-04","text":""},{"location":"CHANGELOG.html#dependencies_33","title":"Dependencies","text":"<p>This release ends support for Ruby 2.1 on Windows in the <code>x86-mingw32</code> and <code>x64-mingw32</code> platform gems (containing pre-compiled DLLs). Official support ended for Ruby 2.1 on 2017-04-01.</p> <p>Please note that this deprecation note only applies to the precompiled Windows gems. Ruby 2.1 continues to be supported (for now) in the default gem when compiled on installation.</p>"},{"location":"CHANGELOG.html#dependencies_34","title":"Dependencies","text":"<ul> <li>[Windows] Upgrade iconv from 1.14 to 1.15 (unless --use-system-libraries)</li> <li>[Windows] Upgrade zlib from 1.2.8 to 1.2.11 (unless --use-system-libraries)</li> <li>[MRI] Upgrade rake-compiler dependency from 0.9.2 to 1.0.3</li> <li>[MRI] Upgrade mini-portile2 dependency from <code>~&gt; 2.1.0</code> to <code>~&gt; 2.2.0</code></li> <li>[JRuby] Removed support for <code>jruby --1.8</code> code paths. [#1607] (@kares)</li> <li>[MRI Windows] Retrieve zlib source from http://zlib.net/fossils to avoid deprecation issues going forward. See #1632 for details around this problem.</li> </ul>"},{"location":"CHANGELOG.html#added_11","title":"Added","text":"<ul> <li><code>NodeSet#clone</code> is now an alias for <code>NodeSet#dup</code> [#1503] (@stephankaag)</li> <li>Allow Processing Instructions and Comments as children of a document root. [#1033] (@windwiny)</li> <li>[MRI] <code>PushParser#replace_entities</code> and <code>#replace_entities=</code> will control whether entities are replaced or not. [#1017] (@spraints)</li> <li>[MRI] <code>SyntaxError#to_s</code> now includes line number, column number, and log level if made available by the parser. [#1304, #1637] (@spk and @ccarruitero)</li> <li>[MRI] Cross-built Windows gems now support Ruby 2.4</li> <li>[MRI] Support for frozen string literals. [#1413]</li> <li>[MRI] Support for installing Nokogiri on a machine in FIPS-enabled mode [#1544]</li> <li>[MRI] Vendored libraries are verified with SHA-256 hashes (formerly some MD5 hashes were used) [#1544]</li> <li>[JRuby] (performance) remove unnecessary synchronization of class-cache [#1563] (@kares)</li> <li>[JRuby] (performance) remove unnecessary cloning of objects in XPath searches [#1563] (@kares)</li> <li>[JRuby] (performance) more performance improvements, particularly in XPath, Reader, XmlNode, and XmlNodeSet [#1597] (@kares)</li> </ul>"},{"location":"CHANGELOG.html#fixed_43","title":"Fixed","text":"<ul> <li><code>HTML::SAX::Parser#parse_io</code> now correctly parses HTML and not XML [#1577] (Thanks for the test case, @gregors)</li> <li>Support installation on systems with a <code>lib64</code> site config. [#1562]</li> <li>[MRI] on OpenBSD, do not require gcc if using system libraries [#1515] (@jeremyevans)</li> <li>[MRI] <code>XML::Attr.new</code> checks type of Document arg to prevent segfaults. [#1477]</li> <li>[MRI] Prefer xmlCharStrdup (and friends) to strdup (and friends), which can cause problems on some platforms. [#1517] (@jeremy)</li> <li>[JRuby] correctly append a text node before another text node [#1318] (@jkraemer)</li> <li>[JRuby] custom xpath functions returning an integer now work correctly [#1595] (@kares)</li> <li>[JRuby] serializing (<code>#to_html</code>, <code>#to_s</code>, et al) a document with explicit encoding now works correctly. [#1281, #1440] (@kares)</li> <li>[JRuby] <code>XML::Reader</code> now returns parse errors [#1586] (@kares)</li> <li>[JRuby] Empty <code>NodeSet</code>s are now decorated properly. [#1319] (@kares)</li> <li>[JRuby] Merged nodes no longer results in Java exceptions during XPath queries. [#1320] (@kares)</li> </ul>"},{"location":"CHANGELOG.html#172-2017-05-09","title":"1.7.2 / 2017-05-09","text":""},{"location":"CHANGELOG.html#security_22","title":"Security","text":"<p>[MRI] Upstream libxslt patches are applied to the vendored libxslt 1.1.29 which address CVE-2017-5029 and CVE-2016-4738.</p> <p>For more information:</p> <ul> <li>#1634</li> <li>http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html</li> <li>http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html</li> </ul>"},{"location":"CHANGELOG.html#171-2017-03-19","title":"1.7.1 / 2017-03-19","text":""},{"location":"CHANGELOG.html#security_23","title":"Security","text":"<p>[MRI] Upstream libxml2 patches are applied to the vendored libxml 2.9.4 which address CVE-2016-4658 and CVE-2016-5131.</p> <p>For more information:</p> <ul> <li>#1615</li> <li>http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4658.html</li> <li>http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-5131.html</li> </ul>"},{"location":"CHANGELOG.html#1701-2017-01-04","title":"1.7.0.1 / 2017-01-04","text":""},{"location":"CHANGELOG.html#fixed_44","title":"Fixed","text":"<ul> <li>Fix OpenBSD support. [#1569] (related to #1543)</li> </ul>"},{"location":"CHANGELOG.html#170-2016-12-26","title":"1.7.0 / 2016-12-26","text":""},{"location":"CHANGELOG.html#added_12","title":"Added","text":"<ul> <li>Remove deprecation warnings in Ruby 2.4.0 [#1545] (@matthewd)</li> <li>Support egcc compiler on OpenBSD [#1543] (@frenkel and @knu)</li> </ul>"},{"location":"CHANGELOG.html#dependencies_35","title":"Dependencies","text":"<p>This release ends support for:</p> <ul> <li>Ruby 1.9.2, for which official support ended on 2014-07-31</li> <li>Ruby 1.9.3, for which official support ended on 2015-02-23</li> <li>Ruby 2.0.0, for which official support ended on 2016-02-24</li> <li>MacRuby, which hasn't been actively supported since 2015-01-13 (see https://github.com/MacRuby/MacRuby/commit/f76b9d6e99c18236db617e8aceb12c27d593a483)</li> </ul>"},{"location":"CHANGELOG.html#1681-2016-10-03","title":"1.6.8.1 / 2016-10-03","text":""},{"location":"CHANGELOG.html#dependencies_36","title":"Dependencies","text":"<p>Removes required dependency on the <code>pkg-config</code> gem. This dependency was introduced in v1.6.8 and, because it's distributed under LGPL, was objectionable to many Nokogiri users (#1488, #1496).</p> <p>This version makes <code>pkg-config</code> an optional dependency. If it's installed, it's used; but otherwise Nokogiri will attempt to work around its absence.</p>"},{"location":"CHANGELOG.html#168-2016-06-06","title":"1.6.8 / 2016-06-06","text":""},{"location":"CHANGELOG.html#security_24","title":"Security","text":"<p>[MRI] Bundled libxml2 is upgraded to 2.9.4, which fixes many security issues. Many of these had previously been patched in the vendored libxml 2.9.2 in the 1.6.7.x branch, but some are newer.</p> <p>See these libxml2 email posts for more:</p> <ul> <li>https://mail.gnome.org/archives/xml/2015-November/msg00012.html</li> <li>https://mail.gnome.org/archives/xml/2016-May/msg00023.html</li> </ul> <p>For a more detailed analysis, you may care to read Canonical's take on these security issues:</p> <ul> <li>http://www.ubuntu.com/usn/usn-2994-1</li> </ul> <p>[MRI] Bundled libxslt is upgraded to 1.1.29, which fixes a security issue as well as many long-known outstanding bugs, some features, some portability improvements, and general cleanup.</p> <p>See this libxslt email post for more:</p> <ul> <li>https://mail.gnome.org/archives/xslt/2016-May/msg00004.html</li> </ul>"},{"location":"CHANGELOG.html#added_13","title":"Added","text":"<p>Several changes were made to improve performance:</p> <ul> <li>[MRI] Simplify <code>NodeSet#to_a</code> with a minor speed-up. [#1397]</li> <li><code>XML::Node#ancestors</code> optimization. [#1297] (Bruno Sutic)</li> <li>Use <code>Symbol#to_proc</code> where we weren't previously. [#1296] (Bruno Sutic)</li> <li><code>XML::DTD#each</code> uses implicit block calls. (@glaucocustodio)</li> <li>Fall back to the <code>pkg-config</code> gem if we're having trouble finding the system libxml2. This should help many FreeBSD users. [#1417]</li> <li>Set document encoding appropriately even on blank document. [#1043] (@batter)</li> </ul>"},{"location":"CHANGELOG.html#fixed_45","title":"Fixed","text":"<ul> <li>[JRuby] fix slow add_child [#692]</li> <li>[JRuby] fix load errors when deploying to JRuby/Torquebox [#1114] (@atambo and @jvshahid)</li> <li>[JRuby] fix NPE when inspecting nodes returned by <code>NodeSet#drop</code> [#1042] (@mkristian)</li> <li>[JRuby] fix nil attribute node's namespace in reader [#1327] (@codekitchen)</li> <li>[JRuby] fix Nokogiri munging unicode characters that require more than 2 bytes [#1113] (@mkristian)</li> <li>[JRuby] allow unlinking an unparented node (#1112, #1152) (@esse)</li> <li>[JRuby] allow Fragment parsing on a frozen string (#444, #1077)</li> <li>[JRuby] HTML <code>style</code> tags are no longer encoded [#1316] (@tbeauvais)</li> <li>[MRI] fix assertion failure while accessing attribute node's namespace in reader [#843] (@2potatocakes)</li> <li>[MRI] fix issue with GCing namespace nodes returned in an xpath query. [#1155]</li> <li>[MRI] Ensure C strings are null-terminated. [#1381]</li> <li>[MRI] Ensure Rubygems is loaded before using mini_portile2 at installation. (#1393, #1411) (@JonRowe)</li> <li>[MRI] Handling another edge case where the <code>libxml-ruby</code> gem's global callbacks were smashing the heap. [#1426]. (Thanks to @bbergstrom for providing an isolated test case)</li> <li>[MRI] Ensure encodings are passed to <code>Sax::Parser</code> xmldecl callback. [#844]</li> <li>[MRI] Ensure default ns prefix is applied correctly when reparenting nodes to another document. [#391] (@ylecuyer)</li> <li>[MRI] Ensure Reader handles non-existent attributes as expected. [#1254] (@ccutrer)</li> <li>[MRI] Cleanup around namespace handling when reparenting nodes. (#1332, #1333, #1444) (@cuttrer and @bradleybeddoes)</li> <li>unescape special characters in CSS queries [#1303] (@twalpole)</li> <li>consistently handle empty documents [#1349]</li> <li>Update to mini_portile2 2.1.0 to address whitespace-handling during patching. [#1402]</li> <li>Fix encoding of xml node namespaces.</li> <li>Work around issue installing Nokogiri on overlayfs (commonly used in Docker containers). (#1370, #1405)</li> </ul>"},{"location":"CHANGELOG.html#notes_3","title":"Notes","text":"<ul> <li>Removed legacy code remaining from Ruby 1.8.x support.</li> <li>Removed legacy code remaining from REE support.</li> <li>Removing hacky workarounds for bugs in some older versions of libxml2.</li> <li>Handling C strings in a forward-compatible manner, see https://github.com/ruby/ruby/blob/v2_2_0/NEWS#L319</li> </ul>"},{"location":"CHANGELOG.html#1672-2016-01-20","title":"1.6.7.2 / 2016-01-20","text":"<p>This version pulls in several upstream patches to the vendored libxml2 and libxslt to address:</p> <ul> <li>CVE-2015-7499</li> </ul> <p>Ubuntu classifies this as \"Priority: Low\", RedHat classifies this as \"Impact: Moderate\", and NIST classifies this as \"Severity: 5.0 (MEDIUM)\".</p> <p>MITRE record is https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7499</p>"},{"location":"CHANGELOG.html#1671-2015-12-16","title":"1.6.7.1 / 2015-12-16","text":"<p>This version pulls in several upstream patches to the vendored libxml2 and libxslt to address:</p> <ul> <li>CVE-2015-5312</li> <li>CVE-2015-7497</li> <li>CVE-2015-7498</li> <li>CVE-2015-7499</li> <li>CVE-2015-7500</li> <li>CVE-2015-8241</li> <li>CVE-2015-8242</li> <li>CVE-2015-8317</li> </ul> <p>See also http://www.ubuntu.com/usn/usn-2834-1/</p>"},{"location":"CHANGELOG.html#167-2015-11-29","title":"1.6.7 / 2015-11-29","text":""},{"location":"CHANGELOG.html#added_14","title":"Added","text":"<p>This version supports native builds on Windows using the RubyInstaller DevKit. It also supports Ruby 2.2.x on Windows, as well as making several other improvements to the installation process on various platforms.</p>"},{"location":"CHANGELOG.html#security_25","title":"Security","text":"<p>This version also includes the security patches already applied in v1.6.6.3 and v1.6.6.4 to the vendored libxml2 and libxslt source. See #1374 and #1376 for details.</p>"},{"location":"CHANGELOG.html#added_15","title":"Added","text":"<ul> <li>Cross-built gems now have a proper ruby version requirement. [#1266]</li> <li>Ruby 2.2.x is supported on Windows.</li> <li>Native build is supported on Windows.</li> <li>[MRI] libxml2 and libxslt <code>config.guess</code> files brought up to date. [#1326] (@hernan-erasmo)</li> <li>[JRuby] fix error in validating files with jruby (#1355, #1361) (@twalpole)</li> <li>[MRI, OSX] Patch to handle nonstandard location of <code>iconv.h</code>. (#1206, #1210, #1218, #1345) (@neonichu)</li> </ul>"},{"location":"CHANGELOG.html#fixed_46","title":"Fixed","text":"<ul> <li>[JRuby] reset the namespace cache when replacing the document's innerHtml [#1265] (@mkristian)</li> <li>[JRuby] <code>Document#parse</code> should support IO objects that respond to <code>#read</code>. [#1124] (Jake Byman)</li> <li>[MRI] Duplicate-id errors when setting the <code>id</code> attribute on HTML documents are now silenced. [#1262]</li> <li>[JRuby] SAX parser cuts texts in pieces when square brackets exist. [#1261]</li> <li>[JRuby] Namespaced attributes aren't removed by remove_attribute. [#1299]</li> </ul>"},{"location":"CHANGELOG.html#1664-2015-11-19","title":"1.6.6.4 / 2015-11-19","text":"<p>This version pulls in an upstream patch to the vendored libxml2 to address:</p> <ul> <li>unclosed comment uninitialized access issue [#1376]</li> </ul> <p>This issue was assigned CVE-2015-8710 after the fact. See http://seclists.org/oss-sec/2015/q4/616 for details.</p>"},{"location":"CHANGELOG.html#1663-2015-11-16","title":"1.6.6.3 / 2015-11-16","text":"<p>This version pulls in several upstream patches to the vendored libxml2 and libxslt to address:</p> <ul> <li>CVE-2015-1819</li> <li>CVE-2015-7941_1</li> <li>CVE-2015-7941_2</li> <li>CVE-2015-7942</li> <li>CVE-2015-7942-2</li> <li>CVE-2015-8035</li> <li>CVE-2015-7995</li> </ul> <p>See #1374 for details.</p>"},{"location":"CHANGELOG.html#1662-2015-01-23","title":"1.6.6.2 / 2015-01-23","text":""},{"location":"CHANGELOG.html#fixed_47","title":"Fixed","text":"<ul> <li>Fixed installation issue affecting compiler arguments. [#1230]</li> </ul>"},{"location":"CHANGELOG.html#1661-2015-01-22","title":"1.6.6.1 / 2015-01-22","text":"<p>Note that 1.6.6.0 was not released.</p>"},{"location":"CHANGELOG.html#added_16","title":"Added","text":"<ul> <li>Unified <code>Node</code> and <code>NodeSet</code> implementations of <code>#search</code>, <code>#xpath</code> and <code>#css</code>.</li> <li>Added <code>Node#lang</code> and <code>Node#lang=</code>.</li> <li><code>bin/nokogiri</code> passes the URI to <code>parse()</code> if an HTTP URL is given.</li> <li><code>bin/nokogiri</code> now loads <code>~/.nokogirirc</code> so user can define helper methods, etc.</li> <li><code>bin/nokogiri</code> can be configured to use Pry instead of IRB by adding a couple of lines to ~/.nokogirirc. [#1198]</li> <li><code>bin/nokogiri</code> can better handle urls from STDIN (aiding use of xargs). [#1065]</li> <li>JRuby 9K support.</li> </ul>"},{"location":"CHANGELOG.html#fixed_48","title":"Fixed","text":"<ul> <li><code>DocumentFragment#search</code> now matches against root nodes. [#1205]</li> <li>(MRI) More fixes related to handling libxml2 parse errors during <code>DocumentFragment#dup</code>. [#1196]</li> <li>(JRuby) Builder now handles namespace hrefs properly when there is a default ns. [#1039]</li> <li>(JRuby) Clear the XPath cache on attr removal. [#1109]</li> <li><code>XML::Comment.new</code> argument types are now consistent and safe (and documented) across MRI and JRuby. [#1224]</li> <li>(MRI) Restoring support for Ruby 1.9.2 that was broken in v1.6.4.1 and v1.6.5. [#1207]</li> <li>Check if <code>zlib</code> is available before building <code>libxml2</code>. [#1188]</li> <li>(JRuby) HtmlSaxPushParser now exists. [#1147] (Piotr Szmielew)</li> </ul>"},{"location":"CHANGELOG.html#165-2014-11-26","title":"1.6.5 / 2014-11-26","text":""},{"location":"CHANGELOG.html#added_17","title":"Added","text":"<ul> <li>Implement <code>Slop#respond_to_missing?</code>. [#1176]</li> <li>Optimized the XPath query generated by an <code>an+b</code> CSS query.</li> </ul>"},{"location":"CHANGELOG.html#fixed_49","title":"Fixed","text":"<ul> <li>Capture non-parse errors from <code>Document#dup</code> in <code>Document#errors</code>. [#1196]</li> <li>(JRuby) <code>Document#canonicalize</code> parameters are now consistent with MRI. [#1189]</li> </ul>"},{"location":"CHANGELOG.html#1641-2014-11-05","title":"1.6.4.1 / 2014-11-05","text":""},{"location":"CHANGELOG.html#fixed_50","title":"Fixed","text":"<ul> <li>(MRI) Fix a bug where CFLAGS passed in are dropped. [#1188]</li> <li>Fix a bug where CSS selector :nth(n) did not work. [#1187]</li> </ul>"},{"location":"CHANGELOG.html#164-2014-11-04","title":"1.6.4 / 2014-11-04","text":""},{"location":"CHANGELOG.html#added_18","title":"Added","text":"<ul> <li>(MRI) Bundled Libxml2 is upgraded to 2.9.2.</li> <li>(MRI) <code>nokogiri --version</code> will include a list of applied patches.</li> <li>(MRI) Nokogiri no longer prints messages directly to TTY while building the extension.</li> <li>(MRI) Detect and help user fix a missing /usr/include/iconv.h on OS X. [#1111]</li> <li>(MRI) Improve the iconv detection for building libxml2.</li> </ul>"},{"location":"CHANGELOG.html#fixed_51","title":"Fixed","text":"<ul> <li>(MRI) Fix <code>DocumentFragment#element_children</code> [#1138].</li> <li>Fix a bug with CSS attribute selector without any prefix where \"foo [bar]\" was treated as \"foo[bar]\". [#1174]</li> </ul>"},{"location":"CHANGELOG.html#1631-2014-07-21","title":"1.6.3.1 / 2014-07-21","text":""},{"location":"CHANGELOG.html#fixed_52","title":"Fixed","text":"<ul> <li>Addressing an Apple Macintosh installation problem for GCC users. [#1130] (@zenspider)</li> </ul>"},{"location":"CHANGELOG.html#163-2014-07-20","title":"1.6.3 / 2014-07-20","text":""},{"location":"CHANGELOG.html#added_19","title":"Added","text":"<ul> <li>Added <code>Node#document?</code> and <code>Node#processing_instruction?</code></li> </ul>"},{"location":"CHANGELOG.html#fixed_53","title":"Fixed","text":"<ul> <li>[JRuby] Fix Ruby memory exhaustion vulnerability. [#1087] (@ocher)</li> <li>[MRI] Fix segfault during GC when using <code>libxml-ruby</code> and <code>nokogiri</code> together in multi-threaded environment. [#895] (@ender672)</li> <li>Building on OSX 10.9 stock ruby 2.0.0 now works. [#1101] (@zenspider)</li> <li><code>Node#parse</code> now works again for HTML document nodes (broken in 1.6.2+).</li> <li>Processing instructions can now be added via <code>Node#add_next_sibling</code>.</li> </ul>"},{"location":"CHANGELOG.html#1621-2014-05-13","title":"1.6.2.1 / 2014-05-13","text":""},{"location":"CHANGELOG.html#fixed_54","title":"Fixed","text":"<ul> <li>Fix statically-linked libxml2 installation when using universal builds of Ruby. [#1104]</li> <li>Patching <code>mini_portile</code> to address the git dependency detailed in [#1102].</li> <li>Library load fix to address segfault reported on some systems. [#1097]</li> </ul>"},{"location":"CHANGELOG.html#162-2014-05-12","title":"1.6.2 / 2014-05-12","text":""},{"location":"CHANGELOG.html#security_26","title":"Security","text":"<p>A set of security and bugfix patches have been backported from the libxml2 and libxslt repositories onto the version of 2.8.0 packaged with Nokogiri, including these notable security fixes:</p> <ul> <li>https://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f</li> <li>CVE-2013-2877 https://git.gnome.org/browse/libxml2/commit/?id=e50ba8164eee06461c73cd8abb9b46aa0be81869</li> <li>CVE-2014-0191 https://git.gnome.org/browse/libxml2/commit/?id=9cd1c3cfbd32655d60572c0a413e017260c854df</li> </ul> <p>It is recommended that you upgrade from 1.6.x to this version as soon as possible.</p>"},{"location":"CHANGELOG.html#dependencies_37","title":"Dependencies","text":"<p>Now requires libxml &gt;= 2.6.21 (was previously &gt;= 2.6.17).</p>"},{"location":"CHANGELOG.html#added_20","title":"Added","text":"<ul> <li>Add cross building of fat binary gems for 64-Bit Windows (x64-mingw32) and add support for native builds on Windows. [#864, #989, #1072]</li> <li>(MRI) Alias CP932 to Windows-31J if iconv does not support Windows-31J.</li> <li>(MRI) Nokogiri now links packaged libraries statically. To disable static linking, pass --disable-static to <code>extconf.rb</code>. [#923]</li> <li>(MRI) Fix a library path (LIBPATH) precedence problem caused by CRuby bug [#9760].</li> <li>(MRI) Nokogiri automatically deletes directories of packaged libraries only used during build. To keep them for debugging purposes, pass --disable-clean to <code>extconf.rb</code>. [#952]</li> <li>(MRI) Nokogiri now builds libxml2 properly with iconv support on platforms where libiconv is installed outside the system default directories, such as FreeBSD.</li> <li>Add support for an-b in nth selectors. [#886] (Magnus Bergmark)</li> <li>Add support for bare and multiple <code>:not()</code> functions in selectors. [#887] (Magnus Bergmark)</li> <li>(MRI) Add an <code>extconf.rb</code> option --use-system-libraries, alternative to setting the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES.</li> <li>(MRI) Update packaged libraries: libxslt to 1.1.28, zlib to 1.2.8, and libiconv to 1.14, respectively.</li> <li><code>Nokogiri::HTML::Document#title=</code> and <code>#meta_encoding</code>= now always add an element if not present, trying hard to find the best place to put it.</li> <li><code>Nokogiri::XML::DTD#html_dtd?</code> and <code>#html5_dtd?</code> are added.</li> <li><code>Nokogiri::XML::Node#prepend_child</code> is added. [#664]</li> <li><code>Nokogiri::XML::SAX::ParserContext#recovery</code> is added. [#453]</li> <li>Fix documentation for <code>XML::Node#namespace</code>. [#803, #802] (Hoylen Sue)</li> <li>Allow <code>Nokogiri::XML::Node#parse</code> from unparented non-element nodes. [#407]</li> </ul>"},{"location":"CHANGELOG.html#fixed_55","title":"Fixed","text":"<ul> <li>Ensure :only-child pseudo class works within :not pseudo class. [#858] (Yamagishi Kazutoshi)</li> <li>Don't call pkg_config when using bundled libraries in <code>extconf.rb</code> [#931] (Shota Fukumori)</li> <li><code>Nokogiri.parse()</code> does not mistake a non-HTML document like a RSS document as HTML document. [#932] (Yamagishi Kazutoshi)</li> <li>(MRI) Perform a node type check before adding a child node to another. Previously adding a text node to another as a child could cause a SEGV. [#1092]</li> <li>(JRuby) XSD validation crashes in Java version. [#373]</li> <li>(JRuby) Document already has a root node error while using Builder. [#646]</li> <li>(JRuby) c14n tests are all passing on JRuby. [#226]</li> <li>Parsing empty documents raise <code>SyntaxError</code> in strict mode. [#1005]</li> <li>(JRuby) Make xpath faster by caching the xpath context. [#741]</li> <li>(JRuby) XML SAX push parser leaks memory on JRuby, but not on MRI. [#998]</li> <li>(JRuby) Inconsistent behavior aliasing the default namespace. [#940]</li> <li>(JRuby) Inconsistent behavior between parsing and adding namespaces. [#943]</li> <li>(JRuby) Xpath returns inconsistent result set on cloned document with namespaces and attributes. [#1034]</li> <li>(JRuby) Java-Implementation forgets element namespaces [#902]</li> <li>(JRuby) JRuby-Nokogiri does not recognise attributes inside namespaces [#1081]</li> <li>(JRuby) JRuby-Nokogiri has different comment node name [#1080]</li> <li>(JRuby) JAXPExtensionsProvider / Java 7 / Secure Processing [#1070]</li> </ul>"},{"location":"CHANGELOG.html#161-2013-12-14","title":"1.6.1 / 2013-12-14","text":""},{"location":"CHANGELOG.html#fixed_56","title":"Fixed","text":"<ul> <li>(JRuby) Fix out of memory bug when certain invalid documents are parsed.</li> <li>(JRuby) Fix regression of billion-laughs vulnerability. [#586]</li> </ul>"},{"location":"CHANGELOG.html#160-2013-06-08","title":"1.6.0 / 2013-06-08","text":"<p>This release was based on v1.5.10 and 1.6.0.rc1, and contains changes mentioned in both.</p>"},{"location":"CHANGELOG.html#deprecations","title":"Deprecations","text":"<ul> <li>Remove pre 1.9 monitoring from Travis.</li> </ul>"},{"location":"CHANGELOG.html#160rc1-2013-04-14","title":"1.6.0.rc1 / 2013-04-14","text":"<p>This release was based on v1.5.9, and so does not contain any fixes mentioned in the notes for v1.5.10.</p>"},{"location":"CHANGELOG.html#notes_4","title":"Notes","text":"<ul> <li>mini_portile is now a runtime dependency</li> <li>Ruby 1.9.2 and higher now required</li> </ul>"},{"location":"CHANGELOG.html#added_21","title":"Added","text":"<ul> <li>(MRI) Source code for libxml 2.8.0 and libxslt 1.2.26 is packaged with the gem. These libraries are compiled at gem install time unless the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES is set. VERSION_INFO (also <code>nokogiri -v</code>) exposes whether libxml was compiled from packaged source, or the system library was used.</li> <li>(Windows) libxml upgraded to 2.8.0</li> </ul>"},{"location":"CHANGELOG.html#dependencies_38","title":"Dependencies","text":"<ul> <li>Support for Ruby 1.8.7 and prior has been dropped</li> </ul>"},{"location":"CHANGELOG.html#1511-2013-12-14","title":"1.5.11 / 2013-12-14","text":""},{"location":"CHANGELOG.html#fixed_57","title":"Fixed","text":"<ul> <li>(JRuby) Fix out of memory bug when certain invalid documents are parsed.</li> <li>(JRuby) Fix regression of billion-laughs vulnerability. [#586]</li> </ul>"},{"location":"CHANGELOG.html#1510-2013-06-07","title":"1.5.10 / 2013-06-07","text":""},{"location":"CHANGELOG.html#fixed_58","title":"Fixed","text":"<ul> <li>(JRuby) Fix \"null document\" error when parsing an empty IO in jruby 1.7.3. [#883]</li> <li>(JRuby) Fix schema validation when XSD has DOCTYPE set to DTD. [#912] (Patrick Cheng)</li> <li>(MRI) Fix segfault when there is no default subelement for an HTML node. [#917]</li> </ul>"},{"location":"CHANGELOG.html#notes_5","title":"Notes","text":"<ul> <li>Use rb_ary_entry instead of RARRAY_PTR (you know, for Rubinius). [#877] (Dirkjan Bussink)</li> <li>Fix TypeError when running tests. [#900] (C\u00e9dric Boutillier)</li> </ul>"},{"location":"CHANGELOG.html#159-2013-03-21","title":"1.5.9 / 2013-03-21","text":""},{"location":"CHANGELOG.html#fixed_59","title":"Fixed","text":"<ul> <li>Ensure that prefixed attributes are properly namespaced when reparented. [#869]</li> <li>Fix for inconsistent namespaced attribute access for SVG nested in HTML. [#861]</li> <li>(MRI) Fixed a memory leak in fragment parsing if nodes are not all subsequently reparented. [#856]</li> </ul>"},{"location":"CHANGELOG.html#158-2013-03-19","title":"1.5.8 / 2013-03-19","text":""},{"location":"CHANGELOG.html#fixed_60","title":"Fixed","text":"<ul> <li>(JRuby) Fix EmptyStackException thrown by elements with xlink:href attributes and no base_uri. [#534, #805] (Patrick Quinn and Brian Hoffman)</li> <li>Fixes duplicate attributes issue introduced in 1.5.7. [#865]</li> <li>Allow use of a prefixed namespace on a root node using <code>Nokogiri::XML::Builder</code> [#868]</li> </ul>"},{"location":"CHANGELOG.html#157-2013-03-18","title":"1.5.7 / 2013-03-18","text":""},{"location":"CHANGELOG.html#added_22","title":"Added","text":"<ul> <li>Windows support for Ruby 2.0.</li> </ul>"},{"location":"CHANGELOG.html#fixed_61","title":"Fixed","text":"<ul> <li><code>SAX::Parser.parse_io</code> throw an error when used with lower case encoding. [#828]</li> <li>(JRuby) Java Nokogiri is finally green (passes all tests) under 1.8 and 1.9 mode. High five everyone. [#798, #705]</li> <li>(JRuby) <code>Nokogiri::XML::Reader</code> broken (as a pull parser) on jruby - reads the whole XML document. [#831]</li> <li>(JRuby) JRuby hangs parsing \"&amp;\". [#837]</li> <li>(JRuby) JRuby NPE parsing an invalid XML instruction. [#838]</li> <li>(JRuby) <code>Node#content=</code> incompatibility. [#839]</li> <li>(JRuby) to_xhtml doesn't print the last slash for self-closing tags in JRuby. [#834]</li> <li>(JRuby) Adding an <code>EntityReference</code> after a Text node mangles the entity in JRuby. [#835]</li> <li>(JRuby) JRuby version inconsistency: nil for empty attributes. [#818]</li> <li>CSS queries for classes (e.g., \".foo\") now treat all whitespace identically. [#854]</li> <li>Namespace behavior cleaned up and made consistent between JRuby and MRI. [#846, #801] (Michael Klein)</li> <li>(MRI) SAX parser handles empty processing instructions. [#845]</li> </ul>"},{"location":"CHANGELOG.html#156-2012-12-19","title":"1.5.6 / 2012-12-19","text":""},{"location":"CHANGELOG.html#added_23","title":"Added","text":"<ul> <li>Improved performance of <code>XML::Document#collect_namespaces</code>. [#761] (Juergen Mangler)</li> <li>New callback <code>SAX::Document#processing_instruction</code> (Kitaiti Makoto)</li> <li><code>Node#native_content=</code> allows setting unescaped node content. [#768]</li> <li>XPath lookup with namespaces supports symbol keys. [#729] (Ben Langfeld.)</li> <li><code>XML::Node#[]=</code> stringifies values. [#729] (Ben Langfeld.)</li> <li><code>bin/nokogiri</code> will process a document from $stdin</li> <li><code>bin/nokogiri -e</code> will execute a program from the command line</li> <li>(JRuby) <code>bin/nokogiri --version</code> will print the Xerces and NekoHTML versions.</li> </ul>"},{"location":"CHANGELOG.html#fixed_62","title":"Fixed","text":"<ul> <li>Nokogiri now detects XSLT transform errors. [#731] (Justin Fitzsimmons)</li> <li>Don't throw an Error when trying to replace top-level text node in DocumentFragment. [#775]</li> <li>Raise an ArgumentError if an invalid encoding is passed to the SAX parser. [#756] (Bradley Schaefer)</li> <li>Prefixed element inconsistency between CRuby and JRuby. [#712]</li> <li>(JRuby) space prior to xml preamble causes nokogiri to fail parsing. (fixed along with #748) [#790]</li> <li>(JRuby) Fixed the bug <code>Nokogiri::XML::Node#content</code> inconsistency between Java and C. [#794, #797]</li> <li>(JRuby) raises INVALID_CHARACTER_ERR exception when EntityReference name starts with '#'. [#719]</li> <li>(JRuby) doesn't coerce namespaces out of strings on a direct subclass of Node. [#715]</li> <li>(JRuby) <code>Node#content</code> now renders newlines properly. [#737] (Piotr Szmielew)</li> <li>(JRuby) Unknown namespace are ignore when the recover option is used. [#748]</li> <li>(JRuby) XPath queries for namespaces should not throw exceptions when called twice in a row. [#764]</li> <li>(JRuby) More consistent (with libxml2) whitespace formatting when emitting XML. [#771]</li> <li>(JRuby) namespaced attributes broken when appending raw xml to builder. [#770]</li> <li>(JRuby) <code>Nokogiri::XML::Document#wrap</code> raises undefined method `length' for nil:NilClass when trying to &lt;&lt; to a node. [#781]</li> <li>(JRuby) Fixed \"bad file descriptor\" bug when closing open file descriptors. [#495]</li> <li>(JRuby) JRuby/CRuby incompatibility for attribute decorators. [#785]</li> <li>(JRuby) Issues parsing valid XML with no internal subset in the DTD. [#547, #811]</li> <li>(JRuby) Issues parsing valid node content when it contains colons. [#728]</li> <li>(JRuby) Correctly parse the doc type of html documents. [#733]</li> <li>(JRuby) Include dtd in the xml output when a builder is used with create_internal_subset. [#751]</li> <li>(JRuby) builder requires textwrappers for valid utf8 in jruby, not in mri. [#784]</li> </ul>"},{"location":"CHANGELOG.html#155-2012-06-24","title":"1.5.5 / 2012-06-24","text":""},{"location":"CHANGELOG.html#added_24","title":"Added","text":"<ul> <li>Much-improved support for JRuby in 1.9 mode! Yay!</li> </ul>"},{"location":"CHANGELOG.html#fixed_63","title":"Fixed","text":"<ul> <li>Regression in JRuby Nokogiri add_previous_sibling (1.5.0 -&gt; 1.5.1) [#691] (John Shahid)</li> <li>JRuby unable to create HTML doc if URL arg provided [#674] (John Shahid)</li> <li>JRuby raises NullPointerException when given HTML document is nil or empty string. [#699]</li> <li>JRuby 1.9 error, uncaught throw 'encoding_found', has been fixed. [#673]</li> <li>Invalid encoding returned in JRuby with US-ASCII. [#583]</li> <li>XmlSaxPushParser raises IndexOutOfBoundsException when over 512 characters are given. [#567, #615]</li> <li>When xpath evaluation returns empty <code>NodeSet</code>, decorating <code>NodeSet</code>'s base document raises exception. [#514]</li> <li>JRuby raises exception when xpath with namespace is specified. pull request [#681] (Piotr Szmielew)</li> <li>JRuby renders nodes without their namespace when subclassing Node. [#695]</li> <li>JRuby raises NAMESPACE_ERR (org.w3c.dom.DOMException) while instantiating <code>RDF::RDFXML::Writer</code>. [#683]</li> <li>JRuby is not able to use namespaces in xpath. [#493]</li> <li>JRuby's Entity resolving should be consistent with C-Nokogiri [#704, #647, #703]</li> </ul>"},{"location":"CHANGELOG.html#154-2012-06-12","title":"1.5.4 / 2012-06-12","text":""},{"location":"CHANGELOG.html#added_25","title":"Added","text":"<ul> <li>The \"nokogiri\" script now has more verbose output when passed the <code>--rng</code> option. [#675] (Dan Radez)</li> <li>Build support on hardened Debian systems that use <code>-Werror=format-security</code>. [#680].</li> <li>Better build support for systems with pkg-config. [#584]</li> <li>Better build support for systems with multiple iconv installations.</li> </ul>"},{"location":"CHANGELOG.html#fixed_64","title":"Fixed","text":"<ul> <li>Segmentation fault when creating a comment node for a DocumentFragment. [#677, #678]</li> <li>Treat '.' as xpath in <code>at()</code> and <code>search()</code>. [#690]</li> </ul>"},{"location":"CHANGELOG.html#security_27","title":"Security","text":"<p>(MRI) Default parse options for XML documents were changed to not make network connections during document parsing, to avoid XXE vulnerability. [#693]</p> <p>To re-enable this behavior, the configuration method <code>nononet</code> may be called, like this:</p> <pre><code>Nokogiri::XML::Document.parse(xml) { |config| config.nononet }\n</code></pre> <p>Insert your own joke about double-negatives here.</p>"},{"location":"CHANGELOG.html#153-2012-06-01","title":"1.5.3 / 2012-06-01","text":""},{"location":"CHANGELOG.html#added_26","title":"Added","text":"<ul> <li>Support for \"prefixless\" CSS selectors ~, &gt; and + like jQuery supports. [#621, #623] (David Lee)</li> <li>Attempting to improve installation on homebrew 0.9 (with regards to iconv). Isn't package management convenient?</li> </ul>"},{"location":"CHANGELOG.html#fixed_65","title":"Fixed","text":"<ul> <li>Custom xpath functions with empty nodeset arguments cause a segfault. [#634].</li> <li><code>Nokogiri::XML::Node#css</code> now works for XML documents with default namespaces when the rule contains attribute selector without namespace.</li> <li>Fixed marshalling bugs around how arguments are passed to (and returned from) XSLT custom xpath functions. [#640].</li> <li><code>Nokogiri::XML::Reader#outer_xml</code> is broken in JRuby [#617]</li> <li><code>Nokogiri::XML::Attribute</code> on JRuby returns a nil namespace [#647]</li> <li><code>Nokogiri::XML::Node#namespace=</code> cannot set a namespace without a prefix on JRuby [#648]</li> <li>(JRuby) 1.9 mode causes dead lock while running rake [#571]</li> <li><code>HTML::Document#meta_encoding</code> does not raise exception on docs with malformed content-type. [#655]</li> <li>Fixing segfault related to unsupported encodings in in-context parsing on 1.8.7. [#643]</li> <li>(JRuby) Concurrency issue in XPath parsing. [#682]</li> </ul>"},{"location":"CHANGELOG.html#152-2012-03-09","title":"1.5.2 / 2012-03-09","text":"<p>Repackaging of 1.5.1 with a gemspec that is compatible with older Rubies. [#631, #632]</p>"},{"location":"CHANGELOG.html#151-2012-03-09","title":"1.5.1 / 2012-03-09","text":""},{"location":"CHANGELOG.html#added_27","title":"Added","text":"<ul> <li><code>XML::Builder#comment</code> allows creation of comment nodes.</li> <li>CSS searches now support namespaced attributes. [#593]</li> <li>Java integration feature is added. Now, <code>XML::Document.wrap</code> and <code>XML::Document#to_java</code> methods are available.</li> <li>RelaxNG validator support in the <code>nokogiri</code> cli utility. [#591] (Dan Radez)</li> </ul>"},{"location":"CHANGELOG.html#fixed_66","title":"Fixed","text":"<ul> <li>Fix many memory leaks and segfault opportunities. Tim Elliott!</li> <li>extconf searches homebrew paths if homebrew is installed.</li> <li>Inconsistent behavior of Nokogiri 1.5.0 Java [#620]</li> <li>Inheriting from <code>Nokogiri::XML::Node</code> on JRuby (1.6.4/5) fails [#560]</li> <li><code>XML::Attr</code> nodes are not allowed to be added as node children, so an exception is raised. [#558]</li> <li>No longer defensively \"pickle\" adjacent text nodes on <code>Node#add_next_sibling</code> and <code>Node#add_previous_sibling</code> calls. [#595].</li> <li>Java version inconsistency: it returns nil for empty attributes [#589]</li> <li>to_xhtml incorrectly generates <code>&lt;p /&gt;&lt;/p&gt;</code> when tag is empty [#557]</li> <li><code>Document#add_child</code> now accepts a <code>Node</code>, <code>NodeSet</code>, <code>DocumentFragment</code>, or <code>String</code>. [#546].</li> <li><code>Document#create_element</code> now recognizes namespaces containing non-word characters (like \"SOAP-ENV\"). This is mostly relevant to users of Builder, which calls <code>Document#create_element</code> for nearly everything. [#531].</li> <li>File encoding broken in 1.5.0 / jruby / windows [#529]</li> <li>Java version does not return namespace defs as attrs for <code>::HTML</code> [#542]</li> <li>Bad file descriptor with Nokogiri 1.5.0 [#495]</li> <li>remove_namespace! doesn't work in pure java version [#492]</li> <li>The Nokogiri Java native build throws a null pointer exception when ActiveSupport's .blank? method is called directly on a parsed object. [#489]</li> <li>1.5.0 Not using correct character encoding [#488]</li> <li>Raw XML string in XML Builder broken on JRuby [#486]</li> <li>Nokogiri 1.5.0 XML generation broken on JRuby [#484]</li> <li>Do not allow multiple root nodes. [#550]</li> <li>Fixes for custom XPath functions. [#605, #606] (Juan Wajnerman)</li> <li><code>Node#to_xml</code> does not override <code>:save_with</code> if it is provided. [#505]</li> <li><code>Node#set</code> is a private method (JRuby). [#564] (Nick Sieger)</li> <li>C14n cleanup and <code>Node#canonicalize</code> (Ivan Pirlik) [#563]</li> </ul>"},{"location":"CHANGELOG.html#150-2011-07-01","title":"1.5.0 / 2011-07-01","text":""},{"location":"CHANGELOG.html#notes_6","title":"Notes","text":"<ul> <li>See changelog from 1.4.7</li> </ul>"},{"location":"CHANGELOG.html#added_28","title":"Added","text":"<ul> <li>extracted sets of <code>Node::SaveOptions</code> into <code>Node::SaveOptions::DEFAULT_{X,H,XH}TML</code> (refactor)</li> </ul>"},{"location":"CHANGELOG.html#fixed_67","title":"Fixed","text":"<ul> <li>default output of XML on JRuby is no longer formatted due to inconsistent whitespace handling. [#415]</li> <li>(JRuby) making empty <code>NodeSet</code>s with null <code>nodes</code> member safe to operate on. [#443]</li> <li>Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding.</li> <li>Add support for <code>&lt;meta charset=\"...\"&gt;</code>.</li> </ul>"},{"location":"CHANGELOG.html#150-beta3-2010-12-02","title":"1.5.0 beta3 / 2010-12-02","text":""},{"location":"CHANGELOG.html#notes_7","title":"Notes","text":"<ul> <li>JRuby performance tuning</li> <li>See changelog from 1.4.4</li> </ul>"},{"location":"CHANGELOG.html#fixed_68","title":"Fixed","text":"<ul> <li><code>Node#inner_text</code> no longer returns nil. (JRuby) [#264]</li> </ul>"},{"location":"CHANGELOG.html#150-beta2-2010-07-30","title":"1.5.0 beta2 / 2010-07-30","text":""},{"location":"CHANGELOG.html#notes_8","title":"Notes","text":"<ul> <li>See changelog from 1.4.3</li> </ul>"},{"location":"CHANGELOG.html#150-beta1-2010-05-22","title":"1.5.0 beta1 / 2010-05-22","text":""},{"location":"CHANGELOG.html#notes_9","title":"Notes","text":"<ul> <li>JRuby support is provided by a new pure-java backend.</li> </ul>"},{"location":"CHANGELOG.html#dependencies_39","title":"Dependencies","text":"<ul> <li>Ruby 1.8.6 is deprecated. Nokogiri will install, but official support is ended.</li> <li>LibXML 2.6.16 and earlier are deprecated. Nokogiri will refuse to install.</li> </ul>"},{"location":"CHANGELOG.html#removed_2","title":"Removed","text":"<ul> <li>FFI support is removed.</li> </ul>"},{"location":"CHANGELOG.html#147-2011-07-01","title":"1.4.7 / 2011-07-01","text":""},{"location":"CHANGELOG.html#fixed_69","title":"Fixed","text":"<ul> <li>Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Timothy Elliott (@ender672)! [#478]</li> </ul>"},{"location":"CHANGELOG.html#146-2011-06-19","title":"1.4.6 / 2011-06-19","text":""},{"location":"CHANGELOG.html#notes_10","title":"Notes","text":"<ul> <li>This version is functionally identical to 1.4.5.</li> <li>Ruby 1.8.6 support has been restored.</li> </ul>"},{"location":"CHANGELOG.html#145-2011-05-19","title":"1.4.5 / 2011-05-19","text":""},{"location":"CHANGELOG.html#added_29","title":"Added","text":"<ul> <li><code>Nokogiri::HTML::Document#title</code> accessor gets and sets the document title.</li> <li>extracted sets of <code>Node::SaveOptions</code> into <code>Node::SaveOptions::DEFAULT_{X,H,XH}TML</code> (refactor)</li> <li>Raise an exception if a string is passed to <code>Nokogiri::XML::Schema#validate</code>. [#406]</li> </ul>"},{"location":"CHANGELOG.html#fixed_70","title":"Fixed","text":"<ul> <li><code>Node#serialize</code>-and-friends now accepts a <code>SaveOption</code> object as the, erm, save object.</li> <li><code>Nokogiri::CSS::Parser</code> has-a <code>Nokogiri::CSS::Tokenizer</code></li> <li>(JRUBY+FFI only) Weak references are now threadsafe. [#355]</li> <li>Make direct <code>start_element()</code> callback (currently used for <code>HTML::SAX::Parser</code>) pass attributes in assoc array, just as emulated <code>start_element()</code> callback does.  rel. [#356]</li> <li><code>HTML::SAX::Parser</code> should call back a block given to <code>parse*()</code> if any, just as <code>XML::SAX::Parser</code> does.</li> <li>Add further encoding detection to HTML parser that libxml2 does not do.</li> <li><code>Document#remove_namespaces!</code> now handles attributes with namespaces. [#396]</li> <li><code>XSLT::Stylesheet#transform</code> no longer segfaults when handed a non-<code>XML::Document</code>. [#452]</li> <li><code>XML::Reader</code> no longer segfaults when under GC pressure. [#439]</li> </ul>"},{"location":"CHANGELOG.html#144-2010-11-15","title":"1.4.4 / 2010-11-15","text":""},{"location":"CHANGELOG.html#added_30","title":"Added","text":"<ul> <li><code>XML::Node#children=</code> sets the node's inner html (much like #inner_html=), but returns the reparent node(s).</li> <li>XSLT supports function extensions. [#336]</li> <li>XPath bind parameter substitution. [#329]</li> <li><code>XML::Reader</code> node type constants. [#369]</li> <li>SAX Parser context provides line and column information</li> </ul>"},{"location":"CHANGELOG.html#fixed_71","title":"Fixed","text":"<ul> <li><code>XML::DTD#attributes</code> returns an empty hash instead of nil when there are no attributes.</li> <li><code>XML::DTD#{keys,each}</code> now work as expected. [#324]</li> <li><code>{XML,HTML}::DocumentFragment.{new,parse}</code> no longer strip leading and trailing whitespace. [#319]</li> <li><code>XML::Node#{add_child,add_previous_sibling,add_next_sibling,replace}</code> return a <code>NodeSet</code> when passed a string.</li> <li>Unclosed tags parsed more robustly in fragments. [#315]</li> <li><code>XML::Node#{replace,add_previous_sibling,add_next_sibling}</code> edge cases fixed related to libxml's text node merging. [#308]</li> <li>Fixed a segfault when GC occurs during xpath handler argument marshalling. [#345]</li> <li>Added hack to <code>Slop</code> decorator to work with previously defined methods. [#330]</li> <li>Fix a memory leak when duplicating child nodes. [#353]</li> <li>Fixed off-by-one bug with <code>nth-last-{child,of-type}</code> CSS selectors when NOT using <code>an+b</code> notation. [#354]</li> <li>Fixed passing of non-namespace attributes to <code>SAX::Document#start_element</code>. [#356]</li> <li>Workaround for libxml2 in-context parsing bug. [#362]</li> <li>Fixed <code>NodeSet#wrap</code> on nodes within a fragment. [#331]</li> </ul>"},{"location":"CHANGELOG.html#143-2010-07-28","title":"1.4.3 / 2010-07-28","text":""},{"location":"CHANGELOG.html#added_31","title":"Added","text":"<ul> <li><code>XML::Reader#empty_element?</code> returns true for empty elements. [#262]</li> <li><code>Node#remove_namespaces!</code> now removes namespace declarations as well. [#294]</li> <li><code>NodeSet#at_xpath</code>, <code>NodeSet#at_css</code> and <code>NodeSet#&gt;</code> do what the corresponding methods of <code>Node</code> do.</li> </ul>"},{"location":"CHANGELOG.html#fixed_72","title":"Fixed","text":"<ul> <li><code>XML::NodeSet#{include?,delete,push}</code> accept an <code>XML::Namespace</code></li> <li><code>XML::Document#parse</code> added for parsing in the context of a document</li> <li><code>XML::DocumentFragment#inner_html=</code> works with contextual parsing! [#298, #281]</li> <li><code>lib/nokogiri/css/parser.y</code> Combined CSS functions + pseudo selectors fixed</li> <li>Reparenting text nodes is safe, even when the operation frees adjacent merged nodes. [#283]</li> <li>Fixed libxml2 versionitis issue with <code>xmlFirstElementChild</code> et al. [#303]</li> <li><code>XML::Attr#add_namespace</code> now works as expected. [#252]</li> <li><code>HTML::DocumentFragment</code> uses the string's encoding. [#305]</li> <li>Fix the CSS3 selector translation rule for the general sibling combinator (a.k.a. preceding selector) that incorrectly converted \"E ~ F G\" to \"//F//G[preceding-sibling::E]\".</li> </ul>"},{"location":"CHANGELOG.html#142-2010-05-22","title":"1.4.2 / 2010-05-22","text":""},{"location":"CHANGELOG.html#added_32","title":"Added","text":"<ul> <li><code>XML::Node#parse</code> will parse XML or HTML fragments with respect to the context node.</li> <li><code>XML::Node#namespaces</code> returns all namespaces defined in the node and all ancestor nodes (previously did not return ancestors' namespace definitions).</li> <li>Added <code>Enumerable</code> to <code>XML::Node</code></li> <li><code>Nokogiri::XML::Schema#validate</code> now uses xmlSchemaValidateFile if a filename is passed, which is faster and more memory-efficient. [#219]</li> <li><code>XML::Document#create_entity</code> will create new <code>EntityDecl</code> objects. [#174]</li> <li>JRuby FFI implementation no longer uses <code>ObjectSpace._id2ref</code>, instead using Charles Nutter's rocking Weakling gem.</li> <li><code>Nokogiri::XML::Node#first_element_child</code> fetch the first child node that is an ELEMENT node.</li> <li><code>Nokogiri::XML::Node#last_element_child</code> fetch the last child node that is an ELEMENT node.</li> <li><code>Nokogiri::XML::Node#elements</code> fetch all children nodes that are ELEMENT nodes.</li> <li><code>Nokogiri::XML::Node#add_child</code>, <code>#add_previous_sibling</code>, <code>#before</code>, <code>#add_next_sibling</code>, <code>#after</code>, <code>#inner_html</code>, <code>#swap</code> and <code>#replace</code> all now accept a <code>Node</code>, <code>DocumentFragment</code>, <code>NodeSet</code>, or a string containing markup.</li> <li><code>Node#fragment?</code> indicates whether a node is a <code>DocumentFragment</code>.</li> </ul>"},{"location":"CHANGELOG.html#fixed_73","title":"Fixed","text":"<ul> <li><code>XML::NodeSet</code> is now always decorated (if the document has decorators). [#198]</li> <li><code>XML::NodeSet#slice</code> gracefully handles offset+length larger than the set length. [#200]</li> <li><code>XML::Node#content=</code> safely unlinks previous content. [#203]</li> <li><code>XML::Node#namespace=</code> takes nil as a parameter</li> <li><code>XML::Node#xpath</code> returns things other than <code>NodeSet</code> objects. [#208]</li> <li><code>XSLT::StyleSheet#transform</code> accepts hashes for parameters. [#223]</li> <li>Pseudo selectors inside <code>not()</code> work. [#205]</li> <li><code>XML::Builder</code> doesn't break when nodes are unlinked. [#228] (vihai)</li> <li>Encoding can be forced on the SAX parser. [#204] (Eugene Pimenov)</li> <li><code>XML::DocumentFragment</code> uses <code>XML::Node#parse</code> to determine children.</li> <li>Fixed a memory leak in xml reader. [#244] (sdor)</li> <li><code>Node#replace</code> returns the new child node as claimed in the RDoc. Previously returned +self+.</li> </ul>"},{"location":"CHANGELOG.html#notes_11","title":"Notes","text":"<ul> <li>The Windows gems now bundle DLLs for libxml 2.7.6 and libxslt 1.1.26. Prior to this release, libxml 2.7.3 and libxslt 1.1.24 were bundled.</li> </ul>"},{"location":"CHANGELOG.html#141-2009-12-10","title":"1.4.1 / 2009-12-10","text":""},{"location":"CHANGELOG.html#added_33","title":"Added","text":"<ul> <li>Added <code>Nokogiri::LIBXML_ICONV_ENABLED</code></li> <li>Alias <code>Node#[]</code> to <code>Node#attr</code></li> <li><code>XML::Node#next_element</code> added</li> <li><code>XML::Node#&gt;</code> added for searching a nodes immediate children</li> <li><code>XML::NodeSet#reverse</code> added</li> <li>Added fragment support to <code>Node#add_child</code>, <code>Node#add_next_sibling</code>, <code>Node#add_previous_sibling</code>, and <code>Node#replace</code>.</li> <li><code>XML::Node#previous_element</code> implemented</li> <li>Rubinius support</li> <li>The CSS selector engine now supports <code>:has()</code></li> <li><code>XML::NodeSet#filter()</code> was added</li> <li><code>XML::Node.next=</code> and .previous= are aliases for add_next_sibling and add_previous_sibling. [#183]</li> </ul>"},{"location":"CHANGELOG.html#fixed_74","title":"Fixed","text":"<ul> <li>XML fragments with namespaces do not raise an exception (regression in 1.4.0)</li> <li><code>Node#matches?</code> works in nodes contained by a <code>DocumentFragment</code>. [#158]</li> <li><code>Document</code> should not define <code>add_namespace()</code> method. [#169]</li> <li><code>XPath</code> queries returning namespace declarations do not segfault.</li> <li><code>Node#replace</code> works with nodes from different documents. [#162]</li> <li>Adding <code>XML::Document#collect_namespaces</code></li> <li>Fixed bugs in the SOAP4R adapter</li> <li>Fixed bug in <code>XML::Node#next_element</code> for certain edge cases</li> <li>Fixed load path issue with JRuby under Windows. [#160].</li> <li><code>XSLT#apply_to</code> will honor the \"output method\". (richardlehane)</li> <li>Fragments containing leading text nodes with newlines now parse properly. [#178].</li> </ul>"},{"location":"CHANGELOG.html#140-2009-10-30","title":"1.4.0 / 2009-10-30","text":""},{"location":"CHANGELOG.html#added_34","title":"Added","text":"<ul> <li><code>Node#at_xpath</code> returns the first element of the <code>NodeSet</code> matching the XPath expression.</li> <li><code>Node#at_css</code> returns the first element of the <code>NodeSet</code> matching the CSS selector.</li> <li><code>NodeSet#|</code> for unions [#119] (Serabe)</li> <li><code>NodeSet#inspect</code> makes prettier output</li> <li><code>Node#inspect</code> implemented for more rubyish document inspecting</li> <li>Added <code>XML::DTD#external_id</code></li> <li>Added <code>XML::DTD#system_id</code></li> <li>Added <code>XML::ElementContent</code> for DTD Element content validity</li> <li>Better namespace declaration support in <code>Nokogiri::XML::Builder</code></li> <li>Added <code>XML::Node#external_subset</code></li> <li>Added <code>XML::Node#create_external_subset</code></li> <li>Added <code>XML::Node#create_internal_subset</code></li> <li>XML Builder can append raw strings (#141, patch from dudleyf)</li> <li><code>XML::SAX::ParserContext</code> added</li> <li><code>XML::Document#remove_namespaces!</code> for the namespace-impaired</li> </ul>"},{"location":"CHANGELOG.html#fixed_75","title":"Fixed","text":"<ul> <li>returns nil when HTML documents do not declare a meta encoding tag. [#115]</li> <li>Uses <code>RbConfig::CONFIG['host_os']</code> to adjust <code>ENV['PATH']</code> [#113]</li> <li><code>NodeSet#search</code> is more efficient [#119] (Serabe)</li> <li><code>NodeSet#xpath</code> handles custom xpath functions</li> <li>Fixing a SEGV when <code>XML::Reader</code> gets attributes for current node</li> <li><code>Node#inner_html</code> takes the same arguments as <code>Node#to_html</code> [#117]</li> <li><code>DocumentFragment#css</code> delegates to it's child nodes [#123]</li> <li><code>NodeSet#[]</code> works with slices larger than <code>NodeSet#length</code> [#131]</li> <li>Reparented nodes maintain their namespace. [#134]</li> <li>Fixed SEGV when adding an <code>XML::Document</code> to <code>NodeSet</code></li> <li><code>XML::SyntaxError</code> can be duplicated. [#148]</li> </ul>"},{"location":"CHANGELOG.html#removed_3","title":"Removed","text":"<ul> <li>Hpricot compatibility layer removed</li> </ul>"},{"location":"CHANGELOG.html#133-2009-07-26","title":"1.3.3 / 2009-07-26","text":""},{"location":"CHANGELOG.html#added_35","title":"Added","text":"<ul> <li><code>NodeSet#children</code> returns all children of all nodes</li> </ul>"},{"location":"CHANGELOG.html#fixed_76","title":"Fixed","text":"<ul> <li>Override libxml-ruby's global error handler</li> <li><code>ParseOption#strict</code> fixed</li> <li>Fixed a segfault when sending an empty string to <code>Node#inner_html=</code> [#88]</li> <li>String encoding is now set to UTF-8 in Ruby 1.9</li> <li>Fixed a segfault when moving root nodes between documents. [#91]</li> <li>Fixed an O(n) penalty on node creation. [#101]</li> <li>Allowing XML documents to be output as HTML documents</li> </ul>"},{"location":"CHANGELOG.html#deprecations_1","title":"Deprecations","text":"<ul> <li>Hpricot compatibility layer will be removed in 1.4.0</li> </ul>"},{"location":"CHANGELOG.html#132-2009-06-22","title":"1.3.2 / 2009-06-22","text":""},{"location":"CHANGELOG.html#added_36","title":"Added","text":"<ul> <li><code>Nokogiri::XML::DTD#validate</code> will validate your document</li> </ul>"},{"location":"CHANGELOG.html#fixed_77","title":"Fixed","text":"<ul> <li><code>Nokogiri::XML::NodeSet#search</code> will search top level nodes. [#73]</li> <li>Removed namespace related methods from <code>Nokogiri::XML::Document</code></li> <li>Fixed a segfault when a namespace was added twice</li> <li>Made nokogiri work with Snow Leopard [#79]</li> <li>Mailing list has moved to: http://groups.google.com/group/nokogiri-talk</li> <li>HTML fragments now correctly handle comments and CDATA blocks. [#78]</li> <li><code>Nokogiri::XML::Document#clone</code> is now an alias of dup</li> </ul>"},{"location":"CHANGELOG.html#deprecations_2","title":"Deprecations","text":"<ul> <li><code>Nokogiri::XML::SAX::Document#start_element_ns</code> is deprecated, please switch to <code>Nokogiri::XML::SAX::Document#start_element_namespace</code></li> <li><code>Nokogiri::XML::SAX::Document#end_element_ns</code> is deprecated, please switch to <code>Nokogiri::XML::SAX::Document#end_element_namespace</code></li> </ul>"},{"location":"CHANGELOG.html#131-2009-06-07","title":"1.3.1 / 2009-06-07","text":""},{"location":"CHANGELOG.html#fixed_78","title":"Fixed","text":"<ul> <li><code>extconf.rb</code> checks for optional RelaxNG and Schema functions</li> <li>Namespace nodes are added to the Document node cache</li> </ul>"},{"location":"CHANGELOG.html#130-2009-05-30","title":"1.3.0 / 2009-05-30","text":""},{"location":"CHANGELOG.html#added_37","title":"Added","text":"<ul> <li>Builder changes scope based on block arity</li> <li>Builder supports methods ending in underscore similar to tagz</li> <li><code>Nokogiri::XML::Node#&lt;=&gt;</code> compares nodes based on Document position</li> <li><code>Nokogiri::XML::Node#matches?</code> returns true if Node can be found with given selector.</li> <li><code>Nokogiri::XML::Node#ancestors</code> now returns an <code>Nokogiri::XML::NodeSet</code></li> <li><code>Nokogiri::XML::Node#ancestors</code> will match parents against optional selector</li> <li><code>Nokogiri::HTML::Document#meta_encoding</code> for getting the meta encoding</li> <li><code>Nokogiri::HTML::Document#meta_encoding=</code> for setting the meta encoding</li> <li><code>Nokogiri::XML::Document#encoding=</code> to set the document encoding</li> <li><code>Nokogiri::XML::Schema</code> for validating documents against XSD schema</li> <li><code>Nokogiri::XML::RelaxNG</code> for validating documents against RelaxNG schema</li> <li><code>Nokogiri::HTML::ElementDescription</code> for fetching HTML element descriptions</li> <li><code>Nokogiri::XML::Node#description</code> to fetch the node description</li> <li><code>Nokogiri::XML::Node#accept</code> implements Visitor pattern</li> <li><code>bin/nokogiri</code> for easily examining documents (Yutaka HARA)</li> <li><code>Nokogiri::XML::NodeSet</code> now supports more Array and Enumerable operators: index, delete, slice, - (difference), + (concatenation), &amp; (intersection), push, pop, shift, ==</li> <li><code>Nokogiri.XML</code>, <code>Nokogiri.HTML</code> take blocks that receive <code>Nokogiri::XML::ParseOptions</code> objects</li> <li><code>Nokogiri::XML::Node#namespace</code> returns a <code>Nokogiri::XML::Namespace</code></li> <li><code>Nokogiri::XML::Node#namespace=</code> for setting a node's namespace</li> <li><code>Nokogiri::XML::DocumentFragment</code> and <code>Nokogiri::HTML::DocumentFragment</code> have a sensible API and a more robust implementation.</li> <li>JRuby 1.3.0 support via FFI.</li> </ul>"},{"location":"CHANGELOG.html#fixed_79","title":"Fixed","text":"<ul> <li>Fixed a problem with nil passed to CDATA constructor</li> <li>Fragment method deals with regular expression characters (Joel) [LH#73]</li> <li>Fixing builder scope issues [LH#61, LH#74, LH#70]</li> <li>Fixed a problem when adding a child could remove the child namespace [LH#78]</li> <li>Fixed bug with unlinking a node then reparenting it. [#22]</li> <li>Fixed failure to catch errors during XSLT parsing [#32]</li> <li>Fixed a bug with attribute conditions in CSS selectors [#36]</li> <li>Fixed intolerance of HTML attributes without values in <code>Node#{before/after/inner_html=}</code>. [#35]</li> </ul>"},{"location":"CHANGELOG.html#123-2009-03-22","title":"1.2.3 / 2009-03-22","text":""},{"location":"CHANGELOG.html#fixed_80","title":"Fixed","text":"<ul> <li>Fixing bug where a node is passed in to <code>Node#new</code></li> <li>Namespace should be assigned on DocumentFragment creation. [LH#66]</li> <li><code>Nokogiri::XML::NodeSet#dup</code> works [#10]</li> <li><code>Nokogiri::HTML</code> returns an empty Document when given a blank string [#11]</li> <li>Adding a child will remove duplicate namespace declarations [LH#67]</li> <li>Builder methods take a hash as a second argument</li> </ul>"},{"location":"CHANGELOG.html#122-2009-03-14","title":"1.2.2 / 2009-03-14","text":""},{"location":"CHANGELOG.html#added_38","title":"Added","text":"<ul> <li>Nokogiri may be used with soap4r. See <code>XSD::XMLParser::Nokogiri</code></li> <li><code>Nokogiri::XML::Node#inner_html=</code> to set the inner html for a node</li> <li>Nokogiri builder interface improvements</li> <li><code>Nokogiri::XML::Node#swap</code> swaps html for current node [LH#50]</li> </ul>"},{"location":"CHANGELOG.html#fixed_81","title":"Fixed","text":"<ul> <li>Fixed a tag nesting problem in the Builder API [LH#41]</li> <li><code>Nokogiri::HTML.fragment</code> will properly handle text only nodes [LH#43]</li> <li><code>Nokogiri::XML::Node#before</code> will prepend text nodes [LH#44]</li> <li><code>Nokogiri::XML::Node#after</code> will append text nodes</li> <li><code>Nokogiri::XML::Node#search</code> automatically registers root namespaces [LH#42]</li> <li><code>Nokogiri::XML::NodeSet#search</code> automatically registers namespaces</li> <li><code>Nokogiri::HTML::NamedCharacters</code> delegates to libxml2</li> <li><code>Nokogiri::XML::Node#[]</code> can take a symbol [LH#48]</li> <li>vasprintf for windows updated. (Geoffroy Couprie)</li> <li><code>Nokogiri::XML::Node#[]=</code> should not encode entities [LH#55]</li> <li>Namespaces should be copied to reparented nodes [LH#56]</li> <li>Nokogiri uses encoding set on the string for default in Ruby 1.9</li> <li><code>Document#dup</code> should create a new document of the same type [LH#59]</li> <li><code>Document</code> should not have a parent method [LH#64]</li> </ul>"},{"location":"CHANGELOG.html#121-2009-02-23","title":"1.2.1 / 2009-02-23","text":""},{"location":"CHANGELOG.html#fixed_82","title":"Fixed","text":"<ul> <li>Fixed a CSS selector space bug</li> <li>Fixed Ruby 1.9 String Encoding (\u89d2\u8c37\u3055\u3093)</li> </ul>"},{"location":"CHANGELOG.html#120-2009-02-22","title":"1.2.0 / 2009-02-22","text":""},{"location":"CHANGELOG.html#added_39","title":"Added","text":"<ul> <li>CSS search now supports CSS3 namespace queries</li> <li>Namespaces on the root node are automatically registered</li> <li>CSS queries use the default namespace</li> <li><code>Nokogiri::XML::Document#encoding</code> get encoding used for this document</li> <li><code>Nokogiri::XML::Document#url</code> get the document url</li> <li><code>Nokogiri::XML::Node#add_namespace</code> add a namespace to the node [LH#38]</li> <li><code>Nokogiri::XML::Node#each</code> iterate over attribute name, value pairs</li> <li><code>Nokogiri::XML::Node#keys</code> get all attribute names</li> <li><code>Nokogiri::XML::Node#line</code> get the line number for a node (Dirkjan Bussink)</li> <li><code>Nokogiri::XML::Node#serialize</code> now takes an optional encoding parameter</li> <li><code>Nokogiri::XML::Node#to_html</code>, to_xml, and to_xhtml take an optional encoding</li> <li><code>Nokogiri::XML::Node#to_str</code></li> <li><code>Nokogiri::XML::Node#to_xhtml</code> to produce XHTML documents</li> <li><code>Nokogiri::XML::Node#values</code> get all attribute values</li> <li><code>Nokogiri::XML::Node#write_to</code> writes the node to an IO object with optional encoding</li> <li><code>Nokogiri::XML::ProcessingInstruction.new</code></li> <li><code>Nokogiri::XML::SAX::PushParser</code> for all your push parsing needs.</li> </ul>"},{"location":"CHANGELOG.html#fixed_83","title":"Fixed","text":"<ul> <li>Fixed <code>Nokogiri::XML::Document#dup</code></li> <li>Fixed header detection. (rubikitch)</li> <li>Fixed a problem where invalid CSS would cause the parser to hang</li> </ul>"},{"location":"CHANGELOG.html#deprecations_3","title":"Deprecations","text":"<ul> <li><code>Nokogiri::XML::Node.new_from_str</code> will be deprecated in 1.3.0</li> </ul>"},{"location":"CHANGELOG.html#changed_8","title":"Changed","text":"<ul> <li><code>Nokogiri::HTML.fragment</code> now returns an XML::DocumentFragment [LH#32]</li> </ul>"},{"location":"CHANGELOG.html#111","title":"1.1.1","text":""},{"location":"CHANGELOG.html#added_40","title":"Added","text":"<ul> <li>Added <code>XML::Node#elem?</code></li> <li>Added <code>XML::Node#attribute_nodes</code></li> <li>Added <code>XML::Attr</code></li> <li><code>XML::Node#delete</code> added.</li> <li><code>XML::NodeSet#inner_html</code> added.</li> </ul>"},{"location":"CHANGELOG.html#fixed_84","title":"Fixed","text":"<ul> <li>Not including an HTML entity for \\r for HTML nodes.</li> <li>Removed <code>CSS::SelectorHandler</code> and <code>XML::XPathHandler</code></li> <li><code>XML::Node#attributes</code> returns an <code>Attr</code> node for the value.</li> <li><code>XML::NodeSet</code> implements <code>to_xml</code></li> </ul>"},{"location":"CHANGELOG.html#110","title":"1.1.0","text":""},{"location":"CHANGELOG.html#added_41","title":"Added","text":"<ul> <li>Custom XPath functions are now supported.  See <code>Nokogiri::XML::Node#xpath</code></li> <li>Custom CSS pseudo classes are now supported.  See <code>Nokogiri::XML::Node#css</code></li> <li><code>Nokogiri::XML::Node#&lt;&lt;</code> will add a child to the current node</li> </ul>"},{"location":"CHANGELOG.html#fixed_85","title":"Fixed","text":"<ul> <li>Mutex lock on CSS cache access</li> <li>Fixed build problems with GCC 3.3.5</li> <li><code>XML::Node#to_xml</code> now takes an indentation argument</li> <li><code>XML::Node#dup</code> takes an optional depth argument</li> <li><code>XML::Node#add_previous_sibling</code> returns new sibling node.</li> </ul>"},{"location":"CHANGELOG.html#107","title":"1.0.7","text":""},{"location":"CHANGELOG.html#fixed_86","title":"Fixed","text":"<ul> <li>Fixed memory leak when using Dike</li> <li>SAX parser now parses IO streams</li> <li>Comment nodes have their own class</li> <li><code>Nokogiri()</code> should delegate to <code>Nokogiri.parse()</code></li> <li>Prepending rather than appending to <code>ENV['PATH']</code> on windows</li> <li>Fixed a bug in complex CSS negation selectors</li> </ul>"},{"location":"CHANGELOG.html#106","title":"1.0.6","text":""},{"location":"CHANGELOG.html#fixed_87","title":"Fixed","text":"<ul> <li>XPath Parser raises a <code>SyntaxError</code> on parse failure</li> <li>CSS Parser raises a <code>SyntaxError</code> on parse failure</li> <li><code>filter()</code> and <code>not()</code> hpricot compatibility added</li> <li>CSS searches via <code>Node#search</code> are now always relative</li> <li>CSS to XPath conversion is now cached</li> </ul>"},{"location":"CHANGELOG.html#105","title":"1.0.5","text":""},{"location":"CHANGELOG.html#fixed_88","title":"Fixed","text":"<ul> <li>Added mailing list and ticket tracking information to the <code>README.txt</code></li> <li>Sets <code>ENV['PATH']</code> on windows if it doesn't exist</li> <li>Caching results of <code>NodeSet#[]</code> on <code>Document</code></li> </ul>"},{"location":"CHANGELOG.html#104","title":"1.0.4","text":""},{"location":"CHANGELOG.html#fixed_89","title":"Fixed","text":"<ul> <li>Changed memory management from weak refs to document refs</li> <li>Plugged some memory leaks</li> <li>Builder blocks can call methods from surrounding contexts</li> </ul>"},{"location":"CHANGELOG.html#103","title":"1.0.3","text":""},{"location":"CHANGELOG.html#fixed_90","title":"Fixed","text":"<ul> <li><code>NodeSet</code> now implements <code>to_ary</code></li> <li><code>XML::Document</code> should not implement parent</li> <li>More GC Bugs fixed.  (Mike is AWESOME!)</li> <li>Removed RARRAY_LEN for 1.8.5 compatibility.  Thanks Shane Hanna.</li> <li><code>inner_html</code> fixed. (Thanks Yehuda!)</li> </ul>"},{"location":"CHANGELOG.html#102","title":"1.0.2","text":""},{"location":"CHANGELOG.html#fixed_91","title":"Fixed","text":"<ul> <li><code>extconf.rb</code> should not check for frex and racc</li> </ul>"},{"location":"CHANGELOG.html#101","title":"1.0.1","text":""},{"location":"CHANGELOG.html#fixed_92","title":"Fixed","text":"<ul> <li>Made sure <code>extconf.rb</code> searched libdir and prefix so that ports libxml/ruby will link properly.  Thanks lucsky!</li> </ul>"},{"location":"CHANGELOG.html#100-2008-07-13","title":"1.0.0 / 2008-07-13","text":""},{"location":"CHANGELOG.html#added_42","title":"Added","text":"<ul> <li>Birthday!</li> </ul>"},{"location":"CODE_OF_CONDUCT.html","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT.html#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT.html#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT.html#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mike.dalessio@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING.html","title":"Contributing to Nokogiri","text":"<p>This doc is intended to be a short introduction on how to modify and maintain Nokogiri.</p> <p>If you're looking for guidance on filing a bug report or getting support, please visit the \"Getting Help\" tutorial at the nokogiri.org site.</p>"},{"location":"CONTRIBUTING.html#contents","title":"Contents","text":"<ul> <li>Introduction</li> <li>Code of Conduct</li> <li>Some guiding principles of the project</li> <li>Where to start getting involved</li> <li>Submitting Pull Requests</li> <li>Branch Management and Release Management</li> <li>How to set up your local development environment</li> <li>How to run the tests</li> <li>Style Guide</li> <li>How Continuous Integration (\"CI\") is configured</li> <li>How OSS-Fuzz is configured</li> <li>Packaging releases</li> <li>Other utilities</li> <li>Bumping Java dependencies</li> <li>Rake tasks</li> <li>Making a release</li> </ul>"},{"location":"CONTRIBUTING.html#introduction","title":"Introduction","text":"<p>Hello there! I'm super excited that you're interested in contributing to Nokogiri. Welcome!</p> <p>This document is intended only to provide a brief introduction on how to contribute to Nokogiri. It's not a complete specification of everything you need to know, so if you want to know more, I encourage you to reach out to the maintainers via email, twitter, or a new Github issue. We'd love to get to know you a bit better!</p>"},{"location":"CONTRIBUTING.html#code-of-conduct","title":"Code of Conduct","text":"<p>Our full Code of Conduct is in <code>CODE_OF_CONDUCT.md</code>.</p> <p>For best results, be kind. Remember that Nokogiri maintainers are volunteers, and treat them with respect. Do not act entitled to service. Do not be rude. Do not use judgmental or foul language.</p>"},{"location":"CONTRIBUTING.html#some-guiding-principles-of-the-project","title":"Some guiding principles of the project","text":"<p>The top guiding principles, as noted in the README are:</p> <ul> <li>be secure-by-default by treating all documents as untrusted by default</li> <li>be a thin-as-reasonable layer on top of the underlying parsers, and don't attempt to fix behavioral differences between the parsers</li> </ul> <p>Nokogiri supports both CRuby and JRuby, and has native code specific to each (though much Ruby code is shared between them). Some related secondary principles are:</p> <ul> <li>Whenever possible, implement the same functionality for both CRuby and JRuby.</li> <li>Whenever possible, implement shared behavior as shared Ruby code (i.e., write as little native code as reasonable).</li> <li>Whenever possible, avoid writing tests that are platform-specific (but if you do, use <code>skip</code> to provide an explanation).</li> </ul> <p>Notably, despite all parsers being standards-compliant, there are behavioral inconsistencies between the parsers used in the CRuby and JRuby implementations, and Nokogiri does not and should not attempt to remove these inconsistencies. Instead, we surface these differences in the test suite when they are important/semantic; or we intentionally write tests to depend only on the important/semantic bits (omitting whitespace from regex matchers on results, for example).</p> <p>Nokogiri is widely used in the Ruby ecosystem, and so extra care should be taken to avoid introducing breaking changes. Please read our Semantic Versioning Policy to understand what we consider to be a breaking change.</p>"},{"location":"CONTRIBUTING.html#where-to-start-getting-involved","title":"Where to start getting involved","text":"<p>Please take a look at our Issues marked \"Help Wanted\".</p> <p>Also, pull requests for documentation improvements are always welcome!</p>"},{"location":"CONTRIBUTING.html#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Pull requests should be made with <code>main</code> as the merge base. See the next section for details.</p> <p>Pull requests that introduce behavior change must always contain a test demonstrating the behavior being introduced, fixed, or changed. These tests should ideally communicate to the maintainers the problem being solved. We will ask you for clarification if we don't understand the problem you're trying to solve.</p> <p>If the pull request contains a feature or a bugfix, please make sure to create a CHANGELOG entry in the \"unreleased\" section.</p> <p>Please do not submit pull requests that make purely cosmetic changes to the code (style, naming, etc.). While we recognize that the code can always be improved, we prefer that you focus on more impactful contributions.</p> <p>Feel free to push a \"work in progress\" to take advantage of the feedback loops from CI. But then please indicate that it's still in progress by marking it as a Draft Pull Request.</p>"},{"location":"CONTRIBUTING.html#branch-management-and-release-management","title":"Branch Management and Release Management","text":"<p>Nokogiri follows SemVer, and some nuances of that policy are spelled out in Semantic Versioning Policy.</p> <p>Development should be happening on <code>main</code>, which sets <code>Nokogiri::VERSION</code> to a development version of the next minor release (e.g., <code>\"1.14.0.dev\"</code>). All pull requests should have <code>main</code> as the merge base.</p> <p>Patch releases should be made by cherry-picking commits from <code>main</code> onto the release branch (e.g., <code>v1.13.x</code>) in a pull request labeled <code>backport</code>.</p>"},{"location":"CONTRIBUTING.html#how-to-set-up-your-local-development-environment","title":"How to set up your local development environment","text":""},{"location":"CONTRIBUTING.html#basic","title":"Basic","text":"<pre><code>git clone --recurse-submodules https://github.com/sparklemotion/nokogiri\ncd nokogiri\nbundle install\n</code></pre>"},{"location":"CONTRIBUTING.html#advanced","title":"Advanced","text":"<p>Please install the latest or previous version of CRuby (e.g., 3.2 or 3.1 as of 2023-01), and a recent version of JRuby. We recommend using <code>rbenv</code>, which is used in test scripts when necessary to test gems against multiple rubies.</p> <p>Please install a system version of libxml2/libxslt (see Installing Nokogiri for details) so that you can test against both the packaged libraries and your system libraries.</p> <p>We recommend that you install <code>valgrind</code> if you can, but it's only necessary for debugging problems so feel free to wait until you need it. (I'm not sure valgrind is easily available on MacOS.)</p> <p>If you plan to package precompiled native gems, make sure <code>docker</code> is installed and is working properly.</p>"},{"location":"CONTRIBUTING.html#how-to-run-the-tests","title":"How to run the tests","text":"<p>Note that <code>rake test</code> does not compile the native extension, and this is intentional (so we can run the test suite against an installed gem). If you're modifying the extension code, please make sure you re-compile each time you run the tests to ensure you're testing your changes.</p>"},{"location":"CONTRIBUTING.html#the-short-version","title":"The short version","text":"<pre><code>bundle exec rake compile test\n</code></pre> <p>To run a focused test, use Minitest's <code>TESTOPTS</code>:</p> <pre><code>bundle exec rake compile test TESTOPTS=\"-n/test_last_element_child/\"\n</code></pre> <p>Or to run tests on specific files, use <code>TESTGLOB</code>:</p> <pre><code>bundle exec rake compile test TESTGLOB=\"test/**/test_*node*rb\"\n</code></pre> <p>To run the test suite in parallel, set the <code>NCPU</code> environment variable; and to compile in parallel, set the <code>MAKEFLAGS</code> environment variable (you may want to set these in something like your .bashrc):</p> <pre><code>export NCPU=8\nexport MAKEFLAGS=-j8\nbundle exec rake compile test\n</code></pre>"},{"location":"CONTRIBUTING.html#cruby-advanced-usage","title":"CRuby advanced usage","text":"<p>Test using your system's libraries:</p> <pre><code>bundle exec rake clean  #  blow away pre-existing libraries using packaged libs\nbundle exec rake compile test -- --enable-system-libraries\n</code></pre> <p>Run performance tests:</p> <pre><code>bundle exec rake compile test:bench\n</code></pre> <p>Run tests using valgrind:</p> <pre><code>bundle exec rake compile test:valgrind\n</code></pre> <p>Run tests in the debugger:</p> <pre><code>bundle exec rake compile test:gdb\n# or\nbundle exec rake compile test:lldb\n</code></pre> <p>Run tests and look for memory leaks with valgrind and ruby_memcheck:</p> <pre><code>bundle exec rake compile test:memcheck\n</code></pre> <p>Run test/test_memory_usage.rb and look for memory leaks using RSS size and linear interpolation:</p> <pre><code>bundle exec rake compile test:memory_suite\n</code></pre> <p>Note that by you can run the test suite with a variety of GC behaviors. For example, running a major after each test completes has, on occasion, been useful for localizing some classes of memory bugs, but does slow the suite down. Some variations of the test suite behavior are available (see <code>test/helper.rb</code> for more info):</p> <pre><code># ordinary GC behavior\nNOKOGIRI_TEST_GC_LEVEL=normal bundle exec rake compile test\n\n# minor GC after each test\nNOKOGIRI_TEST_GC_LEVEL=minor bundle exec rake compile test\n\n# major GC after each test\nNOKOGIRI_TEST_GC_LEVEL=major bundle exec rake compile test\n\n# major GC after each test and GC compaction after every 20 tests\nNOKOGIRI_TEST_GC_LEVEL=compact bundle exec rake compile test\n\n# verify references after compaction after every 20 tests\n# (see https://alanwu.space/post/check-compaction/)\nNOKOGIRI_TEST_GC_LEVEL=verify bundle exec rake compile test\n\n# run with GC \"stress mode\" on\nNOKOGIRI_TEST_GC_LEVEL=stress bundle exec rake compile test\n</code></pre>"},{"location":"CONTRIBUTING.html#libxml2-advanced-usage","title":"libxml2 advanced usage","text":"<p>If you want to build Nokogiri against a modified version of libxml2 or libxslt, clone them both into sibling directories (<code>../libxml2</code> and <code>../libxslt</code>) then run <code>scripts/compile-against-libxml2-source</code>.</p> <p>That script also takes an optional command to run with the proper environment variables set to use the local libxml2 library, which can be useful when trying to <code>git bisect</code> against libxml2 or libxslt. So, for example:</p> <pre><code>scripts/compile-against-libxml2-source bundle exec rake test\n</code></pre> <p>An alternative, if you're not bisecting or hacking on libxml2 or libxslt, is:</p> <pre><code>bundle exec rake compile -- \\\n  --with-xslt-source-dir=$(pwd)/../libxslt \\\n  --with-xml2-source-dir=$(pwd)/../libxml2\n</code></pre>"},{"location":"CONTRIBUTING.html#gumbo-html5-parser","title":"gumbo HTML5 parser","text":"<p>To run the test suite for the gumbo parser:</p> <pre><code>bundle exec rake gumbo\n</code></pre> <p>Please note that additional html5lib tests for Nokogiri's HTML5 parser exist in a submodule. If you haven't checked that submodule out, here's how to do so:</p> <pre><code>git submodule update --init  #  test/html5lib-tests\nbundle exec rake compile test\n</code></pre> <p>If you're actively working on the libgumbo source, you will probably want a faster feedback loop than <code>rake clean compile test</code> will give you. Here's how to get more immediate builds of libgumbo whenever you change a file:</p> <pre><code>bundle exec rake clean compile -- --gumbo-dev\n# change a gumbo file\nbundle exec rake compile # immediate compilation of changed file and relinking of nokogiri.so\n</code></pre>"},{"location":"CONTRIBUTING.html#fuzzing-your-gumbo-html5-parser-changes","title":"Fuzzing your gumbo HTML5 parser changes","text":"<p>When making changes or adding new features to <code>gumbo-parser</code>, it's recommended to run libfuzzer against <code>gumbo-parser</code> using various sanitizers.</p> <p>Build the fuzzers by navigating to the <code>gumbo-parser</code> directory and running <code>make fuzzers</code>. Once built, navigate to the <code>gumbo-parser/fuzzer/build</code> directory and execute one of the following binaries in this directory:</p> <ul> <li>parse_fuzzer (standard fuzzer with no sanitizer)</li> <li>parse_fuzzer-asan (fuzzer built using ASAN)</li> <li>parse_fuzzer-msan (fuzzer built using MSAN)</li> <li>parse_fuzzer-ubsan (fuzzer built using UBSAN)</li> </ul> <p>To fuzz more efficiently, use the dictionary (gumbo.dict) and corpus (gumbo_corpus) found in <code>gumbo-parser/fuzzer</code> using the following arguments (assuming parse_fuzzer is in use):</p> <pre><code>./parse_fuzzer -dict=../gumbo.dict ../gumbo_corpus\n</code></pre> <p>If the binary executed successfully you should now be seeing the following output filling up your terminal (see https://llvm.org/docs/LibFuzzer.html#output for more information):</p> <pre><code>INFO: Seed: 4156947595\nINFO: Loaded 1 modules   (7149 inline 8-bit counters): 7149 0x58a462, 0x58c04f, \nINFO: Loaded 1 PC tables (7149 PCs): 7149 0x53beb0,0x557d80, \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\nINFO: A corpus is not provided, starting from an empty corpus\n#2  INITED cov: 2 ft: 2 corp: 1/1b exec/s: 0 rss: 24Mb\n    NEW_FUNC[1/44]: 0x429840 in gumbo_parse_with_options (/home/user/nokogiri/gumbo-parser/fuzzer/build/parse_fuzzer+0x429840)\n    NEW_FUNC[2/44]: 0x42c0d0 in destroy_node (/home/user/nokogiri/gumbo-parser/fuzzer/build/parse_fuzzer+0x42c0d0)\n#721    NEW    cov: 180 ft: 181 corp: 2/12b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 4 ChangeByte-ChangeByte-ChangeBit-InsertRepeatedBytes-\n#722    NEW    cov: 186 ft: 196 corp: 3/23b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 1 ChangeBit-\n#723    NEW    cov: 186 ft: 228 corp: 4/34b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 1 ChangeBinInt-\n#724    NEW    cov: 188 ft: 241 corp: 5/45b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 1 ChangeBit-\n#725    NEW    cov: 188 ft: 254 corp: 6/56b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 1 ChangeByte-\n#726    NEW    cov: 188 ft: 270 corp: 7/67b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 1 CopyPart-\n#732    NEW    cov: 188 ft: 279 corp: 8/78b lim: 11 exec/s: 0 rss: 27Mb L: 11/11 MS: 1 ChangeBit-\n    NEW_FUNC[1/1]: 0x441de0 in gumbo_token_destroy (/home/user/nokogiri/gumbo-parser/fuzzer/build/parse_fuzzer+0x441de0)\n</code></pre> <p>However, if the fuzzer finds a \"crash\" (indicating that a bug has been found) it will stop fuzzing and the following output would be expected:</p> <pre><code>INFO: Seed: 1523017872\nINFO: Loaded 1 modules (16 guards): 0x744e60, 0x744ea0,\nINFO: -max_len is not provided, using 64\nINFO: A corpus is not provided, starting from an empty corpus\n#0    READ units: 1\n#1    INITED cov: 3 ft: 2 corp: 1/1b exec/s: 0 rss: 24Mb\n#3811 NEW    cov: 4 ft: 3 corp: 2/2b exec/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-\n#3827 NEW    cov: 5 ft: 4 corp: 3/4b exec/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-\n#3963 NEW    cov: 6 ft: 5 corp: 4/6b exec/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-\n#4167 NEW    cov: 7 ft: 6 corp: 5/9b exec/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-\n==31511== ERROR: libFuzzer: deadly signal\n...\nartifact_prefix='./'; Test unit written to ./crash-b13e8756b13a00cf168300179061fb4b91fefbed\n</code></pre> <p>The above indicates that a crash has been identified and it can be reproduced by feeding the <code>crash-b13e8756b13a00cf168300179061fb4b91fefbed</code> file back into the binary used for fuzzing (e.g. parse-fuzzer) using the following command:</p> <pre><code>parse_fuzzer crash-b13e8756b13a00cf168300179061fb4b91fefbed\n</code></pre> <p>If you'd like to learn more about libfuzzer please give https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md a try.</p>"},{"location":"CONTRIBUTING.html#style-guide","title":"Style Guide","text":""},{"location":"CONTRIBUTING.html#documentation","title":"Documentation","text":"<p>We use <code>rdoc</code> to build Nokogiri's documentation. Run <code>rake rdoc</code> to build into the <code>./html</code> directory, and see the rdoc tasks in rakelib/rdoc.rake.</p> <p>Previously we made some effort to move towards <code>yard</code> but that work was stopped (and the decision record can be found at RFC: convert to use <code>yard</code> for documentation).</p> <p>Docstrings should be in <code>RDoc::Markup</code> format, though simple docstrings may be in Markdown (using <code>:markup: markdown</code>).</p> <p>If you submit pull requests that improve documentation, I will happily merge them and credit you in the CHANGELOG.</p> <p>Some guidelines (see lib/nokogiri/xml/node.rb and ext/nokogiri/xml/node.c for examples):</p> <ul> <li>Use <code>:call-seq:</code> to ...</li> <li>note the return type of the method whenever possible, e.g. <code>:call-seq: upcase(name) \u2192 String</code></li> <li>name all the aliases of a method</li> <li>indicate block/yield usage of a method</li> <li>Briefly explain the purpose of the method, what it returns, and what side effects it has</li> <li>Use a <code>[Parameters]</code> definition to note the expected types of all the parameters as a bulleted list</li> <li>Use a <code>[Returns]</code> definition to note the return type</li> <li>Use a <code>[Yields]</code> definition to note the block parameters</li> <li>Use a <code>\u26a0</code> character to warn the user about tricky usage</li> <li>Use a <code>\ud83d\udca1</code> character to call attention to important notes</li> <li><code>See also:</code> should be used to call out related methods</li> <li><code>Since</code> should be used to indicate the version in which the code was introduced</li> <li>Prefer to show nuanced behavior in code examples, rather than try to explain it in prose.</li> </ul>"},{"location":"CONTRIBUTING.html#code","title":"Code","text":"<p>I don't feel very strongly about code style, but this project uses Standard for Ruby, and uses the <code>astyle</code> configuration laid out in <code>./rakelib/format.rake</code> for C and Java.</p> <p>You can auto-format everything with <code>rake format</code>.</p> <p>There are some pending Rubocop rules in <code>.rubocop_todo.yml</code>. If you'd like to fix them up, I will happily merge your pull request.</p> <p>For C code, naming is currently inconsistent, but I am generally moving towards some guidelines that will make stack traces more readable and usable:</p> <ul> <li>Public functions and functions bound to Ruby methods should start with <code>noko_</code> followed by the snake case class name.</li> <li>e.g., <code>noko_xml_sax_parser_context_...</code></li> <li>Static functions (file scope) do not need the \"noko\" prefix, but should be named with the snake case class name.</li> <li>e.g., <code>xml_sax_parser_context_...</code></li> <li>Ruby singleton methods should have <code>_s_</code> before the method name</li> <li>e.g., <code>noko_xml_sax_parser_context_s_io</code> for <code>Nokogiri::XML::SAX::ParserContext.io</code></li> <li>Ruby instance methods should have <code>__</code> before the method name</li> <li>e.g., <code>noko_xml_sax_parser_context__line</code> for <code>Nokogiri::XML::SAX::ParserContext#line</code></li> <li>Ruby attribute getters and setters should have <code>_get</code> or <code>_set</code> as a suffix</li> <li>e.g., <code>noko_xml_sax_parser_context__recovery_set</code> for <code>Nokogiri::XML::SAX::ParserContext#recovery=</code></li> </ul>"},{"location":"CONTRIBUTING.html#how-continuous-integration-ci-is-configured","title":"How Continuous Integration (\"CI\") is configured","text":"<p>The bulk of CI is running in Github Actions since May 2021: https://github.com/sparklemotion/nokogiri/actions</p> <p>However, we also run tests against 32-bit windows (which aren't supported by GA as of this writing) in Appveyor: https://ci.appveyor.com/project/flavorjones/nokogiri</p> <p>A known hole in CI coverage is the lack native gem tests for arm64-darwin.</p>"},{"location":"CONTRIBUTING.html#coverage","title":"Coverage","text":"<p>The <code>ci.yml</code> pipeline includes jobs to:</p> <ul> <li>basic security sanity check and formatting check, using Rubocop</li> <li>fast feedback for obvious failures: run against system libraries on vanilla ubuntu</li> <li>run the Gumbo parser tests on ubuntu, macos, and windows</li> <li>run on all supported versions of CRuby:<ul> <li>once with packaged libraries</li> <li>once with system libraries</li> <li>once on valgrind (to look for memory bugs)</li> </ul> </li> <li>run the test suite looking for new memory leaks (using ruby_memcheck)</li> <li>run on JRuby</li> <li>run on TruffleRuby</li> <li>run on a Musl (Alpine) system:<ul> <li>against system libraries</li> <li>with valgrind using packaged libraries</li> </ul> </li> <li>run with libxml-ruby loaded (because this can interact with libxml2 in conflicting ways)<ul> <li>against system libraries</li> <li>with valgrind using packaged libraries</li> </ul> </li> <li>build a \"ruby\" platform gem<ul> <li>install and test on linux, macos, and windows</li> </ul> </li> <li>build native gems<ul> <li>install and test against all supported versions of CRuby</li> <li>install and test on a variety of linux, macos, and windows systems</li> </ul> </li> <li>build a jruby gem, install and test it</li> </ul> <p>The <code>upstream.yml</code> pipeline includes jobs to:</p> <ul> <li>run against libxml2 and libxslt head (linux), including a valgrind check</li> <li>run against CRuby head (linux, windows, macos) including a valgrind check</li> <li>run against JRuby head</li> <li>run html5lib-tests from that project's <code>origin/master</code></li> </ul> <p>The <code>downstream.yml</code> pipeline includes jobs to run notable downstream dependents against Nokogiri <code>main</code>.</p> <p>The <code>generate-ci-images.yml</code> pipeline builds some containers used by the other pipelines once a week. This is primarily an optimization to make sure system packages (like <code>libxml2-dev</code> and <code>valgrind</code>) are already installed. See <code>oci-images/nokogiri-test/</code> for details on what's in these containers.</p>"},{"location":"CONTRIBUTING.html#valgrind-and-ruby_memcheck","title":"Valgrind and <code>ruby_memcheck</code>","text":"<p>We rely heavily on Valgrind and <code>ruby_memcheck</code> to catch memory bugs by running in combination with every version of CRuby.</p> <p>We use suppressions primarily to quiet known small memory leaks or quirks of certain Ruby versions. See the files in the <code>/suppressions</code> directory and <code>/rakelib/test.rake</code> for more information.</p>"},{"location":"CONTRIBUTING.html#benchmark-performance-tests","title":"Benchmark / Performance tests","text":"<p>A separate suite, <code>test:bench</code>, can be run to ensure a few performance expectations. As of 2022-02 this suite is small, but we can grow it over time. These tests are run in CI on CRuby and JRuby.</p> <p>These tests should use <code>Nokogiri::TestBenchmark</code> as the base class, and be in a file matching the glob <code>test/**/bench_*.rb</code>.</p>"},{"location":"CONTRIBUTING.html#helpful-hints-when-writing-new-ci-jobs","title":"Helpful hints when writing new CI jobs","text":"<ul> <li>Always checkout the source code including submodules (for the html5lib tests)</li> <li>When testing packaged libraries (not system libraries), cache either <code>ports/</code> (for compiled libraries) or <code>ports/archives/</code> (for just tarballs)</li> <li>note that <code>libgumbo</code> is built outside of <code>ports/</code> to allow us to do this caching safely</li> </ul>"},{"location":"CONTRIBUTING.html#how-oss-fuzz-is-configured","title":"How OSS-Fuzz is configured","text":"<p>OSS-Fuzz is a service that runs fuzzing against open-source libraries.</p> <p>OSS-Fuzz was configured to fuzz Nokogiri's libgumbo in https://github.com/google/oss-fuzz/pull/11004. Updating the configuration should be done in that project.</p> <p>Notifications go to <code>nokogiri-oss-fuzz@googlegroups.com</code>.</p> <p>Some historical context can be found in discussion #2992 and pull request #3007 by @fuzzy-boiii23a.</p>"},{"location":"CONTRIBUTING.html#packaging-releases","title":"Packaging releases","text":"<p>As a prerequisite please make sure you have <code>docker</code> correctly installed, to build native (precompiled) gems.</p> <p>Run <code>scripts/build-gems</code> which will package gems for all supported platforms, and run some basic sanity tests on those packages using <code>scripts/test-gem-set</code>, <code>scripts/test-gem-file-contents</code>, and <code>scripts/test-gem-installation</code>.</p> <p>See Making a release below for the checklist.</p>"},{"location":"CONTRIBUTING.html#other-utilities","title":"Other utilities","text":"<p><code>scripts/test-exported-symbols</code> checks the compiled <code>nokogiri.so</code> library for surprising exported symbols. This script likely only works on Linux, sorry.</p> <p><code>scripts/files-modified-by-open-prs</code> is a hack to see what files are being proposed to change in the set of open pull requests. This might be useful if you're thinking about radically changing a file, to be aware of what merge conflicts might result. This could probably be a rake task.</p> <p>There's a <code>Vagrantfile</code> in the project root which I've used once or twice to try to reproduce problems non-Linux systems (like OpenBSD). It's not well-maintained so YMMV.</p>"},{"location":"CONTRIBUTING.html#bumping-java-dependencies","title":"Bumping Java dependencies","text":"<p>Java dependencies, in the form of <code>.jar</code> files, are all vendored as part of the <code>java</code> platform gem.</p> <p>We use <code>jar-dependencies</code> as a development dependency to manage the project's Java dependencies. Note, however, that we use our own fork of NekoDTD that lives at https://github.com/sparklemotion/nekodtd</p> <p>To modify or add a dependency, a few things needs to be in sync:</p> <ul> <li><code>nokogiri.gemspec</code>: <code>spec.requirements</code> need to specify the maven group Id, artifact ID, and version</li> <li><code>nokogiri.gemspec</code>: <code>spec.files</code> need to include the jar files</li> <li>git: the jar files under <code>lib/nokogiri/jruby/</code> need to be committed to git</li> <li><code>lib/nokogiri/jruby/nokogiri_jars.rb</code>: needs to include all the jars</li> </ul> <p>A quick summary of what this looks like for you, the developer:</p> <ol> <li>edit the <code>requirements</code> in the gemspec</li> <li>run <code>bundle exec rake vendor_jars</code> which updates everything under <code>lib/nokogiri/jruby</code></li> <li>run <code>bundle exec rake check_manifest</code> and if necessary update the gemspec <code>files</code></li> <li>make sure to check everything under <code>lib/nokogiri/jruby</code> into git, including the jar files</li> </ol>"},{"location":"CONTRIBUTING.html#rake-tasks","title":"Rake tasks","text":"<p>The <code>Rakefile</code> used to be a big fat mess. It's now decomposed into a small set of files in <code>/rakelib</code>. If you've got a new rake task you'd like to introduce, please consider whether it belongs in one of the existing concerns, or needs a new file. Please don't add it to <code>Rakefile</code> without compelling reasons.</p>"},{"location":"CONTRIBUTING.html#making-a-release","title":"Making a release","text":"<p>A quick checklist:</p> <ul> <li>[ ] make sure CI is green!</li> <li>[ ] update <code>CHANGELOG.md</code> and <code>lib/nokogiri/version/constant.rb</code></li> <li>[ ] create a git tag</li> <li>[ ] run <code>scripts/build-gems</code> and make sure it completes and all the tests pass</li> <li>[ ] <code>for g in gems/*.gem ; do gem push $g ; done</code></li> <li>[ ] create a release at https://github.com/sparklemotion/nokogiri/releases and provide sha2 checksums</li> <li>if security-related,</li> <li>[ ] publish a GHSA</li> <li>[ ] email ruby-security-ann@googlegroups.com and ruby-talk@ruby-lang.org</li> <li>[ ] submit a PR to https://github.com/rubysec/ruby-advisory-db</li> <li>[ ] update nokogiri.org</li> <li>[ ] bump <code>lib/nokogiri/version/constant.rb</code> to a prerelease version like <code>v1.14.0.dev</code></li> </ul>"},{"location":"LICENSE-DEPENDENCIES.html","title":"Vendored Dependency Licenses","text":"<p>Nokogiri ships with some third party dependencies, which are listed here along with their licenses.</p> <p>Note that this document is broken into multiple sections, each of which describes the dependencies of a different \"platform release\" of Nokogiri.</p> <ul> <li>Platform Releases</li> <li>Default platform release (\"ruby\")</li> <li>Native Linux\u24c7 platform releases (\"x86_64-linux\", \"arm64-linux\", \"aarch64-linux\", and \"arm-linux\")</li> <li>Native Darwin (macOS\u24c7) platform releases (\"x86_64-darwin\" and \"arm64-darwin\")</li> <li>Native Windows\u24c7 platform releases (\"x86-mingw32\" and \"x64-mingw32\")</li> <li>Java\u24c7 (JRuby) platform release (\"java\")</li> <li>Appendix: Dependencies' License Texts</li> <li>libgumbo</li> <li>libxml2</li> <li>libxslt</li> <li>zlib</li> <li>libiconv</li> <li>isorelax:isorelax</li> <li>net.sf.saxon:Saxon-HE</li> <li>net.sourceforge.htmlunit:neko-htmlunit</li> <li>nu.validator:jing</li> <li>org.nokogiri:nekodtd</li> <li>xalan:serializer and xalan:xalan</li> <li>xerces:xercesImpl</li> <li>xml-apis:xml-apis</li> </ul> <p>Anyone consuming this file via license-tracking software should endeavor to understand which gem file you're downloading and using, so as not to misinterpret the contents of this file and the licenses of the software being distributed.</p> <p>You can double-check the dependencies in your gem file by examining the output of <code>nokogiri -v</code> after installation, which will emit the complete set of libraries in use (for versions <code>&gt;= 1.11.0.rc4</code>).</p> <p>In particular, I'm sure somebody's lawyer, somewhere, is going to freak out that the LGPL appears in this file; and so I'd like to take special note that the dependency covered by LGPL, <code>libiconv</code>, is only being redistributed in the native Windows and native Darwin platform releases. It's not present in default, Java\u24c7, or native Linux\u24c7 releases.</p>"},{"location":"LICENSE-DEPENDENCIES.html#platform-releases","title":"Platform Releases","text":""},{"location":"LICENSE-DEPENDENCIES.html#default-platform-release-ruby","title":"Default platform release (\"ruby\")","text":"<p>The default platform release distributes the following dependencies in source form:</p> <ul> <li>libxml2</li> <li>libxslt</li> <li>libgumbo</li> </ul> <p>This distribution can be identified by inspecting the included Gem::Specification, which will have the value \"ruby\" for its \"platform\" attribute.</p>"},{"location":"LICENSE-DEPENDENCIES.html#native-linuxr-platform-releases-x86_64-linux-arm64-linux-aarch64-linux-and-arm-linux","title":"Native Linux\u24c7 platform releases (\"x86_64-linux\", \"arm64-linux\", \"aarch64-linux\", and \"arm-linux\")","text":"<p>The native Linux\u24c7 platform release distributes the following dependencies in source form:</p> <ul> <li>libxml2</li> <li>libxslt</li> <li>libgumbo</li> <li>zlib</li> </ul> <p>This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x86_64-linux\" or \"arm64-linux\" for its \"platform.cpu\" attribute.</p>"},{"location":"LICENSE-DEPENDENCIES.html#native-darwin-macosr-platform-releases-x86_64-darwin-and-arm64-darwin","title":"Native Darwin (macOS\u24c7) platform releases (\"x86_64-darwin\" and \"arm64-darwin\")","text":"<p>The native Darwin platform release distributes the following dependencies in source form:</p> <ul> <li>libxml2</li> <li>libxslt</li> <li>libgumbo</li> <li>zlib</li> <li>libiconv</li> </ul> <p>This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x86_64-darwin\" or \"arm64-darwin\" for its \"platform.cpu\" attribute. Darwin is also known more familiarly as \"OSX\" or \"macOS\u24c7\" and is the operating system for many Apple\u24c7 computers.</p>"},{"location":"LICENSE-DEPENDENCIES.html#native-windowsr-platform-releases-x86-mingw32-and-x64-mingw32","title":"Native Windows\u24c7 platform releases (\"x86-mingw32\" and \"x64-mingw32\")","text":"<p>The native Windows\u24c7 platform release distributes the following dependencies in source form:</p> <ul> <li>libxml2</li> <li>libxslt</li> <li>libgumbo</li> <li>zlib</li> <li>libiconv</li> </ul> <p>This distribution can be identified by inspecting the included Gem::Specification, which will have a value similar to \"x64-mingw32\" or \"x86-mingw32\" for its \"platform.cpu\" attribute.</p>"},{"location":"LICENSE-DEPENDENCIES.html#javar-jruby-platform-release-java","title":"Java\u24c7 (JRuby) platform release (\"java\")","text":"<p>The Java platform release distributes the following dependencies as compiled jar files:</p> <ul> <li>isorelax:isorelax</li> <li>net.sf.saxon:Saxon-HE</li> <li>net.sourceforge.htmlunit:neko-htmlunit</li> <li>nu.validator:jing</li> <li>org.nokogiri:nekodtd</li> <li>xalan:serializer and xalan:xalan</li> <li>xerces:xercesImpl</li> <li>xml-apis:xml-apis</li> </ul> <p>This distribution can be identified by inspecting the included Gem::Specification, which will have the value \"java\" for its \"platform.os\" attribute.</p>"},{"location":"LICENSE-DEPENDENCIES.html#appendix-dependencies-license-texts","title":"Appendix: Dependencies' License Texts","text":"<p>This section contains a subsection for each potentially-distributed dependency, which includes the name of the license and the license text.</p> <p>Please see previous sections to understand which of these potential dependencies is actually distributed in the gem file you're downloading and using.</p>"},{"location":"LICENSE-DEPENDENCIES.html#libgumbo","title":"libgumbo","text":"<p>Apache 2.0</p> <p>https://github.com/sparklemotion/nokogiri/blob/main/gumbo-parser/src/README.md</p> <pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#libxml2","title":"libxml2","text":"<p>MIT</p> <p>http://xmlsoft.org/</p> <pre><code>Except where otherwise noted in the source code (e.g. the files hash.c,\nlist.c and the trio files, which are covered by a similar licence but\nwith different Copyright notices) all the files are:\n\n Copyright (C) 1998-2012 Daniel Veillard.  All Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is fur-\nnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT-\nNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#libxslt","title":"libxslt","text":"<p>MIT</p> <p>http://xmlsoft.org/libxslt/</p> <pre><code>Licence for libxslt except libexslt\n----------------------------------------------------------------------\n Copyright (C) 2001-2002 Daniel Veillard.  All Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is fur-\nnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT-\nNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nDANIEL VEILLARD BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON-\nNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nExcept as contained in this notice, the name of Daniel Veillard shall not\nbe used in advertising or otherwise to promote the sale, use or other deal-\nings in this Software without prior written authorization from him.\n\n----------------------------------------------------------------------\n\nLicence for libexslt\n----------------------------------------------------------------------\n Copyright (C) 2001-2002 Thomas Broyer, Charlie Bozeman and Daniel Veillard.\n All Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is fur-\nnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FIT-\nNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON-\nNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nExcept as contained in this notice, the name of the authors shall not\nbe used in advertising or otherwise to promote the sale, use or other deal-\nings in this Software without prior written authorization from him.\n----------------------------------------------------------------------\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#zlib","title":"zlib","text":"<p>zlib license</p> <p>http://www.zlib.net/zlib_license.html</p> <pre><code>  Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n\n  Jean-loup Gailly        Mark Adler\n  jloup@gzip.org          madler@alumni.caltech.edu\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#libiconv","title":"libiconv","text":"<p>LGPL</p> <p>https://www.gnu.org/software/libiconv/</p> <pre><code>          GNU LIBRARY GENERAL PUBLIC LICENSE\n               Version 2, June 1991\n\n Copyright (C) 1991 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the library GPL.  It is\n numbered 2 because it goes with version 2 of the ordinary GPL.]\n\n                Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Library General Public License, applies to some\nspecially designated Free Software Foundation software, and to any\nother libraries whose authors decide to use it.  You can use it for\nyour libraries, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if\nyou distribute copies of the library, or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link a program with the library, you must provide\ncomplete object files to the recipients so that they can relink them\nwith the library, after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  Our method of protecting your rights has two steps: (1) copyright\nthe library, and (2) offer you this license which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  Also, for each distributor's protection, we want to make certain\nthat everyone understands that there is no warranty for this free\nlibrary.  If the library is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original\nversion, so that any problems introduced by others will not reflect on\nthe original authors' reputations.\n\f\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that companies distributing free\nsoftware will individually obtain patent licenses, thus in effect\ntransforming the program into proprietary software.  To prevent this,\nwe have made it clear that any patent must be licensed for everyone's\nfree use or not licensed at all.\n\n  Most GNU software, including some libraries, is covered by the ordinary\nGNU General Public License, which was designed for utility programs.  This\nlicense, the GNU Library General Public License, applies to certain\ndesignated libraries.  This license is quite different from the ordinary\none; be sure to read it in full, and don't assume that anything in it is\nthe same as in the ordinary license.\n\n  The reason we have a separate public license for some libraries is that\nthey blur the distinction we usually make between modifying or adding to a\nprogram and simply using it.  Linking a program with a library, without\nchanging the library, is in some sense simply using the library, and is\nanalogous to running a utility program or application program.  However, in\na textual and legal sense, the linked executable is a combined work, a\nderivative of the original library, and the ordinary General Public License\ntreats it as such.\n\n  Because of this blurred distinction, using the ordinary General\nPublic License for libraries did not effectively promote software\nsharing, because most developers did not use the libraries.  We\nconcluded that weaker conditions might promote sharing better.\n\n  However, unrestricted linking of non-free programs would deprive the\nusers of those programs of all benefit from the free status of the\nlibraries themselves.  This Library General Public License is intended to\npermit developers of non-free programs to use free libraries, while\npreserving your freedom as a user of such programs to change the free\nlibraries that are incorporated in them.  (We have not seen how to achieve\nthis as regards changes in header files, but we have achieved it as regards\nchanges in the actual functions of the Library.)  The hope is that this\nwill lead to faster development of free libraries.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, while the latter only\nworks together with the library.\n\n  Note that it is possible for a library to be covered by the ordinary\nGeneral Public License rather than by this special one.\n\f\n          GNU LIBRARY GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library which\ncontains a notice placed by the copyright holder or other authorized\nparty saying it may be distributed under the terms of this Library\nGeneral Public License (also called \"this License\").  Each licensee is\naddressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also compile or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    c) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    d) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe source code distributed need not include anything that is normally\ndistributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Library General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n             END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#isorelaxisorelax","title":"isorelax:isorelax","text":"<p>MIT</p> <p>http://iso-relax.sourceforge.net/</p> <pre><code>Copyright (c) 2001-2002, SourceForge ISO-RELAX Project (ASAMI\nTomoharu, Daisuke Okajima, Kohsuke Kawaguchi, and MURATA Makoto)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#netsfsaxonsaxon-he","title":"net.sf.saxon:Saxon-HE","text":"<p>MPL 2.0</p> <p>http://www.saxonica.com/</p> <pre><code>Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#netsourceforgehtmlunitneko-htmlunit","title":"net.sourceforge.htmlunit:neko-htmlunit","text":"<p>Apache 2.0</p> <p>https://github.com/HtmlUnit/htmlunit-neko</p> <pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#nuvalidatorjing","title":"nu.validator:jing","text":"<p>BSD-3-Clause</p> <p>http://www.thaiopensource.com/relaxng/jing.html</p> <pre><code>Copyright (c) 2001-2003 Thai Open Source Software Center Ltd\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials provided\n  with the distribution.\n\n* Neither the name of the Thai Open Source Software Center Ltd nor\n  the names of its contributors may be used to endorse or promote\n  products derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#orgnokogirinekodtd","title":"org.nokogiri:nekodtd","text":"<p>Apache 2.0</p> <p>https://github.com/sparklemotion/nekodtd</p> <pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#xalanserializer-and-xalanxalan","title":"xalan:serializer and xalan:xalan","text":"<p>Apache 2.0</p> <p>https://xml.apache.org/xalan-j/</p> <pre><code>                                Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#xercesxercesimpl","title":"xerces:xercesImpl","text":"<p>Apache 2.0</p> <p>https://xerces.apache.org/xerces2-j/</p> <pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE-DEPENDENCIES.html#xml-apisxml-apis","title":"xml-apis:xml-apis","text":"<p>Apache 2.0</p> <p>https://xerces.apache.org/xml-commons/</p> <pre><code>Unless otherwise noted all files in XML Commons are covered under the\nApache License Version 2.0. Please read the LICENSE and NOTICE files.\n\nXML Commons contains some software and documentation that is covered\nunder a number of different licenses. This applies particularly to the\nxml-commons/java/external/ directory. Most files under\nxml-commons/java/external/ are covered under their respective\nLICENSE.*.txt files; see the matching README.*.txt files for\ndescriptions.\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"LICENSE.html","title":"License","text":"<p>The MIT License</p> <p>Copyright 2008 -- 2023 by Mike Dalessio, Aaron Patterson, Yoko Harada, Akinori MUSHA, John Shahid, Karol Bucek, Sam Ruby, Craig Barnes, Stephen Checkoway, Lars Kanis, Sergio Arbeo, Timothy Elliott, Nobuyoshi Nakada, Charles Nutter, Patrick Mahoney.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"ROADMAP.html","title":"Roadmap for API Changes","text":""},{"location":"ROADMAP.html#overhaul-serializepretty-printing-api","title":"overhaul serialize/pretty printing API","text":"<ul> <li> <p>#530   XHTML formatting can't be turned off</p> </li> <li> <p>#415   XML formatting should be no formatting</p> </li> </ul>"},{"location":"ROADMAP.html#overhaul-and-optimize-the-sax-parsing","title":"overhaul and optimize the SAX parsing","text":"<ul> <li>see fairy wing throwdown - SAX parsing is wicked slow.</li> </ul>"},{"location":"ROADMAP.html#node-should-not-be-enumerable-and-should-have-a-better-attributes-api","title":"Node should not be Enumerable; and should have a better attributes API","text":"<ul> <li> <p>#679   Mixing in Enumerable has some unintended consequences; plus we want to improve the attributes API</p> </li> <li> <p>Some ideas for a better attributes API?</p> <ul> <li>(closed) #666</li> <li>#765</li> </ul> </li> </ul>"},{"location":"ROADMAP.html#improve-css-query-parsing","title":"improve CSS query parsing","text":"<ul> <li> <p>#528   support <code>:not()</code> with a nontrivial argument, like <code>:not(div p.c)</code></p> </li> <li> <p>#451   chained :not pseudoselectors</p> </li> <li> <p>better jQuery selector and CSS pseudo-selector support:</p> <ul> <li>#621</li> <li>#342</li> <li>#628</li> <li>#652</li> <li>#688</li> </ul> </li> <li> <p>#394   nth-of-type is wrong, and possibly other selectors as well</p> </li> <li> <p>#309   incorrect query being executed</p> </li> <li> <p>#350   :has is wrong?</p> </li> </ul>"},{"location":"ROADMAP.html#documentfragment","title":"DocumentFragment","text":"<ul> <li>there are a few tickets about searches not working properly if you   use or do not use the context node as part of the search.<ul> <li>#213</li> <li>#370</li> <li>#454</li> <li>#572   could we fix this by making DocumentFragment be a subclass of NodeSet?</li> </ul> </li> </ul>"},{"location":"ROADMAP.html#better-syntax-for-custom-xpath-function-handler","title":"Better Syntax for custom XPath function handler","text":"<ul> <li>PR#464</li> </ul>"},{"location":"ROADMAP.html#better-syntax-around-nodexpath-and-nodesetxpath","title":"Better Syntax around Node#xpath and NodeSet#xpath","text":"<ul> <li>look at those methods, and use of Node#extract_params in Node#{css,search}<ul> <li>we should standardize on a hash of options for these and other calls</li> </ul> </li> <li>what should NodeSet#xpath return?<ul> <li>#656</li> </ul> </li> </ul>"},{"location":"ROADMAP.html#encoding","title":"Encoding","text":"<p>We have a lot of issues open around encoding. How bad are things? Somebody who knows encoding well should head this up.</p> <ul> <li>Extract EncodingReader as a real object that can be injected   https://groups.google.com/forum/#!msg/nokogiri-talk/arJeAtMqvkg/tGihB-iBRSAJ</li> </ul>"},{"location":"ROADMAP.html#reader","title":"Reader","text":"<p>It's fundamentally broken, in that we can't stop people from crashing their application if they want to use object reference unsafely.</p>"},{"location":"ROADMAP.html#class-methods-that-require-document","title":"Class methods that require Document","text":"<p>There are a few methods, like <code>Nokogiri::XML::Comment.new</code> that require a Document object.</p> <p>We should probably make Document instance methods to wrap this, since it's a non-obvious expectation and thus fails as a convention.</p> <p>So, instead, let's make alternative methods like <code>Nokogiri::XML::Document#new_comment</code>, and recommend those as the proper convention.</p>"},{"location":"ROADMAP.html#collect_namespaces-is-just-broken","title":"<code>collect_namespaces</code> is just broken","text":"<p><code>collect_namespaces</code> is returning a hash, which means it can't return namespaces with the same prefix. See this issue for background:</p> <p>#885</p> <p>Do we care? This seems like a useless method, but then again I hate XML, so what do I know?</p>"},{"location":"ROADMAP.html#overhaul-parseoptions","title":"Overhaul <code>ParseOptions</code>","text":"<p>Currently we mirror libxml2's parse options, and then retrofit those options on top of Xerces-J for JRuby.</p> <ul> <li>I'd like to identify which options work across both parsers,</li> <li>And overhaul the parse methods so that these options are easier to use.</li> </ul> <p>By \"easier to use\" I mean:</p> <ul> <li>it's unwieldy to create a block to set/unset parse options</li> <li>it's unwieldy to create a constant like <code>MY_PARSE_OPTIONS = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::RECOVER ...</code></li> <li>some options are named dangerously poorly, like <code>NOENT</code> which does the opposite of what it says</li> <li>semantically some options should be set/unset together, specifically \"this is a trusted document\" or \"this is an untrusted document\" should flip the senses of <code>NONET</code> and <code>NOENT</code> and <code>DTDLOAD</code> together.</li> <li>we need the ability to invent new parse options, like the one suggested in #1582 that would allow local entities but not external entities.</li> </ul>"},{"location":"SECURITY.html","title":"Security and Vulnerability Reporting","text":"<p>The Nokogiri Core Contributors take security very seriously and investigate all reported vulnerabilities.</p> <p>If you would like to report a vulnerability or have a security concern regarding Nokogiri or how Nokogiri is using any of its underlying platform-specific libraries (such as libxml2 or xerces), please report it via HackerOne.</p> <p>Your report will be acknowledged within 24 hours, and you'll receive a more detailed response within 72 hours indicating next steps in handling your report.</p> <p>If you have not received a reply to your submission within 48 hours, there are a few steps you can take:</p> <ul> <li>Contact the current security coordinator (Mike Dalessio mike.dalessio@gmail.com)</li> <li>Contact the core contributor mailing list (nokogiri-core@googlegroups.com)</li> <li>Join the nokogiri-talk group</li> </ul> <p>Please note, the nokogiri-talk list is a public area. When escalating in that venue, please do not discuss your issue. Simply say that you're trying to get a hold of someone from the core team.</p> <p>The information you share with the Nokogiri Core Contributors as part of this process will be kept confidential within the team, unless or until we need to share information upstream with our dependent libraries' core teams, at which point we will notify you.</p> <p>If a vulnerability is first reported by you, we will credit you with the discovery in the public disclosure.</p>"},{"location":"privacy-policy.html","title":"Privacy Policy","text":"<p>This site uses cookies to measure the effectiveness of our documentation and whether users find what they're searching for. With your consent, you're helping us to make our documentation better.</p> <p>Click here to modify your cookie settings.</p>"},{"location":"tidelift-landing.html","title":"Nokogiri for Enterprise","text":""},{"location":"tidelift-landing.html#available-as-part-of-the-tidelift-subscription","title":"Available as part of the Tidelift Subscription","text":"<p>Tidelift is working with the maintainers of Nokogiri and thousands of other open source projects to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.</p> Learn More Request a Demo"},{"location":"tidelift-landing.html#enterprise-ready-open-source-software-managed-for-you","title":"Enterprise-ready open source software \u2014 managed for you","text":"<p>The Tidelift Subscription is a managed open source subscription for application dependencies covering millions of open source projects across JavaScript, Python, Java, PHP, Ruby, .NET, and more.</p> <p>Your subscription includes:</p>"},{"location":"tidelift-landing.html#security-updates","title":"Security updates","text":"<p>Tidelift\u2019s security response team coordinates patches for new breaking security vulnerabilities and alerts immediately through a private channel, so your software supply chain is always secure.</p>"},{"location":"tidelift-landing.html#licensing-verification-and-indemnification","title":"Licensing verification and indemnification","text":"<p>Tidelift verifies license information to enable easy policy enforcement and adds intellectual property indemnification to cover creators and users in case something goes wrong. You always have a 100% up-to-date bill of materials for your dependencies to share with your legal team, customers, or partners.</p>"},{"location":"tidelift-landing.html#maintenance-and-code-improvement","title":"Maintenance and code improvement","text":"<p>Tidelift ensures the software you rely on keeps working as long as you need it to work. Your managed dependencies are actively maintained and we recruit additional maintainers where required.</p>"},{"location":"tidelift-landing.html#package-selection-and-version-guidance","title":"Package selection and version guidance","text":"<p>We help you choose the best open source packages from the start\u2014and then guide you through updates to stay on the best releases as new issues arise.</p>"},{"location":"tidelift-landing.html#roadmap-input","title":"Roadmap input","text":"<p>Take a seat at the table with the creators behind the software you use. Tidelift\u2019s participating maintainers earn more income as their software is used by more subscribers, so they\u2019re interested in knowing what you need.</p>"},{"location":"tidelift-landing.html#tooling-and-cloud-integration","title":"Tooling and cloud integration","text":"<p>Tidelift works with GitHub, GitLab, BitBucket, and more. We support every cloud platform (and other deployment targets, too).</p>"},{"location":"tidelift-landing.html#the-end-result","title":"The end result?","text":"<p>All of the capabilities you expect from commercial-grade software, for the full breadth of open source you use. That means less time grappling with esoteric open source trivia, and more time building your own applications\u2014and your business.</p> Learn More Request a Demo <p> </p>"},{"location":"adr/2022-12-darwin-symbol-resolution.html","title":"2022-12 Hide libxml2 and libxslt symbols on Darwin in Ruby 3.2 native gem","text":""},{"location":"adr/2022-12-darwin-symbol-resolution.html#status","title":"Status","text":"<p>Accepted, but reversible if an alternative technical solution can be found.</p>"},{"location":"adr/2022-12-darwin-symbol-resolution.html#context","title":"Context","text":"<p>In the final days of shipping Nokogiri v1.14.0 with native (precompiled) support for Ruby 3.2, we're struggling a bit with symbol resolution.</p> <p>Ruby 3.2, when compiling on Darwin, uses the <code>-bundle_loader</code> linker flag to resolve symbols against the Ruby executable as if it were a shared library. (This means that, when running a Ruby compiled with the <code>--enable-shared</code> flag, that the extension will fail to resolve Ruby symbols like <code>rb_cObject</code>.)</p> <p>We can work around that with the <code>-flat_namespace</code> linker flag, which mimics the behavior we already see on Linux and allows us to resolve these symbols at runtime. But for reasons I don't fully understand, many Rubies on Darwin seem to load the libxml2 and libxslt dylibs that ship with XCode commandline tools (\"CLT\"), and so every libxml2 symbol is a collision and resolves to the wrong libxml2 (not the version we've patched and statically linked into the extension).</p> <p>To work around this last problem, the best solution we know of right now seems to be to avoid exporting those symbols by using the <code>-load_hidden</code> flag (or a similar mechanism, there are several we could choose from).</p>"},{"location":"adr/2022-12-darwin-symbol-resolution.html#decision","title":"Decision","text":"<p>Nokogiri v1.14.0's precompiled native gem for Darwin (MacOS) Ruby 3.2 will be built with:</p> <ul> <li>the <code>-flat_namespace</code> flag to ensure the extension can be used by both <code>--enable-shared</code> and <code>--disable-shared</code> Rubies,</li> <li>and the <code>-load_hidden</code> flag for both <code>libxml2</code> and <code>libxslt</code> to avoid accidentally resolving to non-vendored versions of those libraries</li> </ul>"},{"location":"adr/2022-12-darwin-symbol-resolution.html#consequences","title":"Consequences","text":"<p>This would prevent accidental symbol collisions such as the https://github.com/sparklemotion/nokogiri/pull/2106 on Linux, and would ensure that we always pull in the desired version of libxml2, avoiding problems like the ones we're currently experiencing with Ruby 3.2 (see https://github.com/rake-compiler/rake-compiler-dock/issues/87 for extended discussion and more links).</p> <p>This would also, however, prevent a small but non-zero number of downstream gems from integrating with Nokogiri's C API, or the C API of libxml2, libxslt, or libgumbo. A notable gem that did this was https://github.com/rubys/nokogumbo (now merged into Nokogiri itself). Another notable gem that I know that does this is <code>nokogiri-xmlsec</code> (and the various forks of it, the most popular seems to be https://github.com/instructure/nokogiri-xmlsec-instructure). So this may prevent experimentation and innovation (see Nokogumbo) as well as putting hurdles in front of useful integrations like xmlsec.</p>"},{"location":"adr/2022-12-darwin-symbol-resolution.html#alternatives-considered","title":"Alternatives considered","text":"<p>Remove the <code>-bundle_loader</code> flag from the link line. Although this works, it feels a bit like fighting the toolchain and the Ruby core team. It's a bit more complicated of a solution, it's harder for me to reason about, and I'm not positive we won't discover some weird side effect later on.</p> <p>Fully hide all symbols everywhere is taking the chosen solution to the extreme, and may be what we decide to do in the future (see RFC: Stop exporting symbols \u00b7 Discussion #2746 \u00b7 sparklemotion/nokogiri). For now, though, I'd like to keep our options open and not break compatibility completely in this v1.14.0 release. By only doing this where we're forced to, we have a chance to learn about how the API is being used, and also buy some time to hear feedback and to find an alternative solution.</p> <p>Stop precompiling or Stop vendoring libraries should always be options we consider, because offering native gems and vendoring libraries introduces complexity. However, I covered many of the reasons I think it's good for Nokogiri to do this in my RubyConf 2021 talk titled \"Building Native Extensions. This Could Take A While...\" and those reasons are still valid, notably our ability to patch libxml2 for performance (see #2144), functional (see #2403), or security (see #2294) reasons.</p>"},{"location":"adr/2022-12-darwin-symbol-resolution.html#references","title":"References","text":"<ul> <li>Ruby commit introducing <code>-bundle_loader</code>: https://github.com/ruby/ruby/commit/50d81bf</li> <li>The PR implementing this decision is dep: add ruby 3.2 support by flavorjones \u00b7 Pull Request #2732 \u00b7 sparklemotion/nokogiri</li> <li>Future symbol visibility decision will be made at RFC: Stop exporting symbols \u00b7 Discussion #2746 \u00b7 sparklemotion/nokogiri</li> <li>Background context and solution details at</li> <li>[Ruby 3.2] having runtime issues on darwin \u00b7 Issue #87 \u00b7 rake-compiler/rake-compiler-dock</li> <li>https://github.com/stevecheckoway/bundle_test</li> <li>explore whether `-load_hidden` will work around flat namespace by flavorjones \u00b7 Pull Request #1 \u00b7 stevecheckoway/bundle_test</li> <li>Video from Apple explaining the Darwin toolchain changes</li> </ul>"},{"location":"adr/2023-04-libxml-memory-management.html","title":"2023-04 Sticking with <code>ruby_xmalloc</code> and <code>ruby_xfree</code> functions in libxml2","text":""},{"location":"adr/2023-04-libxml-memory-management.html#status","title":"Status","text":"<p>Affirming the status quo since 2009 -- to use <code>ruby_xmalloc</code> et al -- but alternative behavior can be opted into by setting an environment variable:</p> <pre><code># \"default\" here means \"libxml2's default\" which is system malloc\nNOKOGIRI_LIBXML_MEMORY_MANAGEMENT=default\n</code></pre>"},{"location":"adr/2023-04-libxml-memory-management.html#context","title":"Context","text":""},{"location":"adr/2023-04-libxml-memory-management.html#why-nokogiri-originally-configured-libxml2-with-ruby_xmalloc-and-ruby_xfree","title":"Why Nokogiri originally configured libxml2 with <code>ruby_xmalloc</code> and <code>ruby_xfree</code>","text":"<p>Since 2009, (0dbe1f82), Nokogiri has configured libxml2 to use <code>ruby_xmalloc</code> et al for memory operations by making this call in <code>Init_nokogiri</code>:</p> <pre><code>  xmlMemSetup(\n    (xmlFreeFunc)ruby_xfree,\n    (xmlMallocFunc)ruby_xmalloc,\n    (xmlReallocFunc)ruby_xrealloc,\n    ruby_strdup);\n</code></pre> <p>The reason for doing this is so that Ruby's garbage collection (\"GC\") subsystem can track the total heap size, including <code>malloc</code> calls by C extensions, and is then able to trigger a GC cycle if the total amount of allocated memory exceeds a limit.</p> <p>@SamSaffron has a great post that explains how this works, and the antipatterns that can emerge if Ruby is not aware of large amount of allocated memory, and I highly recommend that you read it for context:</p> <p>Ruby's external malloc problem - ruby - Sam Saffron's Blog</p>"},{"location":"adr/2023-04-libxml-memory-management.html#problems","title":"Problems","text":""},{"location":"adr/2023-04-libxml-memory-management.html#problem-memory-edge-cases","title":"Problem: Memory edge cases","text":"<p>We've recently run into a few situations where using <code>ruby_xmalloc</code> et al was problematic.</p> <ul> <li>https://github.com/sparklemotion/nokogiri/issues/2059 and https://github.com/sparklemotion/nokogiri/issues/2241 describe situations where libxml2's <code>atexit</code> handler called <code>ruby_xfree</code> after ObjectSpace was torn down, causing a segfault</li> <li>https://github.com/sparklemotion/nokogiri/pull/2807 and https://github.com/sparklemotion/nokogiri/issues/2822 describe a situation where Nokogiri's node lifecycle handling causes libxml2 to merge text nodes (calling <code>ruby_xmalloc</code> and <code>ruby_xfree</code>) while finalizing a Document, preventing the use of <code>RUBY_TYPED_FREE_IMMEDIATELY</code> for Documents</li> <li>https://github.com/sparklemotion/nokogiri/issues/2785 describes a situation where libxml2's pthread cleanup code can call <code>ruby_xfree</code> after ObjectSpace was torn down, causing a segfault</li> </ul> <p>All the issues have the same root cause: calling <code>ruby_xfree</code> in an inappropriate situation, either:</p> <ul> <li>during GC, or</li> <li>after Ruby's object space has been torn down</li> </ul> <p>These situations would not be inappropriate for using system <code>malloc</code> and <code>free</code>.</p>"},{"location":"adr/2023-04-libxml-memory-management.html#problem-libxml2-performance","title":"Problem: libxml2 performance","text":"<p>Using <code>ruby_xmalloc</code> and <code>ruby_xfree</code> has a real performance penalty, as well. Benchmarks at https://github.com/sparklemotion/nokogiri/pull/2843 indicate this penalty can make document parsing up to 34% slower than when the system <code>malloc</code> and <code>free</code> are used.</p>"},{"location":"adr/2023-04-libxml-memory-management.html#alternatives-considered","title":"Alternatives considered","text":""},{"location":"adr/2023-04-libxml-memory-management.html#system-malloc","title":"System <code>malloc</code>","text":"<p>The primary alternative considered is defaulting to using the system <code>malloc</code> and <code>free</code>.</p> <p>However, Sam's blog post (as well as other anecdotal data) makes a great case for being extremely careful about the choice of memory management functions.</p> <p>Without more data, we're declining to change this behavior. But we are introducing the ability to collect some data by providing a runtime option for selecting the memory management suite.</p>"},{"location":"adr/2023-04-libxml-memory-management.html#frankenstein-malloc","title":"Frankenstein <code>malloc</code>","text":"<p>Maybe it's possible to build custom memory management functions that perform better but have some of the benefits of the ruby allocator? This feels well beyond the scope of a C extension.</p> <p>After an inspection of the ruby memory management functions, it wasn't obvious to the author that there's an obvious performance win by eliminating one or the other of a) conditionally invoking GC if <code>malloc</code> fails, or b) tracking the number of bytes allocated using <code>rb_gc_adjust_memory_usage</code>.</p> <p>We would welcome experimental results if other people are motivated to try something like this, though.</p>"},{"location":"adr/2023-04-libxml-memory-management.html#decision","title":"Decision","text":"<p>We're sticking with <code>ruby_xmalloc</code> et al for now. But we're also introducing an environment variable to allow people to experiment with the system <code>malloc</code> if they wish.</p>"},{"location":"adr/2023-04-libxml-memory-management.html#consequences","title":"Consequences","text":"<p>No changes to the status quo.</p>"},{"location":"adr/2023-04-libxml-memory-management.html#references","title":"References","text":"<p>Memory-related issues:</p> <ul> <li>https://github.com/sparklemotion/nokogiri/issues/2059 (2020)</li> <li>https://github.com/sparklemotion/nokogiri/issues/2241 (2021)</li> <li>https://github.com/sparklemotion/nokogiri/issues/2785 (2023)</li> <li>https://github.com/sparklemotion/nokogiri/pull/2807 (2023)</li> <li>https://github.com/sparklemotion/nokogiri/issues/2822 (2023)</li> </ul> <p>Upstream libxml2 exit-time issues, commits, and discussion:</p> <ul> <li>Fix memory leak when shared libxml.dll is unloaded (!66)</li> <li>dlclosing libxml2 with threads crashes (#153)</li> <li>Call xmlCleanupParser on ELF destruction (!72)</li> <li>Check for custom free function in global destructor (956534e0)</li> </ul> <p>Performance-related discussion:</p> <ul> <li>https://github.com/sparklemotion/nokogiri/issues/2722</li> <li>https://github.com/sparklemotion/nokogiri/pull/2734</li> <li>https://github.com/sparklemotion/nokogiri/pull/2843</li> </ul>"},{"location":"tutorials/ensuring_well_formed_markup.html","title":"Ensuring Well-Formed Markup","text":""},{"location":"tutorials/ensuring_well_formed_markup.html#gentle-well-formedness","title":"Gentle Well-Formedness","text":"<p>We've all seen bad markup in our day. I'm talking about markup that doesn't bother to close tags. I'm talking about putting <code>&lt;p&gt;</code> tags inside <code>&lt;p&gt;</code> tags, and putting content into an <code>&lt;img&gt;</code> tag.</p> <p>Nokogiri corrects bad markup like a boss, similarly to how a browser would before rendering.</p> <pre><code>badly_formed = &lt;&lt;-EOXML\n&lt;root&gt;\n  &lt;open&gt;foo\n    &lt;closed&gt;bar&lt;/closed&gt;\n&lt;/root&gt;\nEOXML\n\nbad_doc  = Nokogiri::XML badly_formed\n\nputs bad_doc         # =&gt; &lt;?xml version=\"1.0\"?&gt;\n                     #    &lt;root&gt;\n                     #      &lt;open&gt;foo\n                     #        &lt;closed&gt;bar&lt;/closed&gt;\n                     #    &lt;/open&gt;  \n                     #    &lt;/root&gt;\n</code></pre> <p>And Nokogiri will even keep track of what the errors were, if the parse option NOERRORS and NOWARNINGS are turned off (the default for XML documents).</p> <pre><code>puts bad_doc.errors  # =&gt; Opening and ending tag mismatch: open line 2 and root\n                     #    Premature end of data in tag root line 1\n</code></pre> <p>Thus, you could use <code>errors.empty?</code> to determine whether the document was well-formed.</p>"},{"location":"tutorials/ensuring_well_formed_markup.html#strict-well-formedness","title":"Strict Well-Formedness","text":"<p>Being friendly and fixing markup is all well and good, but sometimes you need to be a Markup Nazi.</p> <p>If you demand compliance from your XML, then you can configure Nokogiri into \"strict\" parsing mode, in which it will raise an exception at the first sign of malformedness:</p> <pre><code>begin\n  bad_doc = Nokogiri::XML(badly_formed) { |config| config.strict }\nrescue Nokogiri::XML::SyntaxError =&gt; e\n  puts \"caught exception: #{e}\"\nend\n# =&gt; caught exception: Premature end of data in tag root line 1\n</code></pre>"},{"location":"tutorials/getting_help.html","title":"Getting Help","text":""},{"location":"tutorials/getting_help.html#support-getting-help-and-reporting-issues","title":"Support, Getting Help, and Reporting Issues","text":"<p>All official documentation is posted at https://nokogiri.org (the source for which is at https://github.com/sparklemotion/nokogiri.org/, and we welcome contributions).</p> <p>Consider subscribing to Tidelift which provides license assurances and timely security notifications for your open source dependencies, including Nokogiri. Tidelift subscriptions also help the Nokogiri maintainers fund our automated testing which in turn allows us to ship releases, bugfixes, and security updates more often.</p>"},{"location":"tutorials/getting_help.html#reading","title":"Reading","text":"<p>Your first stops for learning more about Nokogiri should be:</p> <ul> <li>API Documentation</li> <li>Tutorials</li> <li>An excellent community-maintained Cheat Sheet</li> </ul>"},{"location":"tutorials/getting_help.html#ask-for-help","title":"Ask For Help","text":"<p>There are a few ways to ask exploratory questions:</p> <ul> <li>The Ruby Discord chat server is active at https://discord.gg/UyQnKrT</li> <li>The Nokogiri mailing list is active at https://groups.google.com/group/nokogiri-talk</li> <li>Open an issue using the \"Help Request\" template at https://github.com/sparklemotion/nokogiri/issues</li> </ul> <p>Please do not mail the maintainers at their personal addresses.</p>"},{"location":"tutorials/getting_help.html#report-a-bug","title":"Report A Bug","text":"<p>The Nokogiri bug tracker is at https://github.com/sparklemotion/nokogiri/issues</p> <p>Please use the \"Bug Report\" or \"Installation Difficulties\" templates.</p>"},{"location":"tutorials/getting_help.html#security-and-vulnerability-reporting","title":"Security and Vulnerability Reporting","text":"<p>Please report vulnerabilities at https://hackerone.com/nokogiri</p> <p>Full information and description of our security policy is in <code>SECURITY.md</code></p>"},{"location":"tutorials/installing_nokogiri.html","title":"Installing Nokogiri","text":"<p>Welcome! We've worked hard to make Nokogiri easy and reliable to install. This page should hopefully get you on your way quickly.</p>"},{"location":"tutorials/installing_nokogiri.html#meta","title":"Meta","text":"<p>The current version of this page focuses on the installation experience for Nokogiri v1.11 and later. If you're trying to install an earlier version, please visit:</p> <ul> <li>Nokogiri v1.10.x installation instructions</li> </ul> <p>If this document doesn't address your problem, please jump over to Getting Help.</p> <p>If you'd like to contribute improvements to this document, please open a GitHub issue or pull-request on nokogiri.org/installing_nokogiri.md.</p>"},{"location":"tutorials/installing_nokogiri.html#installing-native-gems","title":"Installing Native Gems","text":""},{"location":"tutorials/installing_nokogiri.html#faster-more-reliable-installation","title":"Faster, more reliable installation","text":"<p>\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries, or to install system dependencies. This results in much faster installation and more reliable installation, which as you probably know have historically been challenging topics for Nokogiri users.</p>"},{"location":"tutorials/installing_nokogiri.html#supported-platforms","title":"Supported Platforms","text":"<p>Nokogiri ships pre-compiled, \"native\" gems for the following platforms:</p> <ul> <li>Linux <code>x86-linux</code> and <code>x86_64-linux</code> (req: <code>glibc &gt;= 2.17</code>) including musl/Alpine</li> <li>Linux <code>aarch64-linux</code> (req: <code>glibc &gt;= 2.29</code>) including musl/Alpine</li> <li>MacOS <code>x86_64-darwin</code> and <code>arm64-darwin</code></li> <li>Windows <code>x86-mingw32</code>, <code>x64-mingw32</code>, and <code>x64-mingw-ucrt</code></li> <li>Java platforms running JRuby 9.3 or higher</li> </ul> <p>To determine whether your system supports one of these gems, look at the output of <code>bundle platform</code> or <code>ruby -e 'puts Gem::Platform.local.to_s'</code>.</p> <p>If you're on a supported platform, either <code>gem install</code> or <code>bundle install</code> should install a native gem without any additional action on your part. This installation should only take a few seconds, and your output should look something like:</p> <pre><code>$ gem install nokogiri\nFetching nokogiri-1.11.0-x86_64-linux.gem\nSuccessfully installed nokogiri-1.11.0-x86_64-linux\n1 gem installed\n</code></pre> <p>If you're using Bundler <code>&gt;= 2.2</code>, check that your lockfile knows about your platform(s). For example, if you develop on macOS and deploy to Linux you will need to run these commands in your development environment:</p> <pre><code>bundle lock --add-platform x86_64-linux\nbundle install    # resolve dependencies for platform-specific gems\n</code></pre> <p>See <code>man bundle-lock</code> for details.</p>"},{"location":"tutorials/installing_nokogiri.html#why-would-i-not-want-to-use-a-native-gem","title":"Why would I not want to use a native gem?","text":"<p>I can imagine some folks might have trust issues; if this is you, please let us know in a comment at RFC: Increase the level of trust in released gem files \u00b7 Issue #2013 \u00b7 sparklemotion/nokogiri. What can we do to increase that trust? (I can imagine providing a chain of custody including public build logs with cryptographic hashes of artifacts, but I'd like to hear from real users.)</p> <p>Anybody on a linux system with an unsupported version of <code>glibc</code> (see Supported Platforms) will need to install from the <code>ruby</code> platform gem.</p> <p>If you're on Termux, you will need to install from the <code>ruby</code> platform gem (see https://wiki.termux.com/wiki/Differences_from_Linux for background).</p> <p>If you have other reasons for not wanting to use a precompiled native gem, let us know! (See Getting Help.)</p>"},{"location":"tutorials/installing_nokogiri.html#how-can-i-avoid-using-a-precompiled-native-gem","title":"How can I avoid using a precompiled native gem?","text":"<p>The Nokogiri maintainers strongly urge you to use a native gem if at all possible. We expect it will be a much better experience for you and allow us to focus our efforts on improving functionality rather than diagnosing installation issues.</p> <p>If you're on a platform that supports a native gem but you want to avoid using it in your project, do one of the following:</p> <ul> <li>With Bundler <code>&gt;= 2.3.18</code>, then update your Gemfile with <code>gem \"nokogiri\", force_ruby_platform: true</code></li> <li>Else with Bundler<code>&gt;= 2.1</code>, then run <code>bundle config set force_ruby_platform true</code>,</li> <li>Else with Bundler <code>&lt; 2.1</code>, then run <code>bundle config force_ruby_platform true</code></li> <li>If you're not using Bundler, then run <code>gem install nokogiri --platform=ruby</code>.</li> </ul>"},{"location":"tutorials/installing_nokogiri.html#installing-the-ruby-platform-gem","title":"Installing the <code>ruby</code> platform gem","text":"<p>Again, we recommend that you upgrade to v1.11 or later and use a native gem whenever possible. If you're here, it should be because you're on an older version, or you're on an unsupported platform.</p> <p>Before you begin, make sure you have the full compiler toolchain for compiling Ruby C Extensions. See Appendix A: The Compiler Toolchain.</p>"},{"location":"tutorials/installing_nokogiri.html#installing-using-the-packaged-libraries","title":"Installing Using The Packaged Libraries","text":"<p>Nokogiri packages its own updated and patched copies of libxml2 and libxslt source code. By default, installation of Nokogiri will compile and use these packaged libraries.</p> <p>If you don't see your operating system / distro in this section, then no additional setup is required beyond Appendix A: The Compiler Toolchain. Just run <code>gem install nokogiri --platform=ruby</code>.</p>"},{"location":"tutorials/installing_nokogiri.html#ubuntu-or-debian-based-distros","title":"Ubuntu or Debian-based Distros","text":"<pre><code>sudo apt-get install zlib1g-dev liblzma-dev patch\ngem install nokogiri --platform=ruby\n</code></pre> <p>You may substitute <code>git</code> for <code>patch</code> (<code>mini_portile2</code> can use either for applying patches).</p>"},{"location":"tutorials/installing_nokogiri.html#fedora-red-hat-and-centos","title":"Fedora, Red Hat, and CentOS","text":"<pre><code>dnf install -y zlib-devel xz patch\ngem install nokogiri --platform=ruby\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#openbsd-62","title":"OpenBSD &lt; 6.2","text":"<p>Use <code>gcc</code> from ports in order to compile the packaged libraries:</p> <pre><code>pkg_add -v gcc\ngem install nokogiri\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#openbsd-7","title":"OpenBSD 7","text":"<pre><code>pkg_add libiconv gtar\nalias tar=gtar\ngem install nokogiri\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#termux","title":"Termux","text":"<p>If you're using Bundler <code>&gt;= 2.3.18</code>:</p> <pre><code># Gemfile\ngem \"nokogiri\", force_ruby_platform: true\n</code></pre> <p>else if you're using a version of Bundler <code>&gt;= 2.1</code>:</p> <pre><code>pkg install ruby clang make binutils\nbundle config set force_ruby_platform true\nbundle install\n</code></pre> <p>else if you're using a version of Bundler <code>&lt; 2.1</code>:</p> <pre><code>pkg install ruby clang make binutils\nbundle config force_ruby_platform true\nbundle install\n</code></pre> <p>else if you're not using Bundler:</p> <pre><code>pkg install ruby clang make binutils\ngem install nokogiri --platform=ruby\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#installing-using-standard-system-libraries","title":"Installing Using Standard System Libraries","text":"<p>Rather than use Nokogiri's packaged versions, you may prefer to use your system's or distro's standard libxml2/libxslt libraries. This section will try to help you do that.</p> <p>Nokogiri will refuse to build against older, unsupported versions of <code>libxml2</code> and <code>libxslt</code>, and there may be some behavioral changes when using older versions. If you have installed libxml2 or libxslt to a custom location, please jump to the next section, Installing With Custom / Non-Standard Libraries.</p> <p>If you don't see your operating system or distro listed below, then no additional setup is required beyond Appendix A: The Compiler Toolchain. Just run <code>gem install nokogiri --platform=ruby -- --use-system-libraries</code>. Or, if you're using bundler, <code>bundle config build.nokogiri --use-system-libraries</code>.</p>"},{"location":"tutorials/installing_nokogiri.html#debianubuntu","title":"Debian/Ubuntu","text":"<pre><code>sudo apt-get install pkg-config libxml2-dev libxslt-dev\ngem install nokogiri --platform=ruby -- --use-system-libraries\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#macos","title":"MacOS","text":"<p>If you're using homebrew:</p> <pre><code>brew install libxml2 libxslt\ngem install nokogiri --platform=ruby -- --use-system-libraries\n</code></pre> <p>If you're using macports and would like to contribute documentation, please open a GitHub issue or pull-request on nokogiri.org/installing_nokogiri.md.</p>"},{"location":"tutorials/installing_nokogiri.html#freebsd","title":"FreeBSD","text":"<pre><code>sudo pkg install pkgconf libxml2 libxslt\ngem install nokogiri -- --use-system-libraries\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#openbsd","title":"OpenBSD","text":"<pre><code>pkg_add libxslt\ngem install nokogiri -- --use-system-libraries\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#windows","title":"Windows","text":"<p>We recommend installing Nokogiri against the MSYS2 system libraries:</p> <pre><code>ridk exec pacman -S mingw-w64-ucrt-x86_64-libxslt\ngem install nokogiri --platform=ruby -- --use-system-libraries\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#termux_1","title":"Termux","text":"<pre><code>pkg install ruby clang make binutils\npkg install pkg-config libxslt binutils # additional dependencies\ngem install nokogiri --platform=ruby -- --use-system-libraries\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#installing-with-custom-non-standard-libraries","title":"Installing With Custom / Non-Standard Libraries","text":"<p>You may have your own custom version of libxml2/libxslt that you'd like to use. OK! Here we go.</p> <p>Ideally you can install <code>pkg-config</code> and the installed libraries should self-describe how to compile and build against themselves.</p> <p>But if:</p> <ul> <li>you've got <code>libxml2</code> and/or <code>libxslt</code> installed in a nonstandard place,</li> <li>and you don't have <code>pkg-config</code> installed</li> </ul> <p>... then you can use command-line parameters to the <code>gem install</code> command to specify build parameters.</p> <p>You can specify the installation root directory:</p> <pre><code>gem install nokogiri -- \\\n    --use-system-libraries \\\n    --with-xml2-dir=/path/to/dir \\\n    --with-xslt-dir=/path/to/dir\n</code></pre> <p>or, you can specify include and library directories separately:</p> <pre><code>gem install nokogiri -- \\\n    --use-system-libraries \\\n    --with-xml2-lib=/path/to/builds/lib \\\n    --with-xml2-include=/path/to/builds/include/libxml2 \\\n    --with-xslt-lib=/path/to/builds/lib \\\n    --with-xslt-include=/path/to/builds/include\n</code></pre> <p>Note: By default, libxslt header files are installed into the root include directory, but libxml2 header files are installed into a subdirectory thereof named <code>libxml2</code>.</p> <p>It's likely that you'll also need to specify the location of your <code>zlib</code> and <code>iconv</code> (and possibly <code>exslt</code>) install directories as well. In that case, you can add the options:</p> <pre><code>gem install nokogiri -- \\\n    --use-system-libraries \\\n    # ...\n    --with-iconv-dir=/path/to/dir \\\n    --with-zlib-dir=/path/to/dir \\\n    [--with-exslt-dir=/path/to/dir]\n    [--with-exslt-config=/path/to/exslt-config]\n</code></pre> <p>You can also tell bundler to remember these configuration parameters:</p> <pre><code>bundle config build.nokogiri \\\n       --use-system-libraries \\\n       --with-xml2-lib=/usr/local/lib \\\n       --with-xml2-include=/usr/local/include/libxml2/libxml \\\n       --with-xslt-lib=/usr/local/lib \\\n       --with-xslt-include=/usr/local/include/libxslt \\\n       --with-iconv-lib=/usr/local/lib \\\n       --with-iconv-include=/usr/local/include\n</code></pre> <p>Do not attempt Bundler installation using Bundler versions before v1.8.3 (see bundler/bundler#3053 for details). If you really must, see earlier git history of this file, which includes a workaround.</p>"},{"location":"tutorials/installing_nokogiri.html#installing-third-party-distributions-of-nokogiri","title":"Installing Third-Party Distributions of Nokogiri","text":""},{"location":"tutorials/installing_nokogiri.html#debian","title":"Debian","text":"<p>See https://packages.debian.org/sid/ruby-nokogiri</p> <pre><code>sudo apt-get install ruby-nokogiri\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#opensusesle","title":"openSUSE/SLE","text":"<p>See https://download.opensuse.org/repositories/devel:/languages:/ruby:/extensions/</p>"},{"location":"tutorials/installing_nokogiri.html#fedora-red-hat-and-centos_1","title":"Fedora, Red Hat, and CentOS","text":"<p>You may install the appropriate epel-release and get the Nokogiri package from EPEL using:</p> <pre><code>sudo dnf install -y rubygem-nokogiri\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#gnu-guix","title":"GNU Guix","text":"<p>Install on any Linux distribution using GNU Guix, a reproducible binary software package management and distribution system.</p> <p>Use this command:</p> <pre><code>guix package -i ruby-nokogiri\n</code></pre> <p>Note: source code is available here. A short description of how Nokogiri was packaged can be found here.</p>"},{"location":"tutorials/installing_nokogiri.html#other-installation-scenarios","title":"Other Installation Scenarios","text":""},{"location":"tutorials/installing_nokogiri.html#alpine-docker-images","title":"Alpine Docker Images","text":"<p>To just install the native gem:</p> <pre><code>FROM ruby:3.0-alpine\n\nRUN gem install nokogiri\n</code></pre> <p>To compile with the packaged libraries:</p> <pre><code>FROM ruby:3.0-alpine\n\nRUN apk add --no-cache build-base\nRUN gem install nokogiri --platform=ruby\n</code></pre> <p>To compile against Alpine's own XML libraries, add the necessary development tools and libraries to the image.</p> <pre><code>FROM ruby:3.0-alpine\n\nRUN apk add --no-cache build-base libxml2-dev libxslt-dev\nRUN gem install nokogiri --platform=ruby -- --use-system-libraries\n</code></pre> <p>When optimizing the size of an Alpine image, the runtime libraries must be permanently added. Additionally, adding and removing development tooling can be chained with gem installation to ensure a small layer.</p> <pre><code>FROM ruby:3.0-alpine\n\nRUN apk add --no-cache libxml2 libxslt &amp;&amp; \\\n        apk add --no-cache --virtual .gem-installdeps build-base libxml2-dev libxslt-dev &amp;&amp; \\\n        gem install nokogiri --platform=ruby -- --use-system-libraries &amp;&amp; \\\n        rm -rf $GEM_HOME/cache &amp;&amp; \\\n        apk del .gem-installdeps\n</code></pre> <p>This approach nets an 12.1 MB layer (versus 18.1 MB without <code>--use-system-libraries</code>) and saves over 170 MB in build tools.</p>"},{"location":"tutorials/installing_nokogiri.html#smartos-nonstandard","title":"SmartOS (Nonstandard)","text":"<p>SmartOS installation requires building and using libxml2/libxslt/libiconv in a nonstandard location. Building on the previous section, here's how to do it:</p> <p>(Note: <code>pkgsrc</code> is included in JPC SmartOS instances)</p> <pre><code>pkgin install ruby gcc49 libxml2 libxslt zlib libiconv ruby22-rake gmake\nln -s /opt/local/gcc49/bin/gcc /opt/local/bin/gcc\n\ngem install nokogiri -- \\\n    --use-system-libraries \\\n    --with-xml2-lib=/opt/local/lib \\\n    --with-xml2-include=/opt/local/include/libxml2 \\\n    --with-xslt-lib=/opt/local/lib \\\n    --with-xslt-include=/opt/local/include/libxslt \\\n    --with-iconv-lib=/opt/local/lib \\\n    --with-iconv-include=/opt/local/include \\\n    --with-zlib-dir=/opt/local/lib\n</code></pre> <p>See the previous section for guidance on how to instruct Bundler to use these options.</p>"},{"location":"tutorials/installing_nokogiri.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/installing_nokogiri.html#cannot-load-such-file-nokogirinokogiri-loaderror","title":"<code>cannot load such file -- nokogiri/nokogiri (LoadError)</code>","text":"<p>Particularly when upgrading to a newer version of Ruby, this error appears at runtime.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms","title":"Symptoms","text":"<p>Installation succeeds, but then at runtime this error message is seen:</p> <pre><code>kernel_require.rb:23:in `require': cannot load such file -- nokogiri/nokogiri (LoadError)\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution","title":"Solution","text":"<p>Uninstall all versions of Nokogiri on your system, and then re-resolve your dependencies (using <code>bundle</code> or <code>gem install</code>).</p> <p>This error can occur when a version of Nokogiri installed for a different version of Ruby is used by an unsupported version of Ruby. For example, if Nokogiri v1.12.5-x86_64-linux installed by Ruby 3.0 is then used by Ruby 3.1, you'll see this error (note that nokogiri v1.12.5 native gems do not support Ruby 3.1).</p>"},{"location":"tutorials/installing_nokogiri.html#using-vendorcache-to-deploy-to-another-architecture","title":"Using <code>vendor/cache</code> to deploy to another architecture","text":"<p>A common workflow is for a team to develop on a Mac but deploy to production on Linux. This workflow depends on Bundler caching an appropriate gem file in <code>vendor/cache</code>. Unfortunately, in this situation Bundler's default behavior is to cache only gems for the development system and not the production system, leading to an error at deploy time.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_1","title":"Symptoms","text":"<p>During deployment, the buildpack may fail to find a relevant gem in <code>vendor/cache</code> and emit an error like this (from Heroku):</p> <pre><code>-----&gt; Ruby app detected\n-----&gt; Installing bundler 2.1.4\n-----&gt; Removing BUNDLED WITH version in the Gemfile.lock\n-----&gt; Compiling Ruby/Rails\n-----&gt; Using Ruby version: ruby-2.7.2\n-----&gt; Installing dependencies using bundler 2.1.4\n       Running: BUNDLE_WITHOUT='development:test' BUNDLE_PATH=vendor/bundle BUNDLE_BIN=vendor/bundle/bin BUNDLE_DEPLOYMENT=1 bundle install -j4\n       Some gems seem to be missing from your vendor/cache directory.\n       Could not find nokogiri-1.11.0 in any of the sources\n       Bundler Output: Some gems seem to be missing from your vendor/cache directory.\n       Could not find nokogiri-1.11.0 in any of the sources\n !\n !     Failed to install gems via Bundler.\n !\n !     Push rejected, failed to compile Ruby app.\n !     Push failed\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution_1","title":"Solution","text":"<p>Bundler 2.2 and later has great multiplatform support and allows you to cache gems for multiple platforms. You can run commands like these to cause Bundler to fetch and cache gems for all the named platforms:</p> <pre><code>bundle lock --add-platform x86_64-darwin\nbundle lock --add-platform x86_64-linux\nbundle package --all-platforms\n</code></pre> <p>For more information, please read this wonderful blog post written by Kevin Murphy explaining this approach.</p>"},{"location":"tutorials/installing_nokogiri.html#fallback-solution","title":"Fallback Solution","text":"<p>If you can't upgrade to Bundler <code>&gt;= 2.2</code>, you can force older versions to always use the <code>ruby</code> platform, which supports all platforms, but applies to all gems and comes with the installation challenges mentioned earlier in this guide.</p> <p>Here's how to do this with Bundler <code>&gt;= 2.1</code>:</p> <pre><code>rm -rf vendor/cache\nbundle config set force_ruby_platform true\nbundle install\n</code></pre> <p>Or if you're using Bundler <code>&lt; 2.1</code>:</p> <pre><code>rm -rf vendor/cache\nbundle config force_ruby_platform true\nbundle install\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#tar-and-xz-files","title":"<code>tar</code> and <code>xz</code> files","text":"<p>Starting in v1.13.2, the source archive used for libxml2 and libxslt is compressed with <code>xz</code> (previous versions were compressed with <code>gzip</code>. As a result, when compiling from source, your system will need to have <code>xz</code> installed in order to extract the source code for these libraries.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_2","title":"Symptoms","text":"<p>During installation, you may see error output similar to:</p> <pre><code>Extracting libxml2-2.9.13.tar.xz into tmp/armv7l-unknown-linux-gnueabihf/ports/libxml2/2.9.13... ERROR, review '/usr/local/ruby/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.3/ext/nokogiri/tmp/armv7l-unknown-linux-gnueabihf/ports/libxml2/2.9.13/extract.log' to see what happened. Last lines are:\n========================================================================\ntar (child): xz: Cannot exec: No such file or directory\ntar (child): Error is not recoverable: exiting now\n/bin/tar: Child returned status 2\n/bin/tar: Error is not recoverable: exiting now\n========================================================================\n*** extconf.rb failed ***\n</code></pre> <p>or</p> <pre><code>Extracting libxml2-2.9.14.tar.xz into tmp/x86_64-unknown-openbsd7.1/ports/libxml2/2.9.14... ERROR, review '/usr/local/lib/ruby/gems/3.0/gems/nokogiri-1.13.6/ext/nokogiri/tmp/x86_64-unknown-openbsd7.1/ports/libxml2/2.9.14/extract.log' to see what happened. Last lines are:\n========================================================================\ntar: unknown option J\nusage: tar {crtux}[014578befHhjLmNOoPpqsvwXZz]\n           [blocking-factor | archive | replstr] [-C directory] [-I file]\n           [file ...]\n       tar {-crtux} [-014578eHhjLmNOoPpqvwXZz] [-b blocking-factor]\n           [-C directory] [-f archive] [-I file] [-s replstr] [file ...]\n========================================================================\n*** extconf.rb failed ***\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution_2","title":"Solution","text":"<p>On Debian/Ubuntu:</p> <pre><code>sudo apt-get install xz-utils\n</code></pre> <p>On Alpine:</p> <pre><code>apk add xz\n</code></pre> <p>On OpenBSD:</p> <pre><code>pkg_add gtar\nalias tar=gtar\n</code></pre> <p>If you have this problem on another system, please open an issue and give us some details so we can update this page.</p>"},{"location":"tutorials/installing_nokogiri.html#linux-musl-error-loading-shared-library","title":"[Linux musl] \"Error loading shared library\"","text":"<p>Musl-based systems like Alpine may not have a glibc-compatible library installed, leading to problems running the precompiled native gems.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_3","title":"Symptoms","text":"<p>Installation succeeds, but then at runtime you'll see an error like this:</p> <pre><code>Error loading shared library ld-linux-x86-64.so.2: No such file or directory\n</code></pre> <p>or like this if you're on ARM64:</p> <pre><code>Error loading shared library ld-linux-aarch64.so.1: No such file or directory\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution_3","title":"Solution","text":"<p>Install the glibc compatibility layer:</p> <pre><code>apk add gcompat\n</code></pre> <p>See https://wiki.alpinelinux.org/wiki/Running_glibc_programs for more details.</p>"},{"location":"tutorials/installing_nokogiri.html#cannot-install-racc","title":"Cannot install <code>racc</code>","text":"<p>As of v1.11.0, Nokogiri is declaring an explicit dependency on <code>racc ~&gt; 1.4</code>, which itself is a C extension that users may have trouble installing.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_4","title":"Symptoms","text":"<p>You may see an error message like this:</p> <pre><code>Fetching racc 1.5.2\nInstalling racc 1.5.2 with native extensions\nGem::Ext::BuildError: ERROR: Failed to build gem native extension.\n\ncurrent directory:\n/Users/myuser2/.gem/ruby/2.7.0/gems/racc-1.5.2/ext/racc/cparse\n/opt/local/bin/ruby2.7 -I /opt/local/lib/ruby2.7/2.7.0 -r\n./siteconf20210104-30183-axgzet.rb extconf.rb\nchecking for rb_ary_subseq()... *** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of necessary\nlibraries and/or headers.  Check the mkmf.log file for more details.  You may\nneed configuration options.\n\nProvided configuration options:\n       --with-opt-dir\n       --with-opt-include\n       --without-opt-include=${opt-dir}/include\n       --with-opt-lib\n       --without-opt-lib=${opt-dir}/lib\n       --with-make-prog\n       --without-make-prog\n       --srcdir=.\n       --curdir\n       --ruby=/opt/local/bin/$(RUBY_BASE_NAME)2.7\n/opt/local/lib/ruby2.7/2.7.0/mkmf.rb:471:in `try_do': The compiler failed to generate an executable file. (RuntimeError)\nYou have to install development tools first.\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:564:in `try_link0'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:582:in `try_link'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:794:in `try_func'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:1083:in `block in have_func'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:971:in `block in checking_for'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:361:in `block (2 levels) in postpone'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:331:in `open'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:361:in `block in postpone'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:331:in `open'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:357:in `postpone'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:970:in `checking_for'\n       from /opt/local/lib/ruby2.7/2.7.0/mkmf.rb:1082:in `have_func'\n       from extconf.rb:6:in `&lt;main&gt;'\n\nTo see why this extension failed to compile, please check the mkmf.log which can\nbe found here:\n\n/Users/myuser2/.gem/ruby/2.7.0/extensions/arm64-darwin-20/2.7.0/racc-1.5.2/mkmf.log\n\nextconf failed, exit code 1\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution-1-compiler-toolchain","title":"Solution 1 - Compiler toolchain","text":"<p>Racc needs the same compiler toolchain to be present as any Gem with a C extension. See Appendix A: The Compiler Toolchain.</p>"},{"location":"tutorials/installing_nokogiri.html#solution-2-avoid-installing-racc","title":"Solution 2 - Avoid installing Racc","text":"<p>Ruby 3.0 comes with Racc 1.5.x as a \"builtin gem\", so you could update to Ruby 3!</p> <p>Ruby 2.7 comes with Racc 1.4.x as a \"builtin gem\", so you could use that version instead of trying to upgrade. Update to Ruby 2.7 and add a line like <code>gem \"racc\", \"~&gt; 1.4.0\"</code> to prevent Bundler from trying to upgrade.</p>"},{"location":"tutorials/installing_nokogiri.html#linux-usrbinld-cannot-find-lgmp","title":"[Linux] <code>/usr/bin/ld: cannot find -lgmp</code>","text":"<p>If you're compiling the <code>ruby</code> platform gem, and if you've installed Ruby using RVM, you may require libgmp.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_5","title":"Symptoms","text":"<p>Gem installation fails with an error message like:</p> <pre><code>/home/user/.rvm/rubies/ruby-2.2.3/lib/ruby/2.2.0/mkmf.rb:456:in `try_do': The compiler failed to generate an executable file. (RuntimeError)\nYou have to install development tools first.\n</code></pre> <p>And examination of your <code>mkmf.log</code> file shows:</p> <pre><code>/usr/bin/ld: cannot find -lgmp\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution_4","title":"Solution","text":"<p>Run <code>sudo apt-get install libgmp-dev</code>.</p>"},{"location":"tutorials/installing_nokogiri.html#macos-xcode-select-errors-with-a-network-problem","title":"[MacOS] <code>xcode-select</code> errors with a 'network problem'","text":"<p>If you're compiling the <code>ruby</code> platform gem ...</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_6","title":"Symptoms","text":"<p>You see this dialog when you run the commands to update xcode commandline tools:</p> <p></p>"},{"location":"tutorials/installing_nokogiri.html#solution_5","title":"Solution","text":"<p>Run this command to turn off forced-authentication with Apple Software Update:</p> <pre><code>sudo defaults delete /Library/Preferences/com.apple.SoftwareUpdate CatalogURL\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#macos-error-use-of-undeclared-identifier-lzma_ok","title":"[MacOS] <code>error: use of undeclared identifier 'LZMA_OK'</code>","text":"<p>If you're compiling the <code>ruby</code> platform gem ...</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_7","title":"Symptoms","text":"<p>An error during Nokogiri installation mentions an undeclared identifier <code>LZMA_OK</code>:</p> <pre><code>xmlIO.c:1450:52: error: use of undeclared identifier 'LZMA_OK'\n    ret =  (__libxml2_xzclose((xzFile) context) == LZMA_OK ) ? 0 : -1;\n                                                   ^\n1 error generated.\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#diagnosis","title":"Diagnosis","text":"<p>When using Homebrew, there are several libraries that use a formula called <code>xz</code> (including <code>the_silver_searcher</code> and <code>imagemagick</code>), which by default install a version of <code>liblzma</code> that is incompatible with most Ruby builds.  (Homebrew installs only the 64-bit version of the library, but most Ruby builds are universal.) This can be fixed in a couple of ways:</p>"},{"location":"tutorials/installing_nokogiri.html#solution-1","title":"Solution 1","text":"<p>The most reliable solution appears to be temporarily unlinking <code>xz</code> and relinking it during an install of <code>nokogiri</code>:</p> <pre><code>brew unlink xz\ngem install nokogiri # or bundle install\nbrew link xz\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution-2","title":"Solution 2","text":"<p>The other solution is to use a Homebrew-installed <code>libxml2</code>, as suggested in Installing Using Standard System Libraries.</p> <pre><code>brew install libxml2\ngem install nokogiri -- --use-system-libraries \\\n    --with-xml2-include=$(brew --prefix libxml2)/include/libxml2\n</code></pre> <p>or if you're using Bundler:</p> <pre><code>bundle config build.nokogiri --use-system-libraries \\\n    --with-xml2-include=$(brew --prefix libxml2)/include/libxml2\nbundle install\n</code></pre> <p>When working with this, be certain to use <code>$(brew --prefix libxml2)</code> because it will use the correct location for your Homebrew install.</p>"},{"location":"tutorials/installing_nokogiri.html#macos-libiconv-is-missing","title":"[MacOS] <code>libiconv is missing</code>","text":"<p>Xcode 10 on macOS Mojave moves the system headers out of <code>/usr/include</code> and so Nokogiri will fail to build when you're compiling the <code>ruby</code> platform gem.</p>"},{"location":"tutorials/installing_nokogiri.html#symptoms_8","title":"Symptoms","text":"<p>You'll see an error similar to this:</p> <pre><code>Building nokogiri using packaged libraries.\n\nlibiconv is missing.  please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies.\n\n*** extconf.rb failed ***\nCould not create Makefile due to some reason, probably lack of necessary libraries and/or headers.\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#solution_6","title":"Solution","text":"<p>A temporary workaround to allow previous releases of Nokogiri to build is to install the extra headers package mentioned in the Xcode 10 release notes:</p> <pre><code>open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\n</code></pre> <p>You can also install the headers package from the command line (e.g. for a build script or a CI server):</p> <pre><code>sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#macos-general-macos-tips","title":"[MacOS] General MacOS Tips","text":"<p>If you're seeing other problems:</p> <ul> <li>Make sure ruby is compiled with the latest clang compiler.</li> <li>Binary gems and ruby should be compiled with the same compiler/environment.</li> <li>If you have multiple versions of Xcode installed, make sure you use the right <code>xcode-select</code>.</li> <li>Try Installing Using Standard System Libraries.</li> </ul>"},{"location":"tutorials/installing_nokogiri.html#appendix-a-the-compiler-toolchain","title":"Appendix A: The Compiler Toolchain","text":"<p>A good way to tell if you've got your basic Ruby C extension compiler toolchain installed correctly is to try installing the <code>bcrypt</code> gem which has a smaller, self-contained C extension. If you can <code>gem install bcrypt</code>, you're all set!</p> <p>Reminder: if you're installing a native gem, you don't need to do this.</p>"},{"location":"tutorials/installing_nokogiri.html#ubuntu-or-debian-based-distros_1","title":"Ubuntu or Debian-based Distros","text":"<pre><code>sudo apt-get install build-essential ruby-dev\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#fedora-red-hat-and-centos_2","title":"Fedora, Red Hat, and CentOS","text":"<pre><code>dnf install -y make gcc rpm-build ruby-devel\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#alpine","title":"Alpine","text":"<pre><code>apk add build-base\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#termux_2","title":"Termux","text":"<pre><code>pkg install clang make binutils\n</code></pre>"},{"location":"tutorials/installing_nokogiri.html#windows_1","title":"Windows","text":"<p>Please visit RubyInstaller and make sure you install a version \"With Devkit\".</p>"},{"location":"tutorials/installing_nokogiri.html#macos_1","title":"MacOS","text":"<p>First, make sure you have the latest version of RubyGems and xcode commandline tools:</p> <pre><code>gem update --system\nxcode-select --install # Then agree to the terms, even if you have done this before!\n</code></pre> <p>Agree to the Xcode license:</p> <pre><code>sudo xcodebuild -license\n</code></pre>"},{"location":"tutorials/modifying_an_html_xml_document.html","title":"Modifying an HTML / XML Document","text":""},{"location":"tutorials/modifying_an_html_xml_document.html#changing-text-contents","title":"Changing text contents","text":"<p>Assuming we have the following HTML document:</p> <pre><code>@doc = Nokogiri::HTML::DocumentFragment.parse &lt;&lt;-EOHTML\n&lt;body&gt;\n  &lt;h1&gt;Three's Company&lt;/h1&gt;\n  &lt;div&gt;A love triangle.&lt;/div&gt;\n&lt;/body&gt;\nEOHTML\n</code></pre> <p>Let's change the header's text contents:</p> <pre><code>h1 = @doc.at_css \"h1\"\nh1.content = \"Snap, Crackle &amp; Pop\"\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  &lt;h1&gt;Snap, Crackle &amp;amp; Pop&lt;/h1&gt;\n# \" +\n#    \"  &lt;div&gt;A love triangle.&lt;/div&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre> <p>You'll notice that, when you use <code>#content=</code>, entities are properly escaped. Pow!</p>"},{"location":"tutorials/modifying_an_html_xml_document.html#moving-nodes","title":"Moving nodes","text":"<p>The simplest method of moving a node is assign its parent:</p> <pre><code>h1  = @doc.at_css \"h1\"\ndiv = @doc.at_css \"div\"\nh1.parent = div\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  \n# \" +\n#    \"  &lt;div&gt;A love triangle.&lt;h1&gt;Three's Company&lt;/h1&gt;\n# \" +\n#    \"&lt;/div&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre> <p>But you could also arrange it next to other nodes:</p> <pre><code>div.add_next_sibling(h1)\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  \n# \" +\n#    \"  &lt;div&gt;A love triangle.&lt;/div&gt;\n# \" +\n#    \"&lt;h1&gt;Three's Company&lt;/h1&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre>"},{"location":"tutorials/modifying_an_html_xml_document.html#modifying-nodes-and-attributes","title":"Modifying Nodes and Attributes","text":"<pre><code>h1.name = 'h2'\nh1['class'] = 'show-title'\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  &lt;h2 class=\\\"show-title\\\"&gt;Three's Company&lt;/h2&gt;\n# \" +\n#    \"  &lt;div&gt;A love triangle.&lt;/div&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre>"},{"location":"tutorials/modifying_an_html_xml_document.html#creating-new-nodes","title":"Creating new nodes","text":"<p>Often the easiest thing to do is pass markup to one of the <code>Node</code> methods to create siblings:</p> <pre><code>h1.add_next_sibling \"&lt;h3&gt;1977 - 1984&lt;/h3&gt;\"\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  &lt;h1&gt;Three's Company&lt;/h1&gt;\n# \" +\n#    \"&lt;h3&gt;1977 - 1984&lt;/h3&gt;\n# \" +\n#    \"  &lt;div&gt;A love triangle.&lt;/div&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre> <p>or you can manually create a node object, if you're a detail-oriented person:</p> <pre><code>h3 = Nokogiri::XML::Node.new \"h3\", @doc # !&gt; Passing a Node as the second parameter to Node.new is deprecated. Please pass a Document instead, or prefer an alternative constructor like Node#add_child. This will become an error in Nokogiri v1.17.0.\nh3.content = \"1977 - 1984\"\nh1.add_next_sibling(h3)\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  &lt;h1&gt;Three's Company&lt;/h1&gt;\n# \" +\n#    \"&lt;h3&gt;1977 - 1984&lt;/h3&gt;\n# \" +\n#    \"  &lt;div&gt;A love triangle.&lt;/div&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre>"},{"location":"tutorials/modifying_an_html_xml_document.html#wrapping-a-nodeset","title":"Wrapping a NodeSet","text":"<p>If you wanted to wrap new HTML around each node in a Nodeset, here's an example of how to do it:</p> <pre><code>nodes = @doc.css \"h1,div\"\nnodes.wrap(\"&lt;div class='container'&gt;&lt;/div&gt;\")\n\n@doc.to_html\n# =&gt; \"&lt;body&gt;\n# \" +\n#    \"  &lt;div class=\\\"container\\\"&gt;&lt;h1&gt;Three's Company&lt;/h1&gt;&lt;/div&gt;\n# \" +\n#    \"  &lt;div class=\\\"container\\\"&gt;&lt;div&gt;A love triangle.&lt;/div&gt;&lt;/div&gt;\n# \" +\n#    \"\n# \" +\n#    \"&lt;/body&gt;\"\n</code></pre>"},{"location":"tutorials/modifying_an_html_xml_document.html#adding-a-processing-instruction","title":"Adding a Processing Instruction","text":""},{"location":"tutorials/modifying_an_html_xml_document.html#like-xml-stylesheet","title":"(like &lt;?xml-stylesheet?&gt;)","text":"<p>If you want to add a processing instruction (a.k.a. \"PI node\"), like an xml-stylesheet declaration, you should first create the node using <code>Nokogiri::XML::ProcessingInstruction.new</code> and then add it to the document as a previous-sibling of the root node:</p> <pre><code>doc = Nokogiri::XML \"&lt;root&gt;foo&lt;/root&gt;\"\ndoc.to_xml\n# =&gt; \"&lt;?xml version=\\\"1.0\\\"?&gt;\n# \" + \"&lt;root&gt;foo&lt;/root&gt;\n# \"\n\npi = Nokogiri::XML::ProcessingInstruction.new(doc, \"xml-stylesheet\",\n                                              'type=\"text/xsl\" href=\"foo.xsl\"')\ndoc.root.add_previous_sibling pi\ndoc.to_xml\n# =&gt; \"&lt;?xml version=\\\"1.0\\\"?&gt;\n# \" +\n#    \"&lt;?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"foo.xsl\\\"?&gt;\n# \" +\n#    \"&lt;root&gt;foo&lt;/root&gt;\n# \"\n</code></pre>"},{"location":"tutorials/more_resources.html","title":"More Resources","text":"<ul> <li>sax-machine</li> <li>feedzirra</li> <li>elementor</li> <li>mechanize</li> <li>markup_validity</li> </ul>"},{"location":"tutorials/parsing_an_html5_document.html","title":"Parsing an HTML5 Document","text":"<p>Nokogiri provides the ability for a Ruby program to invoke our version of the Gumbo HTML5 parser and to access the result as a Nokogiri::HTML::Document.</p> <p>Why is HTML5 parsing covered as a separate tutorial from HTML parsing?</p> <p>Eventually, we'll integrate HTML5 docs into the other of tutorials, and this page will go away. We shipped HTML5 support as quickly as possible by copying (and only lightly editing) the Nokogumbo documentation to this page.</p> <p>HTML5 support is only in v1.12.0 and later.</p> <p>This tutorial describes functionality that is only available in Nokogiri v1.12.0 and later. Please visit the HTML5 API documentation for more information.</p> <p>HTML5 functionality is not available when running JRuby.</p> <p>The JRuby implementation of Nokogiri does not support HTML5 as of v1.12.0. If you'd like to help implement this support, or would like to know more, please see #2227.</p>"},{"location":"tutorials/parsing_an_html5_document.html#usage","title":"Usage","text":"<p>Parse an HTML5 document:</p> <pre><code>doc = Nokogiri.HTML5(string)\n</code></pre> <p>Parse an HTML5 fragment:</p> <pre><code>fragment = Nokogiri::HTML5.fragment(string)\n</code></pre>"},{"location":"tutorials/parsing_an_html5_document.html#parsing-options","title":"Parsing options","text":"<p>The document and fragment parsing methods support options that are different from Nokogiri's.</p> <ul> <li><code>Nokogiri.HTML5(html, url = nil, encoding = nil, options = {})</code></li> <li><code>Nokogiri::HTML5.parse(html, url = nil, encoding = nil, options = {})</code></li> <li><code>Nokogiri::HTML5::Document.parse(html, url = nil, encoding = nil, options = {})</code></li> <li><code>Nokogiri::HTML5.fragment(html, encoding = nil, options = {})</code></li> <li><code>Nokogiri::HTML5::DocumentFragment.parse(html, encoding = nil, options = {})</code></li> </ul> <p>The three currently supported options are <code>:max_errors</code>, <code>:max_tree_depth</code> and <code>:max_attributes</code>, described below.</p>"},{"location":"tutorials/parsing_an_html5_document.html#error-reporting","title":"Error reporting","text":"<p>Nokogiri contains an experimental HTML5 parse error reporting facility. By default, no parse errors are reported but this can be configured by passing the <code>:max_errors</code> option to HTML5.parse or HTML5.fragment.</p> <p>For example, this script:</p> <pre><code>doc = Nokogiri::HTML5.parse('&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;', max_errors: 10)\ndoc.errors.each do |err|\n  puts(err)\nend\n</code></pre> <p>Emits:</p> <pre><code>1:1: ERROR: Expected a doctype token\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n^\n1:1: ERROR: Start tag of nonvoid HTML element ends with '/&gt;', use '&gt;'.\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n^\n1:17: ERROR: End tag ends with '/&gt;', use '&gt;'.\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n                ^\n1:17: ERROR: End tag contains attributes.\n&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;\n                ^\n</code></pre> <p>Using <code>max_errors: -1</code> results in an unlimited number of errors being returned.</p> <p>The HTML standard defines a number of standard parse error codes. These error codes only cover the \"tokenization\" stage of parsing HTML. The parse errors in the \"tree construction\" stage do not have standardized error codes (yet).</p> <p>As a convenience to Nokogiri users, the defined error codes are available via <code>Nokogiri::XML::SyntaxError#str1</code> method:</p> <pre><code>doc = Nokogiri::HTML5.parse('&lt;span/&gt;Hi there!&lt;/span foo=bar /&gt;', max_errors: 10)\ndoc.errors.each do |err|\n  puts(\"#{err.line}:#{err.column}: #{err.str1}\")\nend\n# =&gt; 1:1: generic-parser\n#    1:1: non-void-html-element-start-tag-with-trailing-solidus\n#    1:17: end-tag-with-trailing-solidus\n#    1:17: end-tag-with-attributes\n</code></pre> <p>Note that the first error is <code>generic-parser</code> because it's an error from the tree construction stage and doesn't have a standardized error code.</p> <p>For the purposes of semantic versioning, the error messages, error locations, and error codes are not part of Nokogiri's public API. That is, these are subject to change without Nokogiri's major version number changing. These may be stabilized in the future.</p>"},{"location":"tutorials/parsing_an_html5_document.html#maximum-tree-depth","title":"Maximum tree depth","text":"<p>The maximum depth of the DOM tree parsed by the various parsing methods is configurable by the <code>:max_tree_depth</code> option. If the depth of the tree would exceed this limit, then an <code>::ArgumentError</code> is thrown.</p> <p>This limit (which defaults to <code>Nokogiri::Gumbo::DEFAULT_MAX_TREE_DEPTH = 400</code>) can be removed by giving the option <code>max_tree_depth: -1</code>.</p> <pre><code>html = '&lt;!DOCTYPE html&gt;' + '&lt;div&gt;' * 1000\ndoc = Nokogiri.HTML5(html)\n# raises ArgumentError: Document tree depth limit exceeded\ndoc = Nokogiri.HTML5(html, max_tree_depth: -1)\n</code></pre>"},{"location":"tutorials/parsing_an_html5_document.html#attribute-limit-per-element","title":"Attribute limit per element","text":"<p>The maximum number of attributes per DOM element is configurable by the <code>:max_attributes</code> option. If a given element would exceed this limit, then an <code>::ArgumentError</code> is thrown.</p> <p>This limit (which defaults to <code>Nokogiri::Gumbo::DEFAULT_MAX_ATTRIBUTES = 400</code>) can be removed by giving the option <code>max_attributes: -1</code>.</p> <pre><code>html = '&lt;!DOCTYPE html&gt;&lt;div ' + (1..1000).map { |x| \"attr-#{x}\" }.join(' ') + '&gt;'\n# \"&lt;!DOCTYPE html&gt;&lt;div attr-1 attr-2 attr-3 ... attr-1000&gt;\"\ndoc = Nokogiri.HTML5(html)\n# raises ArgumentError: Attributes per element limit exceeded\ndoc = Nokogiri.HTML5(html, max_attributes: -1)\n</code></pre>"},{"location":"tutorials/parsing_an_html5_document.html#html-serialization","title":"HTML Serialization","text":"<p>After parsing HTML, it may be serialized using any of the <code>Nokogiri::XML::Node</code> serialization methods. In particular, <code>XML::Node#serialize</code>, <code>#to_html</code>, and <code>#to_s</code> will serialize a given node and its children. (This is the equivalent of JavaScript's <code>Element.outerHTML</code>.) Similarly, <code>XML::Node#inner_html</code> will serialize the children of a given node. (This is the equivalent of JavaScript's <code>Element.innerHTML</code>.)</p> <pre><code>doc = Nokogiri::HTML5(\"&lt;!DOCTYPE html&gt;&lt;span&gt;Hello world!&lt;/span&gt;\")\nputs doc.serialize\n# =&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;span&gt;Hello world!&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/parsing_an_html5_document.html#notes","title":"Notes","text":"<ul> <li> <p>The <code>Nokogiri::HTML5.fragment</code> function takes a string and parses it   as a HTML5 document.  The <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements are   removed from this document, and any children of these elements that remain   are returned as a <code>Nokogiri::HTML5::DocumentFragment</code>.</p> </li> <li> <p>The <code>Nokogiri::HTML5.parse</code> function takes a string and passes it to the   <code>gumbo_parse_with_options</code> method, using the default options.   The resulting Gumbo parse tree is then walked.</p> </li> <li> <p>Instead of uppercase element names, lowercase element names are produced.</p> </li> <li> <p>Instead of returning <code>unknown</code> as the element name for unknown tags, the   original tag name is returned verbatim.</p> </li> </ul>"},{"location":"tutorials/parsing_an_html_xml_document.html","title":"Parsing an HTML / XML Document","text":""},{"location":"tutorials/parsing_an_html_xml_document.html#from-a-string","title":"From a String","text":"<p>We've tried to make this easy on you. Really! We're here to make your life easier.</p> <pre><code>html_doc = Nokogiri::HTML(\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Mr. Belvedere Fan Club&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\")\nxml_doc  = Nokogiri::XML(\"&lt;root&gt;&lt;aliens&gt;&lt;alien&gt;&lt;name&gt;Alf&lt;/name&gt;&lt;/alien&gt;&lt;/aliens&gt;&lt;/root&gt;\")\n</code></pre> <p>The variables <code>html_doc</code> and <code>xml_doc</code> are Nokogiri documents, which have all kinds of interesting properties and methods that you can read about here. We'll cover the interesting bits in other chapters.</p>"},{"location":"tutorials/parsing_an_html_xml_document.html#from-a-file","title":"From a File","text":"<p>Note that you don't need to read the file into a string variable. Nokogiri will do this for you.</p> <pre><code>doc = File.open(\"blossom.xml\") { |f| Nokogiri::XML(f) }\n</code></pre> <p>Clever Nokogiri! With the time you just saved, approach enlightenment by meditating on this koan.</p>"},{"location":"tutorials/parsing_an_html_xml_document.html#from-the-internets","title":"From the Internets","text":"<p>I understand that there may be some HTML documents available on the World Wide Web.</p> <pre><code>require 'open-uri'\ndoc = Nokogiri::HTML(URI.open(\"http://www.threescompany.com/\"))\n</code></pre>"},{"location":"tutorials/parsing_an_html_xml_document.html#parse-options","title":"Parse Options","text":"<p>Nokogiri offers quite a few options that affect how a document is parsed; you can read about them in the XML::ParseOptions docs.</p> <p>Notably, Nokogiri will treat input as untrusted documents by default, thereby avoiding a class of vulnerabilities known as XXE or \"XML eXternal Entity\" processing. What this means is that Nokogiri won't attempt to load external DTDs or access the network for any external resources.</p> <p>Some commonly-used parse options with security implications are:</p> <ul> <li><code>NONET</code> - Prevent any network connections during parsing. This is set by default!</li> <li>\u26a0 It is UNSAFE to unset this option when parsing untrusted documents.</li> <li><code>NOENT</code> - Substitute entities</li> <li>\u26a0 It is UNSAFE to set this option when parsing untrusted documents.</li> <li><code>DTDLOAD</code> <code>DTDVALID</code> - If you want DTD validation</li> <li>\u26a0 It is UNSAFE to set <code>DTDLOAD</code> when parsing untrusted documents.</li> <li><code>HUGE</code> - use to skip hardcoded limits around document size or DOM depth</li> <li>\u26a0 It is UNSAFE to set this option when parsing untrusted documents.</li> </ul> <p>Some other commonly-used parse options are:</p> <ul> <li><code>RECOVER</code> - Attempt to recover from errors. This is set by default!</li> <li>Recommended for parsing malformed or invalid documents.</li> <li><code>NOBLANKS</code> - Remove blank nodes</li> <li><code>NOERROR</code> - Suppress error reports</li> <li><code>STRICT</code> - Strict parsing; raise an error when parsing malformed documents</li> </ul> <p>You could use them by handcrafting an artisanal bitmap (not recommended):</p> <pre><code>doc = Nokogiri::XML(File.open(\"blossom.xml\")) do |config|\n  config.options = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::NOBLANKS\nend\n</code></pre> <p>But it's more idiomatic to use the chainable shortcuts on the config object instead:</p> <pre><code>doc = Nokogiri::XML(File.open(\"blossom.xml\")) do |config|\n  config.strict.noblanks\nend\n</code></pre> <p>Notably, if you want to turn off an option that's set by default, you can prefix a \"no\" to the config shortcut:</p> <pre><code>doc = Nokogiri::XML(File.open(\"blossom.xml\")) do |config|\n  config.norecover\nend\n</code></pre> <p>Leading to the perhaps-surprising (but logical!) <code>nononet</code> to turn networking back on:</p> <pre><code>doc = Nokogiri::XML(File.open(\"blossom.xml\")) do |config|\n  config.nononet\nend\n</code></pre>"},{"location":"tutorials/parsing_an_html_xml_document.html#encoding","title":"Encoding","text":"<p>Strings are always stored as UTF-8 internally.  Methods that return text values will always return UTF-8 encoded strings.  Methods that return XML (like to_xml, to_html and inner_html) will return a string encoded like the source document.</p> <p>WARNING</p> <p>Some documents declare one particular encoding, but use a different one. So, which encoding should the parser choose?</p> <p>Remember that data is just a stream of bytes. Only us humans add meaning to that stream. Any particular set of bytes could be valid characters in multiple encodings, so detecting encoding with 100% accuracy is not possible. libxml2 does its best, but it can't be right 100% of the time.</p> <p>If you want Nokogiri to handle the document encoding properly, your best bet is to explicitly set the encoding.  Here is an example of explicitly setting the encoding to EUC-JP on the parser:</p> <pre><code>doc = Nokogiri.XML('&lt;foo&gt;&lt;bar /&gt;&lt;foo&gt;', nil, 'EUC-JP')\n</code></pre>"},{"location":"tutorials/searching_a_xml_html_document.html","title":"Searching an HTML / XML Document","text":""},{"location":"tutorials/searching_a_xml_html_document.html#basic-searching","title":"Basic Searching","text":"<p>Let's suppose you have the following document:</p> <pre><code>[shows.xml]\n&lt;root&gt;\n  &lt;sitcoms&gt;\n    &lt;sitcom&gt;\n      &lt;name&gt;Married with Children&lt;/name&gt;\n      &lt;characters&gt;\n        &lt;character&gt;Al Bundy&lt;/character&gt;\n        &lt;character&gt;Bud Bundy&lt;/character&gt;\n        &lt;character&gt;Marcy Darcy&lt;/character&gt;\n      &lt;/characters&gt;\n    &lt;/sitcom&gt;\n    &lt;sitcom&gt;\n      &lt;name&gt;Perfect Strangers&lt;/name&gt;\n      &lt;characters&gt;\n        &lt;character&gt;Larry Appleton&lt;/character&gt;\n        &lt;character&gt;Balki Bartokomous&lt;/character&gt;\n      &lt;/characters&gt;\n    &lt;/sitcom&gt;\n  &lt;/sitcoms&gt;\n  &lt;dramas&gt;\n    &lt;drama&gt;\n      &lt;name&gt;The A-Team&lt;/name&gt;\n      &lt;characters&gt;\n        &lt;character&gt;John \"Hannibal\" Smith&lt;/character&gt;\n        &lt;character&gt;Templeton \"Face\" Peck&lt;/character&gt;\n        &lt;character&gt;\"B.A.\" Baracus&lt;/character&gt;\n        &lt;character&gt;\"Howling Mad\" Murdock&lt;/character&gt;\n      &lt;/characters&gt;\n    &lt;/drama&gt;\n  &lt;/dramas&gt;\n&lt;/root&gt;\n</code></pre> <p>Let's further suppose that you want a list of all the characters in all the shows in this document.</p> <pre><code>@doc = Nokogiri::XML(File.open(\"shows.xml\"))\n@doc.xpath(\"//character\")\n# =&gt; [\"&lt;character&gt;Al Bundy&lt;/character&gt;\",\n#    \"&lt;character&gt;Bud Bundy&lt;/character&gt;\",\n#    \"&lt;character&gt;Marcy Darcy&lt;/character&gt;\",\n#    \"&lt;character&gt;Larry Appleton&lt;/character&gt;\",\n#    \"&lt;character&gt;Balki Bartokomous&lt;/character&gt;\",\n#    \"&lt;character&gt;John \\\"Hannibal\\\" Smith&lt;/character&gt;\",\n#    \"&lt;character&gt;Templeton \\\"Face\\\" Peck&lt;/character&gt;\",\n#    \"&lt;character&gt;\\\"B.A.\\\" Baracus&lt;/character&gt;\",\n#    \"&lt;character&gt;\\\"Howling Mad\\\" Murdock&lt;/character&gt;\"]\n</code></pre> <p>The <code>Node</code> methods <code>xpath</code> and <code>css</code> actually return a NodeSet, which acts very much like an array, and contains matching nodes from the document.</p> <pre><code>characters = @doc.xpath(\"//character\")\ncharacters[0].to_s # =&gt; \"&lt;character&gt;Al Bundy&lt;/character&gt;\"\n</code></pre> <p>You can use any XPath or CSS query you like (see the chapter on XPath and CSS syntax for more information).</p> <pre><code>@doc.xpath(\"//dramas//character\")\n# =&gt; [\"&lt;character&gt;John \\\"Hannibal\\\" Smith&lt;/character&gt;\",\n#    \"&lt;character&gt;Templeton \\\"Face\\\" Peck&lt;/character&gt;\",\n#    \"&lt;character&gt;\\\"B.A.\\\" Baracus&lt;/character&gt;\",\n#    \"&lt;character&gt;\\\"Howling Mad\\\" Murdock&lt;/character&gt;\"]\n</code></pre> <p>Notably, you can even use CSS queries in an XML document!</p> <pre><code>characters = @doc.css(\"sitcoms name\") # =&gt; [\"&lt;name&gt;Married with Children&lt;/name&gt;\", \"&lt;name&gt;Perfect Strangers&lt;/name&gt;\"]\n</code></pre> <p>CSS queries are often the easiest and most succinct way to express what you're looking for, so don't be afraid to use them!</p>"},{"location":"tutorials/searching_a_xml_html_document.html#single-results","title":"Single Results","text":"<p>If you know you're going to get only a single result back, you can use the shortcuts <code>at_css</code> and <code>at_xpath</code> instead of having to access the first element of a NodeSet.</p> <pre><code>@doc.css(\"dramas name\").first # =&gt; \"&lt;name&gt;The A-Team&lt;/name&gt;\"\n@doc.at_css(\"dramas name\")    # =&gt; \"&lt;name&gt;The A-Team&lt;/name&gt;\"\n</code></pre>"},{"location":"tutorials/searching_a_xml_html_document.html#namespaces","title":"Namespaces","text":"<p>Just like our Ruby code, XML can suffer from name collisions.  For example, an autoparts dealer can sell tires and so can a bike dealer.  Both of them may use a \"tire\" tag to describe the tires they sell.  However, we need to be able to tell the difference between a car tire and a bike tire.  This is where namespaces come to the rescue.</p> <p>Namespaces associate tags with a unique URL.  Let's take a look at the autoparts store's XML versus the bike stores:</p> <pre><code>[parts.xml]\n&lt;parts&gt;\n  &lt;!-- Alice's Auto Parts Store --&gt;\n  &lt;inventory xmlns=\"http://alicesautoparts.com/\"&gt;\n    &lt;tire&gt;all weather&lt;/tire&gt;\n    &lt;tire&gt;studded&lt;/tire&gt;\n    &lt;tire&gt;extra wide&lt;/tire&gt;\n  &lt;/inventory&gt;\n\n  &lt;!-- Bob's Bike Shop --&gt;\n  &lt;inventory xmlns=\"http://bobsbikes.com/\"&gt;\n    &lt;tire&gt;street&lt;/tire&gt;\n    &lt;tire&gt;mountain&lt;/tire&gt;\n  &lt;/inventory&gt;\n&lt;/parts&gt;\n</code></pre> <p>Since the URLs are unique, we can associate our query with a URL and get only the tires belonging to that url:</p> <pre><code>@doc = Nokogiri::XML(File.read(\"parts.xml\"))\n\ncar_tires = @doc.xpath('//car:tire', 'car' =&gt; 'http://alicesautoparts.com/')\n# =&gt; [\"&lt;tire&gt;all weather&lt;/tire&gt;\",\n#    \"&lt;tire&gt;studded&lt;/tire&gt;\",\n#    \"&lt;tire&gt;extra wide&lt;/tire&gt;\"]\n\nbike_tires = @doc.xpath('//bike:tire', 'bike' =&gt; 'http://bobsbikes.com/')\n# =&gt; [\"&lt;tire&gt;street&lt;/tire&gt;\", \"&lt;tire&gt;mountain&lt;/tire&gt;\"]\n</code></pre> <p>To make this namespace registration a bit easier, nokogiri will automatically register any namespaces it finds on the root node for you.  Nokogiri will associate the name in the declaration with the supplied URL.  If we stick to this naming convention, we can shorten up our code.</p> <p>Let's take this atom feed for example:</p> <pre><code>[atom.xml]\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;feed xmlns=\"http://www.w3.org/2005/Atom\"&gt;\n\n  &lt;title&gt;Example Feed&lt;/title&gt;\n  &lt;link href=\"http://example.org/\"/&gt;\n  &lt;updated&gt;2003-12-13T18:30:02Z&lt;/updated&gt;\n  &lt;author&gt;\n    &lt;name&gt;John Doe&lt;/name&gt;\n  &lt;/author&gt;\n  &lt;id&gt;urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6&lt;/id&gt;\n\n  &lt;entry&gt;\n    &lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;\n    &lt;link href=\"http://example.org/2003/12/13/atom03\"/&gt;\n    &lt;id&gt;urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a&lt;/id&gt;\n    &lt;updated&gt;2003-12-13T18:30:02Z&lt;/updated&gt;\n    &lt;summary&gt;Some text.&lt;/summary&gt;\n  &lt;/entry&gt;\n\n&lt;/feed&gt;\n</code></pre> <p>If we stick to the convention, we can grab all title tags like this</p> <pre><code>@doc.xpath('//xmlns:title') # =&gt; [\"&lt;title&gt;Example Feed&lt;/title&gt;\", \"&lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;\"]\n</code></pre> <p>Don't be fooled though.  You do not have to use XPath to get the benefits of namespaces.  CSS selectors can be used as well.  CSS just uses the pipe symbol to indicate a namespace search.</p> <p>Let's see the previous search rewritten to use CSS:</p> <pre><code>@doc.css('xmlns|title') # =&gt; [\"&lt;title&gt;Example Feed&lt;/title&gt;\", \"&lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;\"]\n</code></pre> <p>When using CSS, if the namespace is called \"xmlns\", you can even omit the namespace name.  That means your CSS will reduce to:</p> <pre><code>@doc.css('title') # =&gt; [\"&lt;title&gt;Example Feed&lt;/title&gt;\", \"&lt;title&gt;Atom-Powered Robots Run Amok&lt;/title&gt;\"]\n</code></pre> <p>Dealing with namespaces is a broad topic.  If you need more examples, be sure to check out this blog post or send an email to the mailing list, and we can help out.</p>"},{"location":"tutorials/searching_a_xml_html_document.html#but-im-lazy-and-dont-want-to-deal-with-namespaces","title":"But I'm Lazy and Don't Want to Deal With Namespaces!","text":"<p>Lazy == Efficient, so no judgements. :)</p> <p>If you have an XML document with namespaces, but would prefer to ignore them entirely (and query as if Tim Bray had never invented them), then you can call remove_namespaces! on an XML::Document to remove all namespaces. Of course, if the document had nodes with the same names but different namespaces, they will now be ambiguous. But you're lazy! You don't care!</p>"},{"location":"tutorials/searching_a_xml_html_document.html#slop","title":"Slop <sup>1</sup>","text":"<p>Maybe you want a more interactive (read: sloppy) way to access nodes and attributes. If you like what XmlSimple does, then you'll probably like Nokogiri's Slop mode.<sup>2</sup></p> <p>Slop mode allows you to violate the Law of Demeter with extreme prejudice, by using <code>#method_missing</code> to introspect on a node's child tags.<sup>3</sup></p> <pre><code>doc = Nokogiri::Slop &lt;&lt;-EOXML\n&lt;employees&gt;\n  &lt;employee status=\"active\"&gt;\n    &lt;fullname&gt;Dean Martin&lt;/fullname&gt;\n  &lt;/employee&gt;\n  &lt;employee status=\"inactive\"&gt;\n    &lt;fullname&gt;Jerry Lewis&lt;/fullname&gt;\n  &lt;/employee&gt;\n&lt;/employees&gt;\nEOXML\n\n# navigate!\ndoc.employees.employee.last.fullname.content # =&gt; \"Jerry Lewis\"\n\n# access node attributes!\ndoc.employees.employee.first[\"status\"] # =&gt; \"active\"\n\n# use some xpath!\ndoc.employees.employee(\"[@status='active']\").fullname.content # =&gt; \"Dean Martin\"\ndoc.employees.employee(:xpath =&gt; \"@status='active'\").fullname.content # =&gt; \"Dean Martin\"\n\n# use some css!\ndoc.employees.employee(\"[status='active']\").fullname.content # =&gt; \"Dean Martin\"\ndoc.employees.employee(:css =&gt; \"[status='active']\").fullname.content # =&gt; \"Dean Martin\"\n</code></pre> <p>Aww yeah. Can you feel the spirit of @jbarnette and @nakajima flowing through you? That's the power of the slop.<sup>4</sup></p> <ol> <li> <p>Don't use this.\u00a0\u21a9</p> </li> <li> <p>This may or may not be a backhanded compliment.\u00a0\u21a9</p> </li> <li> <p>No, really, don't use this. If you use it, don't report bugs.\u00a0\u21a9</p> </li> <li> <p>You've been warned!\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorials/security.html","title":"Security and Vulnerability Reporting","text":"<p>The Nokogiri Core Contributors take security very seriously and investigate all reported vulnerabilities.</p> <p>If you would like to report a vulnerability or have a security concern regarding Nokogiri or how Nokogiri is using any of its underlying platform-specific libraries (such as libxml2 or xerces), please report it via HackerOne.</p> <p>Your report will be acknowledged within 24 hours, and you'll receive a more detailed response within 72 hours indicating next steps in handling your report.</p> <p>If you have not received a reply to your submission within 48 hours, there are a few steps you can take:</p> <ul> <li>Contact the current security coordinator (Mike Dalessio mike.dalessio@gmail.com)</li> <li>Contact the core contributor mailing list (nokogiri-core@googlegroups.com)</li> <li>Join the nokogiri-talk group</li> </ul> <p>Please note, the nokogiri-talk list is a public area. When escalating in that venue, please do not discuss your issue. Simply say that you're trying to get a hold of someone from the core team.</p> <p>The information you share with the Nokogiri Core Contributors as part of this process will be kept confidential within the team, unless or until we need to share information upstream with our dependent libraries' core teams, at which point we will notify you.</p> <p>If a vulnerability is first reported by you, we will credit you with the discovery in the public disclosure.</p>"},{"location":"tutorials/toc.html","title":"Nokogiri Tutorials","text":"<ul> <li>Parsing an HTML/XML document</li> <li>Parsing an HTML5 document</li> <li>Searching a XML/HTML document</li> <li>Modifying an HTML/XML document</li> <li>Ensuring well-formed markup</li> </ul>"}]}