var search_data = {"index":{"searchIndex":["nokogiri","css","syntaxerror","tokenizer","scanerror","xpathvisitor","builtinsconfig","doctypeconfig","classresolver","decorators","slop","encodinghandler","gumbo","html","html4","builder","document","documentfragment","elementdescription","encodingreader","encodingfound","jumpsaxhandler","saxhandler","entitydescription","entitylookup","sax","parser","parsercontext","pushparser","html5","document","documentfragment","node","quirksmode","builder","document","documentfragment","syntaxerror","xml","attr","attributedecl","builder","cdata","characterdata","comment","dtd","document","documentfragment","element","elementcontent","elementdecl","entitydecl","entityreference","namespace","node","saveoptions","nodeset","notation","pp","characterdata","node","parseoptions","processinginstruction","reader","relaxng","sax","document","parser","attribute","parsercontext","pushparser","schema","searchable","syntaxerror","text","xpath","syntaxerror","xpathcontext","xslt","stylesheet","object","xsd","xmlparser","nokogiri","%()","%()","%()","&()","+()","-()","/()","/()","/()","<<()","<<()","<<()","<<()","<<()","<<()","<=>()","==()","==()","==()",">()",">()",">()","html()","html4()","html5()","nokogiri()","reader()","relaxng()","schema()","slop()","xml()","xslt()","[]()","[]()","[]()","[]()","[]()","[]=()","accept()","add_child()","add_child()","add_class()","add_class()","add_namespace()","add_namespace_definition()","add_next_sibling()","add_previous_sibling()","after()","after()","alias()","ancestors()","append_class()","append_class()","apply_to()","at()","at()","at()","at_css()","at_css()","at_css()","at_xpath()","at_xpath()","at_xpath()","attr()","attr()","attribute()","attribute()","attribute()","attribute_at()","attribute_count()","attribute_hash()","attribute_nodes()","attribute_type()","attribute_with_ns()","attributes()","attributes()","attributes()","attributes?()","base_uri()","before()","before()","blank?()","block?()","canonicalize()","canonicalize()","cdata()","cdata?()","cdata_block()","cdata_block()","characters()","child()","children()","children()","children()","children()","children=()","classes()","clear_aliases!()","clone()","clone()","clone()","coerce()","collect_namespaces()","column()","comment()","comment()","comment?()","config()","content()","content()","content()","content=()","content=()","content=()","create_cdata()","create_comment()","create_element()","create_entity()","create_external_subset()","create_internal_subset()","create_text_node()","css()","css()","css()","css()","css_path()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","decorate()","decorate!()","decorators()","default()","default?()","default_namespace=()","default_sub_element()","delete()","delete()","delete()","deprecated?()","deprecated_attributes()","depth()","description()","description()","do_parse()","do_xinclude()","document()","document()","document?()","dup()","dup()","dup()","dup()","each()","each()","each()","each()","elem?()","element?()","element_children()","element_type()","elements()","elements()","empty?()","empty_element?()","encode_special_chars()","encoding()","encoding()","encoding=()","end_document()","end_element()","end_element()","end_element_namespace()","end_element_namespace()","entities()","entity_type()","enumeration()","error()","error()","error?()","errors()","evaluate()","external_id()","external_id()","external_subset()","fatal?()","file()","filter()","finish()","finish()","first()","first_element_child()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment?()","from_document()","from_document()","from_io()","from_memory()","get_attribute()","has_attribute?()","href()","html5_dtd?()","html?()","html_dtd?()","implied_end_tag?()","implied_start_tag?()","include?()","index()","inner_html()","inner_html()","inner_html()","inner_html=()","inner_text()","inner_text()","inner_xml()","inspect()","inspect()","inspect()","inspect()","inspect_attributes()","install_default_aliases()","internal_subset()","io()","key?()","keys()","keys()","kwattr_add()","kwattr_append()","kwattr_remove()","kwattr_values()","lang()","lang()","lang=()","last()","last_element_child()","length()","line()","line()","line=()","local_name()","make()","matches?()","memory()","meta_encoding()","meta_encoding=()","method_missing()","name()","name()","name()","name()","name()","name()","name()","name=()","namespace()","namespace=()","namespace_definitions()","namespace_scopes()","namespace_uri()","namespaced_key?()","namespaces()","namespaces()","namespaces()","native_content=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","next=()","next_element()","next_sibling()","node_name()","node_name=()","node_type()","node_type()","none?()","notations()","occur()","optional_attributes()","options()","options=()","original_content()","outer_xml()","parent()","parent=()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_file()","parse_file()","parse_io()","parse_io()","parse_memory()","parse_memory()","parse_stylesheet_doc()","parse_with()","path()","pointer_id()","pop()","prefix()","prefix()","prefix()","prefix()","prepend_child()","previous()","previous=()","previous_element()","previous_sibling()","processing_instruction()","processing_instruction?()","push()","quote_params()","read()","read_io()","read_io()","read_memory()","read_memory()","read_memory()","read_memory()","read_only?()","recovery()","recovery=()","register()","register_namespaces()","register_ns()","register_variable()","related_class()","related_class()","related_class()","remove()","remove()","remove_attr()","remove_attribute()","remove_attribute()","remove_class()","remove_class()","remove_namespaces!()","replace()","replace_entities()","replace_entities()","replace_entities=()","replace_entities=()","required_attributes()","respond_to_missing?()","reverse()","root()","root=()","save_end_tag?()","search()","search()","search()","search()","self_closing?()","serialize()","serialize()","serialize()","serialize()","set()","set_attribute()","shift()","size()","slice()","slop!()","start_document()","start_element()","start_element()","start_element_namespace()","start_element_namespace()","state()","strict()","strict?()","swap()","system_id()","system_id()","text()","text()","text()","text?()","title()","title=()","to_a()","to_ary()","to_html()","to_html()","to_html()","to_html()","to_java()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_xhtml()","to_xhtml()","to_xhtml()","to_xml()","to_xml()","to_xml()","to_xml()","transform()","traverse()","type()","type()","unlink()","unlink()","url()","valid?()","validate()","validate()","validate()","value()","value=()","value?()","value?()","values()","version()","warning()","warning()","warning?()","with()","wrap()","wrap()","wrap()","write()","write()","write_html_to()","write_to()","write_to()","write_xhtml_to()","write_xml_to()","xml?()","xml_version()","xmldecl()","xpath()","xpath()","xpath()","xpath_doctype()","xpath_doctype()","xpath_doctype()","xpath_for()","|()","readme"],"longSearchIndex":["nokogiri","nokogiri::css","nokogiri::css::syntaxerror","nokogiri::css::tokenizer","nokogiri::css::tokenizer::scanerror","nokogiri::css::xpathvisitor","nokogiri::css::xpathvisitor::builtinsconfig","nokogiri::css::xpathvisitor::doctypeconfig","nokogiri::classresolver","nokogiri::decorators","nokogiri::decorators::slop","nokogiri::encodinghandler","nokogiri::gumbo","nokogiri::html","nokogiri::html4","nokogiri::html4::builder","nokogiri::html4::document","nokogiri::html4::documentfragment","nokogiri::html4::elementdescription","nokogiri::html4::encodingreader","nokogiri::html4::encodingreader::encodingfound","nokogiri::html4::encodingreader::jumpsaxhandler","nokogiri::html4::encodingreader::saxhandler","nokogiri::html4::entitydescription","nokogiri::html4::entitylookup","nokogiri::html4::sax","nokogiri::html4::sax::parser","nokogiri::html4::sax::parsercontext","nokogiri::html4::sax::pushparser","nokogiri::html5","nokogiri::html5::document","nokogiri::html5::documentfragment","nokogiri::html5::node","nokogiri::html5::quirksmode","nokogiri::html::builder","nokogiri::html::document","nokogiri::html::documentfragment","nokogiri::syntaxerror","nokogiri::xml","nokogiri::xml::attr","nokogiri::xml::attributedecl","nokogiri::xml::builder","nokogiri::xml::cdata","nokogiri::xml::characterdata","nokogiri::xml::comment","nokogiri::xml::dtd","nokogiri::xml::document","nokogiri::xml::documentfragment","nokogiri::xml::element","nokogiri::xml::elementcontent","nokogiri::xml::elementdecl","nokogiri::xml::entitydecl","nokogiri::xml::entityreference","nokogiri::xml::namespace","nokogiri::xml::node","nokogiri::xml::node::saveoptions","nokogiri::xml::nodeset","nokogiri::xml::notation","nokogiri::xml::pp","nokogiri::xml::pp::characterdata","nokogiri::xml::pp::node","nokogiri::xml::parseoptions","nokogiri::xml::processinginstruction","nokogiri::xml::reader","nokogiri::xml::relaxng","nokogiri::xml::sax","nokogiri::xml::sax::document","nokogiri::xml::sax::parser","nokogiri::xml::sax::parser::attribute","nokogiri::xml::sax::parsercontext","nokogiri::xml::sax::pushparser","nokogiri::xml::schema","nokogiri::xml::searchable","nokogiri::xml::syntaxerror","nokogiri::xml::text","nokogiri::xml::xpath","nokogiri::xml::xpath::syntaxerror","nokogiri::xml::xpathcontext","nokogiri::xslt","nokogiri::xslt::stylesheet","object","xsd","xsd::xmlparser","xsd::xmlparser::nokogiri","nokogiri::xml::node#%()","nokogiri::xml::nodeset#%()","nokogiri::xml::searchable#%()","nokogiri::xml::nodeset#&()","nokogiri::xml::nodeset#+()","nokogiri::xml::nodeset#-()","nokogiri::xml::node#/()","nokogiri::xml::nodeset#/()","nokogiri::xml::searchable#/()","nokogiri::html4::sax::pushparser#<<()","nokogiri::xml::builder#<<()","nokogiri::xml::document#<<()","nokogiri::xml::node#<<()","nokogiri::xml::nodeset#<<()","nokogiri::xml::sax::pushparser#<<()","nokogiri::xml::node#<=>()","nokogiri::xml::node#==()","nokogiri::xml::nodeset#==()","nokogiri::xml::parseoptions#==()","nokogiri::xml::node#>()","nokogiri::xml::nodeset#>()","nokogiri::xml::searchable#>()","nokogiri::html()","nokogiri::html4()","nokogiri::html5()","object#nokogiri()","nokogiri::xml::reader()","nokogiri::xml::relaxng()","nokogiri::xml::schema()","nokogiri::slop()","nokogiri::xml()","nokogiri::xslt()","nokogiri::encodinghandler::[]()","nokogiri::html4::entitylookup#[]()","nokogiri::xml::builder#[]()","nokogiri::xml::node#[]()","nokogiri::xml::nodeset#[]()","nokogiri::xml::node#[]=()","nokogiri::xml::node#accept()","nokogiri::xml::document#add_child()","nokogiri::xml::node#add_child()","nokogiri::xml::node#add_class()","nokogiri::xml::nodeset#add_class()","nokogiri::xml::node#add_namespace()","nokogiri::xml::node#add_namespace_definition()","nokogiri::xml::node#add_next_sibling()","nokogiri::xml::node#add_previous_sibling()","nokogiri::xml::node#after()","nokogiri::xml::nodeset#after()","nokogiri::encodinghandler::alias()","nokogiri::xml::node#ancestors()","nokogiri::xml::node#append_class()","nokogiri::xml::nodeset#append_class()","nokogiri::xslt::stylesheet#apply_to()","nokogiri::xml::node#at()","nokogiri::xml::nodeset#at()","nokogiri::xml::searchable#at()","nokogiri::xml::node#at_css()","nokogiri::xml::nodeset#at_css()","nokogiri::xml::searchable#at_css()","nokogiri::xml::node#at_xpath()","nokogiri::xml::nodeset#at_xpath()","nokogiri::xml::searchable#at_xpath()","nokogiri::xml::node#attr()","nokogiri::xml::nodeset#attr()","nokogiri::xml::node#attribute()","nokogiri::xml::nodeset#attribute()","nokogiri::xml::reader#attribute()","nokogiri::xml::reader#attribute_at()","nokogiri::xml::reader#attribute_count()","nokogiri::xml::reader#attribute_hash()","nokogiri::xml::node#attribute_nodes()","nokogiri::xml::attributedecl#attribute_type()","nokogiri::xml::node#attribute_with_ns()","nokogiri::xml::dtd#attributes()","nokogiri::xml::node#attributes()","nokogiri::xml::reader#attributes()","nokogiri::xml::reader#attributes?()","nokogiri::xml::reader#base_uri()","nokogiri::xml::node#before()","nokogiri::xml::nodeset#before()","nokogiri::xml::node#blank?()","nokogiri::html4::elementdescription#block?()","nokogiri::xml::document#canonicalize()","nokogiri::xml::node#canonicalize()","nokogiri::xml::builder#cdata()","nokogiri::xml::node#cdata?()","nokogiri::xml::sax::document#cdata_block()","xsd::xmlparser::nokogiri#cdata_block()","nokogiri::xml::sax::document#characters()","nokogiri::xml::node#child()","nokogiri::xml::elementcontent#children()","nokogiri::xml::entityreference#children()","nokogiri::xml::node#children()","nokogiri::xml::nodeset#children()","nokogiri::xml::node#children=()","nokogiri::xml::node#classes()","nokogiri::encodinghandler::clear_aliases!()","nokogiri::xml::document#clone()","nokogiri::xml::node#clone()","nokogiri::xml::nodeset#clone()","nokogiri::xml::node#coerce()","nokogiri::xml::document#collect_namespaces()","nokogiri::xml::sax::parsercontext#column()","nokogiri::xml::builder#comment()","nokogiri::xml::sax::document#comment()","nokogiri::xml::node#comment?()","nokogiri::css::xpathvisitor#config()","nokogiri::xml::elementdecl#content()","nokogiri::xml::entitydecl#content()","nokogiri::xml::node#content()","nokogiri::xml::attr#content=()","nokogiri::xml::node#content=()","nokogiri::xml::text#content=()","nokogiri::xml::document#create_cdata()","nokogiri::xml::document#create_comment()","nokogiri::xml::document#create_element()","nokogiri::xml::document#create_entity()","nokogiri::xml::node#create_external_subset()","nokogiri::xml::node#create_internal_subset()","nokogiri::xml::document#create_text_node()","nokogiri::xml::documentfragment#css()","nokogiri::xml::node#css()","nokogiri::xml::nodeset#css()","nokogiri::xml::searchable#css()","nokogiri::xml::node#css_path()","nokogiri::xml::documentfragment#deconstruct()","nokogiri::xml::nodeset#deconstruct()","nokogiri::xml::attr#deconstruct_keys()","nokogiri::xml::document#deconstruct_keys()","nokogiri::xml::namespace#deconstruct_keys()","nokogiri::xml::node#deconstruct_keys()","nokogiri::xml::document#decorate()","nokogiri::xml::node#decorate!()","nokogiri::xml::document#decorators()","nokogiri::xml::attributedecl#default()","nokogiri::xml::reader#default?()","nokogiri::xml::node#default_namespace=()","nokogiri::html4::elementdescription#default_sub_element()","nokogiri::encodinghandler::delete()","nokogiri::xml::node#delete()","nokogiri::xml::nodeset#delete()","nokogiri::html4::elementdescription#deprecated?()","nokogiri::html4::elementdescription#deprecated_attributes()","nokogiri::xml::reader#depth()","nokogiri::html4::elementdescription#description()","nokogiri::xml::node#description()","xsd::xmlparser::nokogiri#do_parse()","nokogiri::xml::node#do_xinclude()","nokogiri::xml::document#document()","nokogiri::xml::node#document()","nokogiri::xml::node#document?()","nokogiri::xml::document#dup()","nokogiri::xml::documentfragment#dup()","nokogiri::xml::node#dup()","nokogiri::xml::nodeset#dup()","nokogiri::xml::dtd#each()","nokogiri::xml::node#each()","nokogiri::xml::nodeset#each()","nokogiri::xml::reader#each()","nokogiri::xml::node#elem?()","nokogiri::xml::node#element?()","nokogiri::xml::node#element_children()","nokogiri::xml::elementdecl#element_type()","nokogiri::xml::dtd#elements()","nokogiri::xml::node#elements()","nokogiri::xml::nodeset#empty?()","nokogiri::xml::reader#empty_element?()","nokogiri::xml::node#encode_special_chars()","nokogiri::xml::document#encoding()","nokogiri::xml::reader#encoding()","nokogiri::xml::document#encoding=()","nokogiri::xml::sax::document#end_document()","nokogiri::xml::sax::document#end_element()","xsd::xmlparser::nokogiri#end_element()","nokogiri::xml::sax::document#end_element_namespace()","xsd::xmlparser::nokogiri#end_element_namespace()","nokogiri::xml::dtd#entities()","nokogiri::xml::entitydecl#entity_type()","nokogiri::xml::attributedecl#enumeration()","nokogiri::xml::sax::document#error()","xsd::xmlparser::nokogiri#error()","nokogiri::xml::syntaxerror#error?()","nokogiri::xml::documentfragment#errors()","nokogiri::xml::xpathcontext#evaluate()","nokogiri::xml::dtd#external_id()","nokogiri::xml::entitydecl#external_id()","nokogiri::xml::node#external_subset()","nokogiri::xml::syntaxerror#fatal?()","nokogiri::xml::sax::parsercontext::file()","nokogiri::xml::nodeset#filter()","nokogiri::html4::sax::pushparser#finish()","nokogiri::xml::sax::pushparser#finish()","nokogiri::xml::nodeset#first()","nokogiri::xml::node#first_element_child()","nokogiri::html4::fragment()","nokogiri::html4::fragment()","nokogiri::html4::document#fragment()","nokogiri::html5::fragment()","nokogiri::html5::document#fragment()","nokogiri::html5::node#fragment()","nokogiri::xml::fragment()","nokogiri::xml::document#fragment()","nokogiri::xml::documentfragment#fragment()","nokogiri::xml::node#fragment()","nokogiri::xml::node#fragment?()","nokogiri::xml::relaxng::from_document()","nokogiri::xml::schema::from_document()","nokogiri::xml::reader::from_io()","nokogiri::xml::reader::from_memory()","nokogiri::xml::node#get_attribute()","nokogiri::xml::node#has_attribute?()","nokogiri::xml::namespace#href()","nokogiri::xml::dtd#html5_dtd?()","nokogiri::xml::node#html?()","nokogiri::xml::dtd#html_dtd?()","nokogiri::html4::elementdescription#implied_end_tag?()","nokogiri::html4::elementdescription#implied_start_tag?()","nokogiri::xml::nodeset#include?()","nokogiri::xml::nodeset#index()","nokogiri::html5::node#inner_html()","nokogiri::xml::node#inner_html()","nokogiri::xml::nodeset#inner_html()","nokogiri::xml::node#inner_html=()","nokogiri::xml::node#inner_text()","nokogiri::xml::nodeset#inner_text()","nokogiri::xml::reader#inner_xml()","nokogiri::html4::elementdescription#inspect()","nokogiri::xml::node::saveoptions#inspect()","nokogiri::xml::nodeset#inspect()","nokogiri::xml::parseoptions#inspect()","nokogiri::xml::entityreference#inspect_attributes()","nokogiri::encodinghandler::install_default_aliases()","nokogiri::xml::node#internal_subset()","nokogiri::xml::sax::parsercontext::io()","nokogiri::xml::node#key?()","nokogiri::xml::dtd#keys()","nokogiri::xml::node#keys()","nokogiri::xml::node#kwattr_add()","nokogiri::xml::node#kwattr_append()","nokogiri::xml::node#kwattr_remove()","nokogiri::xml::node#kwattr_values()","nokogiri::xml::node#lang()","nokogiri::xml::reader#lang()","nokogiri::xml::node#lang=()","nokogiri::xml::nodeset#last()","nokogiri::xml::node#last_element_child()","nokogiri::xml::nodeset#length()","nokogiri::xml::node#line()","nokogiri::xml::sax::parsercontext#line()","nokogiri::xml::node#line=()","nokogiri::xml::reader#local_name()","nokogiri::make()","nokogiri::xml::node#matches?()","nokogiri::xml::sax::parsercontext::memory()","nokogiri::html4::document#meta_encoding()","nokogiri::html4::document#meta_encoding=()","nokogiri::decorators::slop#method_missing()","nokogiri::encodinghandler#name()","nokogiri::xml::cdata#name()","nokogiri::xml::document#name()","nokogiri::xml::documentfragment#name()","nokogiri::xml::elementcontent#name()","nokogiri::xml::node#name()","nokogiri::xml::reader#name()","nokogiri::xml::node#name=()","nokogiri::xml::node#namespace()","nokogiri::xml::node#namespace=()","nokogiri::xml::node#namespace_definitions()","nokogiri::xml::node#namespace_scopes()","nokogiri::xml::reader#namespace_uri()","nokogiri::xml::node#namespaced_key?()","nokogiri::xml::document#namespaces()","nokogiri::xml::node#namespaces()","nokogiri::xml::reader#namespaces()","nokogiri::xml::node#native_content=()","nokogiri::css::xpathvisitor::new()","nokogiri::html4::documentfragment::new()","nokogiri::html4::sax::parsercontext::new()","nokogiri::html4::sax::pushparser::new()","nokogiri::html5::documentfragment::new()","nokogiri::xml::attr::new()","nokogiri::xml::builder::new()","nokogiri::xml::cdata::new()","nokogiri::xml::comment::new()","nokogiri::xml::document::new()","nokogiri::xml::documentfragment::new()","nokogiri::xml::documentfragment::new()","nokogiri::xml::entitydecl::new()","nokogiri::xml::entityreference::new()","nokogiri::xml::node::new()","nokogiri::xml::node::saveoptions::new()","nokogiri::xml::nodeset::new()","nokogiri::xml::parseoptions::new()","nokogiri::xml::processinginstruction::new()","nokogiri::xml::processinginstruction::new()","nokogiri::xml::sax::parser::new()","nokogiri::xml::sax::parsercontext::new()","nokogiri::xml::sax::pushparser::new()","nokogiri::xml::schema::new()","nokogiri::xml::text::new()","nokogiri::xml::xpathcontext::new()","xsd::xmlparser::nokogiri::new()","nokogiri::xml::node#next()","nokogiri::xml::node#next=()","nokogiri::xml::node#next_element()","nokogiri::xml::node#next_sibling()","nokogiri::xml::node#node_name()","nokogiri::xml::node#node_name=()","nokogiri::xml::node#node_type()","nokogiri::xml::reader#node_type()","nokogiri::xml::syntaxerror#none?()","nokogiri::xml::dtd#notations()","nokogiri::xml::elementcontent#occur()","nokogiri::html4::elementdescription#optional_attributes()","nokogiri::xml::sax::pushparser#options()","nokogiri::xml::sax::pushparser#options=()","nokogiri::xml::entitydecl#original_content()","nokogiri::xml::reader#outer_xml()","nokogiri::xml::node#parent()","nokogiri::xml::node#parent=()","nokogiri::parse()","nokogiri::html4::parse()","nokogiri::html4::parse()","nokogiri::html4::document::parse()","nokogiri::html4::documentfragment::parse()","nokogiri::html5::parse()","nokogiri::html5::document::parse()","nokogiri::html5::documentfragment::parse()","nokogiri::xml::parse()","nokogiri::xml::document::parse()","nokogiri::xml::documentfragment::parse()","nokogiri::xml::node#parse()","nokogiri::xml::sax::parser#parse()","nokogiri::xslt::parse()","nokogiri::html4::sax::parser#parse_file()","nokogiri::xml::sax::parser#parse_file()","nokogiri::html4::sax::parser#parse_io()","nokogiri::xml::sax::parser#parse_io()","nokogiri::html4::sax::parser#parse_memory()","nokogiri::xml::sax::parser#parse_memory()","nokogiri::xslt::stylesheet::parse_stylesheet_doc()","nokogiri::xml::sax::parsercontext#parse_with()","nokogiri::xml::node#path()","nokogiri::xml::node#pointer_id()","nokogiri::xml::nodeset#pop()","nokogiri::xml::elementcontent#prefix()","nokogiri::xml::elementdecl#prefix()","nokogiri::xml::namespace#prefix()","nokogiri::xml::reader#prefix()","nokogiri::xml::node#prepend_child()","nokogiri::xml::node#previous()","nokogiri::xml::node#previous=()","nokogiri::xml::node#previous_element()","nokogiri::xml::node#previous_sibling()","nokogiri::xml::sax::document#processing_instruction()","nokogiri::xml::node#processing_instruction?()","nokogiri::xml::nodeset#push()","nokogiri::xslt::quote_params()","nokogiri::xml::reader#read()","nokogiri::html5::document::read_io()","nokogiri::xml::document::read_io()","nokogiri::html5::document::read_memory()","nokogiri::xml::document::read_memory()","nokogiri::xml::relaxng::read_memory()","nokogiri::xml::schema::read_memory()","nokogiri::xml::node#read_only?()","nokogiri::xml::sax::parsercontext#recovery()","nokogiri::xml::sax::parsercontext#recovery=()","nokogiri::xslt::register()","nokogiri::xml::xpathcontext#register_namespaces()","nokogiri::xml::xpathcontext#register_ns()","nokogiri::xml::xpathcontext#register_variable()","nokogiri::classresolver#related_class()","nokogiri::xml::builder#related_class()","nokogiri::xml::node#related_class()","nokogiri::xml::node#remove()","nokogiri::xml::nodeset#remove()","nokogiri::xml::nodeset#remove_attr()","nokogiri::xml::node#remove_attribute()","nokogiri::xml::nodeset#remove_attribute()","nokogiri::xml::node#remove_class()","nokogiri::xml::nodeset#remove_class()","nokogiri::xml::document#remove_namespaces!()","nokogiri::xml::node#replace()","nokogiri::xml::sax::parsercontext#replace_entities()","nokogiri::xml::sax::pushparser#replace_entities()","nokogiri::xml::sax::parsercontext#replace_entities=()","nokogiri::xml::sax::pushparser#replace_entities=()","nokogiri::html4::elementdescription#required_attributes()","nokogiri::decorators::slop#respond_to_missing?()","nokogiri::xml::nodeset#reverse()","nokogiri::xml::document#root()","nokogiri::xml::document#root=()","nokogiri::html4::elementdescription#save_end_tag?()","nokogiri::xml::documentfragment#search()","nokogiri::xml::node#search()","nokogiri::xml::nodeset#search()","nokogiri::xml::searchable#search()","nokogiri::xml::reader#self_closing?()","nokogiri::html4::document#serialize()","nokogiri::xml::documentfragment#serialize()","nokogiri::xml::node#serialize()","nokogiri::xslt::stylesheet#serialize()","nokogiri::xml::nodeset#set()","nokogiri::xml::node#set_attribute()","nokogiri::xml::nodeset#shift()","nokogiri::xml::nodeset#size()","nokogiri::xml::nodeset#slice()","nokogiri::xml::document#slop!()","nokogiri::xml::sax::document#start_document()","nokogiri::xml::sax::document#start_element()","xsd::xmlparser::nokogiri#start_element()","nokogiri::xml::sax::document#start_element_namespace()","xsd::xmlparser::nokogiri#start_element_namespace()","nokogiri::xml::reader#state()","nokogiri::xml::parseoptions#strict()","nokogiri::xml::parseoptions#strict?()","nokogiri::xml::node#swap()","nokogiri::xml::dtd#system_id()","nokogiri::xml::entitydecl#system_id()","nokogiri::xml::builder#text()","nokogiri::xml::node#text()","nokogiri::xml::nodeset#text()","nokogiri::xml::node#text?()","nokogiri::html4::document#title()","nokogiri::html4::document#title=()","nokogiri::xml::nodeset#to_a()","nokogiri::xml::nodeset#to_ary()","nokogiri::html4::builder#to_html()","nokogiri::xml::documentfragment#to_html()","nokogiri::xml::node#to_html()","nokogiri::xml::nodeset#to_html()","nokogiri::xml::document#to_java()","nokogiri::html4::elementdescription#to_s()","nokogiri::xml::documentfragment#to_s()","nokogiri::xml::node#to_s()","nokogiri::xml::nodeset#to_s()","nokogiri::xml::syntaxerror#to_s()","nokogiri::xml::xpath::syntaxerror#to_s()","nokogiri::xml::node#to_str()","nokogiri::xml::documentfragment#to_xhtml()","nokogiri::xml::node#to_xhtml()","nokogiri::xml::nodeset#to_xhtml()","nokogiri::xml::builder#to_xml()","nokogiri::xml::documentfragment#to_xml()","nokogiri::xml::node#to_xml()","nokogiri::xml::nodeset#to_xml()","nokogiri::xslt::stylesheet#transform()","nokogiri::xml::node#traverse()","nokogiri::xml::elementcontent#type()","nokogiri::xml::node#type()","nokogiri::xml::node#unlink()","nokogiri::xml::nodeset#unlink()","nokogiri::xml::document#url()","nokogiri::xml::schema#valid?()","nokogiri::xml::dtd#validate()","nokogiri::xml::document#validate()","nokogiri::xml::schema#validate()","nokogiri::xml::reader#value()","nokogiri::xml::attr#value=()","nokogiri::xml::node#value?()","nokogiri::xml::reader#value?()","nokogiri::xml::node#values()","nokogiri::xml::document#version()","nokogiri::xml::sax::document#warning()","xsd::xmlparser::nokogiri#warning()","nokogiri::xml::syntaxerror#warning?()","nokogiri::xml::builder::with()","nokogiri::xml::document::wrap()","nokogiri::xml::node#wrap()","nokogiri::xml::nodeset#wrap()","nokogiri::html4::sax::pushparser#write()","nokogiri::xml::sax::pushparser#write()","nokogiri::xml::node#write_html_to()","nokogiri::html5::node#write_to()","nokogiri::xml::node#write_to()","nokogiri::xml::node#write_xhtml_to()","nokogiri::xml::node#write_xml_to()","nokogiri::xml::node#xml?()","nokogiri::xml::reader#xml_version()","nokogiri::xml::sax::document#xmldecl()","nokogiri::xml::node#xpath()","nokogiri::xml::nodeset#xpath()","nokogiri::xml::searchable#xpath()","nokogiri::html4::document#xpath_doctype()","nokogiri::html5::document#xpath_doctype()","nokogiri::xml::document#xpath_doctype()","nokogiri::css::xpath_for()","nokogiri::xml::nodeset#|()",""],"info":[["Nokogiri","","Nokogiri.html","","<p>Nokogiri parses and searches XML/HTML very quickly, and also has correctly implemented CSS3 selector …\n"],["Nokogiri::CSS","","Nokogiri/CSS.html","","<p>Translate a CSS selector into an XPath 1.0 query\n"],["Nokogiri::CSS::SyntaxError","","Nokogiri/CSS/SyntaxError.html","",""],["Nokogiri::CSS::Tokenizer","","Nokogiri/CSS/Tokenizer.html","",""],["Nokogiri::CSS::Tokenizer::ScanError","","Nokogiri/CSS/Tokenizer/ScanError.html","",""],["Nokogiri::CSS::XPathVisitor","","Nokogiri/CSS/XPathVisitor.html","","<p>When translating CSS selectors to XPath queries with Nokogiri::CSS.xpath_for, the XPathVisitor class …\n"],["Nokogiri::CSS::XPathVisitor::BuiltinsConfig","","Nokogiri/CSS/XPathVisitor/BuiltinsConfig.html","","<p>Enum to direct XPathVisitor when to use Nokogiri builtin XPath functions.\n"],["Nokogiri::CSS::XPathVisitor::DoctypeConfig","","Nokogiri/CSS/XPathVisitor/DoctypeConfig.html","","<p>Enum to direct XPathVisitor when to tweak the XPath query to suit the nature of the document being searched. …\n"],["Nokogiri::ClassResolver","","Nokogiri/ClassResolver.html","","<p>Some classes in Nokogiri are namespaced as a group, for example Document, DocumentFragment, and Builder …\n"],["Nokogiri::Decorators","","Nokogiri/Decorators.html","",""],["Nokogiri::Decorators::Slop","","Nokogiri/Decorators/Slop.html","","<p>The Slop decorator implements method missing such that a methods may be used instead of XPath or CSS …\n"],["Nokogiri::EncodingHandler","","Nokogiri/EncodingHandler.html","",""],["Nokogiri::Gumbo","","Nokogiri/Gumbo.html","",""],["Nokogiri::HTML","","Nokogiri/HTML4.html","","<p>💡 This module/namespace is an alias for Nokogiri::HTML4 as of v1.12.0. Before v1.12.0,\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Nokogiri::HTML4","","Nokogiri/HTML4.html","","<p>💡 This module/namespace is an alias for Nokogiri::HTML4 as of v1.12.0. Before v1.12.0,\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Nokogiri::HTML4::Builder","","Nokogiri/HTML4/Builder.html","","<p>Nokogiri HTML builder is used for building HTML documents.  It is very similar to the Nokogiri::XML::Builder …\n"],["Nokogiri::HTML4::Document","","Nokogiri/HTML4/Document.html","",""],["Nokogiri::HTML4::DocumentFragment","","Nokogiri/HTML4/DocumentFragment.html","",""],["Nokogiri::HTML4::ElementDescription","","Nokogiri/HTML4/ElementDescription.html","",""],["Nokogiri::HTML4::EncodingReader","","Nokogiri/HTML4/EncodingReader.html","",""],["Nokogiri::HTML4::EncodingReader::EncodingFound","","Nokogiri/HTML4/EncodingReader/EncodingFound.html","",""],["Nokogiri::HTML4::EncodingReader::JumpSAXHandler","","Nokogiri/HTML4/EncodingReader/JumpSAXHandler.html","",""],["Nokogiri::HTML4::EncodingReader::SAXHandler","","Nokogiri/HTML4/EncodingReader/SAXHandler.html","",""],["Nokogiri::HTML4::EntityDescription","","Nokogiri/HTML4/EntityDescription.html","",""],["Nokogiri::HTML4::EntityLookup","","Nokogiri/HTML4/EntityLookup.html","",""],["Nokogiri::HTML4::SAX","","Nokogiri/HTML4/SAX.html","","<p>Nokogiri lets you write a SAX parser to process HTML but get HTML correction features.\n<p>See Nokogiri::HTML4::SAX::Parser …\n"],["Nokogiri::HTML4::SAX::Parser","","Nokogiri/HTML4/SAX/Parser.html","","<p>💡 This class is an alias for Nokogiri::HTML4::SAX::Parser as of v1.12.0.\n<p>This class lets you perform  …\n"],["Nokogiri::HTML4::SAX::ParserContext","","Nokogiri/HTML4/SAX/ParserContext.html","","<p>💡 This class is an alias for Nokogiri::HTML4::SAX::ParserContext as of v1.12.0.\n<p>Context for HTML SAX parsers. …\n"],["Nokogiri::HTML4::SAX::PushParser","","Nokogiri/HTML4/SAX/PushParser.html","","<p>💡 This class is an alias for Nokogiri::HTML4::SAX::PushParser as of v1.12.0.\n"],["Nokogiri::HTML5","","Nokogiri/HTML5.html","","<p>Usage\n<p>⚠ HTML5 functionality is not available when running JRuby.\n<p>Parse an HTML5 document:\n"],["Nokogiri::HTML5::Document","","Nokogiri/HTML5/Document.html","","<p>Since v1.12.0\n<p>💡 HTML5 functionality is not available when running JRuby.\n"],["Nokogiri::HTML5::DocumentFragment","","Nokogiri/HTML5/DocumentFragment.html","","<p>Since v1.12.0\n<p>💡 HTML5 functionality is not available when running JRuby.\n"],["Nokogiri::HTML5::Node","","Nokogiri/HTML5/Node.html","","<p>Since v1.12.0\n<p>💡 HTML5 functionality is not available when running JRuby.\n"],["Nokogiri::HTML5::QuirksMode","","Nokogiri/HTML5/QuirksMode.html","","<p>Enum for the HTML5 parser quirks mode values. Values returned by HTML5::Document#quirks_mode\n<p>See dom.spec.whatwg.org/#concept-document-quirks …\n"],["Nokogiri::HTML::Builder","","Nokogiri/HTML/Builder.html","","<p>💡 This class is an alias for Nokogiri::HTML4::Builder as of v1.12.0.\n"],["Nokogiri::HTML::Document","","Nokogiri/HTML/Document.html","","<p>💡 This class is an alias for Nokogiri::HTML4::Document as of v1.12.0.\n"],["Nokogiri::HTML::DocumentFragment","","Nokogiri/HTML/DocumentFragment.html","","<p>💡 This class is an alias for Nokogiri::HTML4::DocumentFragment as of v1.12.0.\n"],["Nokogiri::SyntaxError","","Nokogiri/SyntaxError.html","",""],["Nokogiri::XML","","Nokogiri/XML.html","",""],["Nokogiri::XML::Attr","","Nokogiri/XML/Attr.html","","<p>Attr represents a Attr node in an xml document.\n"],["Nokogiri::XML::AttributeDecl","","Nokogiri/XML/AttributeDecl.html","","<p>Represents an attribute declaration in a DTD\n"],["Nokogiri::XML::Builder","","Nokogiri/XML/Builder.html","","<p>Nokogiri builder can be used for building XML and HTML documents.\n<p>Synopsis:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Nokogiri::XML::CDATA","","Nokogiri/XML/CDATA.html","","<p>CData represents a CData node in an xml document.\n"],["Nokogiri::XML::CharacterData","","Nokogiri/XML/CharacterData.html","",""],["Nokogiri::XML::Comment","","Nokogiri/XML/Comment.html","","<p>Comment represents a comment node in an xml document.\n"],["Nokogiri::XML::DTD","","Nokogiri/XML/DTD.html","","<p>Nokogiri::XML::DTD wraps DTD nodes in an XML document\n"],["Nokogiri::XML::Document","","Nokogiri/XML/Document.html","","<p>Nokogiri::XML::Document wraps an xml document.\n<p>Nokogiri::XML::Document is the main entry point for dealing …\n"],["Nokogiri::XML::DocumentFragment","","Nokogiri/XML/DocumentFragment.html","","<p>DocumentFragment represents a DocumentFragment node in an xml document.\n"],["Nokogiri::XML::Element","","Nokogiri/XML/Element.html","",""],["Nokogiri::XML::ElementContent","","Nokogiri/XML/ElementContent.html","","<p>Represents the allowed content in an Element Declaration inside a DTD:\n\n<pre>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;?TEST-STYLE ...</pre>\n"],["Nokogiri::XML::ElementDecl","","Nokogiri/XML/ElementDecl.html","",""],["Nokogiri::XML::EntityDecl","","Nokogiri/XML/EntityDecl.html","",""],["Nokogiri::XML::EntityReference","","Nokogiri/XML/EntityReference.html","","<p>EntityReference represents an EntityReference node in an xml document.\n"],["Nokogiri::XML::Namespace","","Nokogiri/XML/Namespace.html","",""],["Nokogiri::XML::Node","","Nokogiri/XML/Node.html","","<p>Nokogiri::XML::Node is the primary API you’ll use to interact with your Document.\n<p>Attributes\n<p>A Nokogiri::XML::Node …\n"],["Nokogiri::XML::Node::SaveOptions","","Nokogiri/XML/Node/SaveOptions.html","","<p>Save options for serializing nodes. See the method group entitled Node@Serialization+and+Generating+Output …\n"],["Nokogiri::XML::NodeSet","","Nokogiri/XML/NodeSet.html","","<p>A NodeSet contains a list of Nokogiri::XML::Node objects.  Typically a NodeSet is return as a result …\n"],["Nokogiri::XML::Notation","","Nokogiri/XML/Notation.html","","<p>Struct representing an XML Schema Notation\n"],["Nokogiri::XML::PP","","Nokogiri/XML/PP.html","",""],["Nokogiri::XML::PP::CharacterData","","Nokogiri/XML/PP/CharacterData.html","",""],["Nokogiri::XML::PP::Node","","Nokogiri/XML/PP/Node.html","",""],["Nokogiri::XML::ParseOptions","","Nokogiri/XML/ParseOptions.html","","<p>Options that control the parsing behavior for XML::Document, XML::DocumentFragment, HTML4::Document, …\n"],["Nokogiri::XML::ProcessingInstruction","","Nokogiri/XML/ProcessingInstruction.html","","<p>ProcessingInstruction represents a ProcessingInstruction node in an xml document.\n"],["Nokogiri::XML::Reader","","Nokogiri/XML/Reader.html","","<p>The Reader parser allows you to effectively pull parse an XML document. Once instantiated, call Nokogiri::XML::Reader#each …\n"],["Nokogiri::XML::RelaxNG","","Nokogiri/XML/RelaxNG.html","","<p>Nokogiri::XML::RelaxNG is used for validating XML against a RelaxNG schema.\n<p>Synopsis\n<p>Validate an XML document …\n"],["Nokogiri::XML::SAX","","Nokogiri/XML/SAX.html","","<p>SAX Parsers are event driven parsers. Nokogiri provides two different event based parsers when dealing …\n"],["Nokogiri::XML::SAX::Document","","Nokogiri/XML/SAX/Document.html","","<p>This class is used for registering types of events you are interested in handling. All of the methods …\n"],["Nokogiri::XML::SAX::Parser","","Nokogiri/XML/SAX/Parser.html","","<p>This parser is a SAX style parser that reads it’s input as it deems necessary.  The parser takes …\n"],["Nokogiri::XML::SAX::Parser::Attribute","","Nokogiri/XML/SAX/Parser/Attribute.html","",""],["Nokogiri::XML::SAX::ParserContext","","Nokogiri/XML/SAX/ParserContext.html","","<p>Context for XML SAX parsers.  This class is usually not instantiated by the user.  Instead, you should …\n"],["Nokogiri::XML::SAX::PushParser","","Nokogiri/XML/SAX/PushParser.html","","<p>PushParser can parse a document that is fed to it manually.  It must be given a SAX::Document object …\n"],["Nokogiri::XML::Schema","","Nokogiri/XML/Schema.html","","<p>Nokogiri::XML::Schema is used for validating XML against a schema (usually from an xsd file).\n<p>Synopsis …\n"],["Nokogiri::XML::Searchable","","Nokogiri/XML/Searchable.html","","<p>The Searchable module declares the interface used for searching your DOM.\n<p>It implements the public methods …\n"],["Nokogiri::XML::SyntaxError","","Nokogiri/XML/SyntaxError.html","","<p>The XML::SyntaxError is raised on parse errors\n<p>This class provides information about XML SyntaxErrors …\n"],["Nokogiri::XML::Text","","Nokogiri/XML/Text.html","","<p>Wraps Text nodes.\n"],["Nokogiri::XML::XPath","","Nokogiri/XML/XPath.html","",""],["Nokogiri::XML::XPath::SyntaxError","","Nokogiri/XML/XPath/SyntaxError.html","",""],["Nokogiri::XML::XPathContext","","Nokogiri/XML/XPathContext.html","","<p>XPathContext is the entry point for searching a <code>Document</code> by using XPath.\n"],["Nokogiri::XSLT","","Nokogiri/XSLT.html","","<p>See Nokogiri::XSLT::Stylesheet for creating and manipulating Stylesheet object.\n"],["Nokogiri::XSLT::Stylesheet","","Nokogiri/XSLT/Stylesheet.html","","<p>A Stylesheet represents an XSLT Stylesheet object.  Stylesheet creation is done through Nokogiri.XSLT …\n"],["Object","","Object.html","",""],["XSD","","XSD.html","",""],["XSD::XMLParser","","XSD/XMLParser.html","",""],["XSD::XMLParser::Nokogiri","","XSD/XMLParser/Nokogiri.html","","<p>Nokogiri XML parser for soap4r.\n<p>Nokogiri may be used as the XML parser in soap4r.  Simply require ‘xsd/xmlparser/nokogiri’ …\n"],["%","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-25","(*args)",""],["%","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-25","(*args)",""],["%","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-25","(*args)",""],["&","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-26","(p1)","<p>Set Intersection — Returns a new NodeSet containing nodes common to the two NodeSets.\n"],["+","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2B","(p1)",""],["-","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2D","(p1)","<p>Difference - returns a new NodeSet that is a copy of this NodeSet, removing each item that also appears …\n"],["/","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-2F","(*args)",""],["/","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2F","(*args)",""],["/","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-2F","(*args)",""],["<<","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-i-3C-3C","(chunk, last_chunk = false)",""],["<<","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-3C-3C","(string)","<p>Append the given raw XML <code>string</code> to the document\n"],["<<","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-3C-3C","(node_or_tags)",""],["<<","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3C-3C","(node_or_tags)","<p>Add <code>node_or_tags</code> as a child of this Node.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["<<","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3C-3C","(p1)",""],["<<","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-3C-3C","(chunk, last_chunk = false)",""],["<=>","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3C-3D-3E","(other)","<p>Compare two Node objects with respect to their Document.  Nodes from different documents cannot be compared. …\n"],["==","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3D-3D","(other)","<p>Test to see if this Node is equal to <code>other</code>\n"],["==","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3D-3D","(other)","<p>Equality – Two NodeSets are equal if the contain the same number of elements and if each element is …\n"],["==","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-3D-3D","(other)",""],[">","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3E","(selector)","<p>Search this node’s immediate children using CSS selector <code>selector</code>\n"],[">","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3E","(selector)","<p>Search this node’s immediate children using CSS selector <code>selector</code>\n"],[">","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-3E","(selector)","<p>Search this node’s immediate children using CSS selector <code>selector</code>\n"],["HTML","Nokogiri","Nokogiri.html#method-c-HTML","","<p>Parse HTML. Convenience method for Nokogiri::HTML4::Document.parse\n"],["HTML4","Nokogiri","Nokogiri.html#method-c-HTML4","(input, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Parse HTML. Convenience method for Nokogiri::HTML4::Document.parse\n"],["HTML5","Nokogiri","Nokogiri.html#method-c-HTML5","(input, url = nil, encoding = nil, **options, &block)","<p>Since v1.12.0\n<p>⚠ HTML5 functionality is not available when running JRuby.\n<p>Parse an HTML5 document. Convenience …\n"],["Nokogiri","Object","Object.html#method-i-Nokogiri","(*args, &block)","<p>Parse a document contained in <code>args</code>.  Nokogiri will try to guess what type of document you are attempting …\n"],["Reader","Nokogiri::XML","Nokogiri/XML.html#method-c-Reader","(string_or_io, url = nil, encoding = nil, options = ParseOptions::STRICT)","<p>Parse an XML document using the Nokogiri::XML::Reader API.  See Nokogiri::XML::Reader for mor information …\n"],["RelaxNG","Nokogiri::XML","Nokogiri/XML.html#method-c-RelaxNG","(string_or_io, options = ParseOptions::DEFAULT_SCHEMA)","<p>Create a new Nokogiri::XML::RelaxNG document from <code>string_or_io</code>. See Nokogiri::XML::RelaxNG for an example. …\n"],["Schema","Nokogiri::XML","Nokogiri/XML.html#method-c-Schema","(string_or_io, options = ParseOptions::DEFAULT_SCHEMA)","<p>Create a new Nokogiri::XML::Schema object using a <code>string_or_io</code> object.\n"],["Slop","Nokogiri","Nokogiri.html#method-c-Slop","(*args, &block)","<p>Parse a document and add the Slop decorator.  The Slop decorator implements method_missing such that …\n"],["XML","Nokogiri","Nokogiri.html#method-c-XML","(thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_XML, &block)","<p>Parse XML.  Convenience method for Nokogiri::XML::Document.parse\n"],["XSLT","Nokogiri","Nokogiri.html#method-c-XSLT","(stylesheet, modules = {})","<p>Create a Nokogiri::XSLT::Stylesheet with <code>stylesheet</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">xslt</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XSLT</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-constant\">ARGV</span>[<span class=\"ruby-value\">0</span>]))\n</pre>\n"],["[]","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-5B-5D","(p1)","<p>Get the encoding handler for <code>name</code>\n"],["[]","Nokogiri::HTML4::EntityLookup","Nokogiri/HTML4/EntityLookup.html#method-i-5B-5D","(name)","<p>Look up entity with <code>name</code>\n"],["[]","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-5B-5D","(ns)","<p>Build a tag that is associated with namespace <code>ns</code>.  Raises an ArgumentError if <code>ns</code> has not been defined …\n"],["[]","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-5B-5D","(name)","<p>Fetch an attribute from this node.\n<p>⚠ Note that attributes with namespaces cannot be accessed with this …\n"],["[]","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-5B-5D","(p1, p2 = v2)","<p>Element reference - returns the node at <code>index</code>, or returns a NodeSet containing nodes starting at <code>start</code> …\n"],["[]=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-5B-5D-3D","(name, value)","<p>Update the attribute <code>name</code> to <code>value</code>, or create the attribute if it does not exist.\n<p>⚠ Note that attributes …\n"],["accept","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-accept","(visitor)","<p>Accept a visitor.  This method calls “visit” on <code>visitor</code> with self.\n"],["add_child","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-add_child","(node_or_tags)",""],["add_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_child","(node_or_tags)","<p>Add <code>node_or_tags</code> as a child of this Node.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["add_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_class","(names)","<p>Ensure HTML CSS classes are present on <code>self</code>. Any CSS classes in <code>names</code> that already exist in the “class” …\n"],["add_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-add_class","(name)","<p>Add the class attribute <code>name</code> to all Node objects in the NodeSet.\n<p>See Nokogiri::XML::Node#add_class for …\n"],["add_namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_namespace","(p1, p2)",""],["add_namespace_definition","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_namespace_definition","(p1, p2)","<p>Adds a namespace definition to this node with <code>prefix</code> using <code>href</code> value, as if this node had included an …\n"],["add_next_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_next_sibling","(node_or_tags)","<p>Insert <code>node_or_tags</code> after this Node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["add_previous_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_previous_sibling","(node_or_tags)","<p>Insert <code>node_or_tags</code> before this Node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["after","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-after","(node_or_tags)","<p>Insert <code>node_or_tags</code> after this node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment …\n"],["after","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-after","(datum)","<p>Insert <code>datum</code> after the last Node in this NodeSet\n"],["alias","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-alias","(p1, p2)","<p>Alias encoding handler with name <code>real_name</code> to name <code>alias_name</code>\n"],["ancestors","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-ancestors","(selector = nil)","<p>Get a list of ancestor Node for this Node.  If <code>selector</code> is given, the ancestors must match <code>selector</code>\n"],["append_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-append_class","(names)","<p>Add HTML CSS classes to <code>self</code>, regardless of duplication. Compare with #add_class.\n<p>This is a convenience …\n"],["append_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-append_class","(name)","<p>Append the class attribute <code>name</code> to all Node objects in the NodeSet.\n<p>See Nokogiri::XML::Node#append_class …\n"],["apply_to","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-apply_to","(document, params = [])","<p>Apply an XSLT stylesheet to an XML::Document and serialize it properly. This method is equivalent to …\n"],["at","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-at","(*args)","<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more XPath or CSS …\n"],["at","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at","(*args)","<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more XPath or CSS …\n"],["at","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-at","(*args)","<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more XPath or CSS …\n"],["at_css","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-at_css","(*args)","<p>Search this object for CSS <code>rules</code>, and return only the first match. <code>rules</code> must be one or more CSS selectors. …\n"],["at_css","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at_css","(*args)","<p>Search this object for CSS <code>rules</code>, and return only the first match. <code>rules</code> must be one or more CSS selectors. …\n"],["at_css","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-at_css","(*args)","<p>Search this object for CSS <code>rules</code>, and return only the first match. <code>rules</code> must be one or more CSS selectors. …\n"],["at_xpath","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-at_xpath","(*args)","<p>Search this node for XPath <code>paths</code>, and return only the first match. <code>paths</code> must be one or more XPath queries. …\n"],["at_xpath","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at_xpath","(*args)","<p>Search this node for XPath <code>paths</code>, and return only the first match. <code>paths</code> must be one or more XPath queries. …\n"],["at_xpath","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-at_xpath","(*args)","<p>Search this node for XPath <code>paths</code>, and return only the first match. <code>paths</code> must be one or more XPath queries. …\n"],["attr","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attr","(name)",""],["attr","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-attr","(key, value = nil, &block)","<p>Set attributes on each Node in the NodeSet, or get an attribute from the first Node in the NodeSet.\n<p>To …\n"],["attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute","(p1)","<p>Returns &mdash; Attribute (Nokogiri::XML::Attr) belonging to this node with name <code>name</code>.\n\n<p>⚠ Note that attribute namespaces …\n"],["attribute","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-attribute","(key, value = nil, &block)",""],["attribute","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute","(p1)","<p>Get the value of attribute named <code>name</code>\n"],["attribute_at","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_at","(p1)","<p>Get the value of attribute at <code>index</code>\n"],["attribute_count","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_count","()","<p>Get the number of attributes for the current node\n"],["attribute_hash","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_hash","()","<p>Get the attributes of the current node as a Hash of names and values.\n<p>See related: #attributes and #namespaces …\n"],["attribute_nodes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute_nodes","()","<p>Returns &mdash; Attributes (an Array of Nokogiri::XML::Attr) belonging to this node.\n\n<p>Note that this is the preferred …\n"],["attribute_type","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-attribute_type","()","<p>The attribute_type for this AttributeDecl\n"],["attribute_with_ns","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute_with_ns","(p1, p2)","<p>Returns &mdash; Attribute (Nokogiri::XML::Attr) belonging to this node with matching <code>name</code> and <code>namespace</code>.\n\n<p><code>name</code> …\n"],["attributes","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-attributes","()","<p>Get a hash of the attributes for this DTD.\n"],["attributes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attributes","()","<p>Fetch this node’s attributes.\n<p>⚠ Because the keys do not include any namespace information for the …\n"],["attributes","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attributes","()","<p>Get the attributes and namespaces of the current node as a Hash.\n<p>This is the union of Reader#attribute_hash …\n"],["attributes?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attributes-3F","()","<p>Does this node have attributes?\n"],["base_uri","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-base_uri","()","<p>Get the xml:base of the node\n"],["before","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-before","(node_or_tags)","<p>Insert <code>node_or_tags</code> before this node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["before","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-before","(datum)","<p>Insert <code>datum</code> before the first Node in this NodeSet\n"],["blank?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-blank-3F","()","<p>Returns &mdash; <code>true</code> if the node is an empty or whitespace-only text or cdata node, else <code>false</code>.\n\n<p><strong>Example:</strong>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span>(<span class=\"ruby-string\">&quot;&lt;root&gt;&lt;child/&gt;&lt;/root&gt;&quot;</span>).<span class=\"ruby-identifier\">root</span>.<span class=\"ruby-identifier\">child</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["block?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-block-3F","()","<p>Is this element a block element?\n"],["canonicalize","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-canonicalize","(p1 = v1, p2 = v2, p3 = v3)","<p>Canonicalize a document and return the results.  Takes an optional block that takes two parameters: the …\n"],["canonicalize","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-canonicalize","(mode = XML::XML_C14N_1_0, inclusive_namespaces = nil, with_comments = false)",""],["cdata","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-cdata","(string)","<p>Create a CDATA Node with content of <code>string</code>\n"],["cdata?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-cdata-3F","()","<p>Returns true if this is a CDATA\n"],["cdata_block","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-cdata_block","(string)","<p>Called when cdata blocks are found <code>string</code> contains the cdata content\n"],["cdata_block","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-cdata_block","(string)","<p>Handle cdata_blocks containing <code>string</code>\n"],["characters","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-characters","(string)","<p>Characters read between a tag. This method might be called multiple times given one contiguous string …\n"],["child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-child","()","<p>Returns &mdash; First of this node’s children, or <code>nil</code> if there are no children\n\n<p>This is a convenience method …\n"],["children","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-children","()","<p>Get the children of this ElementContent node\n"],["children","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-i-children","()",""],["children","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-children","()","<p>Returns &mdash; Nokogiri::XML::NodeSet containing this node’s children.\n\n"],["children","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-children","()","<p>Returns a new NodeSet containing all the children of all the nodes in the NodeSet\n"],["children=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-children-3D","(node_or_tags)","<p>Set the content for this Node <code>node_or_tags</code>\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment …\n"],["classes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-classes","()","<p>Fetch CSS class names of a Node.\n<p>This is a convenience function and is equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">kwattr_values</span>(<span class=\"ruby-string\">&quot;class&quot;</span>)\n</pre>\n"],["clear_aliases!","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-clear_aliases-21","()","<p>Remove all encoding aliases.\n"],["clone","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-clone","(p1 = v1)",""],["clone","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-clone","(p1 = v1, p2 = v2)",""],["clone","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-clone","()",""],["coerce","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-coerce","(data)",""],["collect_namespaces","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-collect_namespaces","()","<p>Recursively get all namespaces from this node and its subtree and return them as a hash.\n<p>⚠ This method …\n"],["column","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-column","()","<p>Get the current column the parser context is processing.\n"],["comment","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-comment","(string)","<p>Create a Comment Node with content of <code>string</code>\n"],["comment","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-comment","(string)","<p>Called when comments are encountered <code>string</code> contains the comment data\n"],["comment?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-comment-3F","()","<p>Returns true if this is a Comment\n"],["config","Nokogiri::CSS::XPathVisitor","Nokogiri/CSS/XPathVisitor.html#method-i-config","()","<p>Returns &mdash; a Hash representing the configuration of the XPathVisitor, suitable for use as part of the CSS …\n\n"],["content","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-content","()","<p>Returns &mdash; The root of this element declaration’s content tree.\n\n"],["content","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-content","()","<p>Get the content\n"],["content","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-content","()","<p>Returns &mdash; Contents of all the text nodes in this node’s subtree, concatenated together into a single …\n\n"],["content=","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-content-3D","(p1)",""],["content=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-content-3D","(string)","<p>Set the Node’s content to a Text node containing <code>string</code>. The string gets XML escaped, not interpreted …\n"],["content=","Nokogiri::XML::Text","Nokogiri/XML/Text.html#method-i-content-3D","(string)",""],["create_cdata","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_cdata","(string, &block)","<p>Create a CDATA Node containing <code>string</code>\n"],["create_comment","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_comment","(string, &block)","<p>Create a Comment Node containing <code>string</code>\n"],["create_element","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_element","(name, *contents_or_attrs, &block)","<p>Create a new Element with ‘name` belonging to this document, optionally setting contents or attributes. …\n"],["create_entity","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_entity","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)","<p>Create a new entity named <code>name</code>.\n<p><code>type</code> is an integer representing the type of entity to be created, and …\n"],["create_external_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-create_external_subset","(p1, p2, p3)","<p>Create an external subset\n"],["create_internal_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-create_internal_subset","(p1, p2, p3)","<p>Create the internal subset of a document.\n\n<pre>doc.create_internal_subset(&quot;chapter&quot;, &quot;-//OASIS//DTD DocBook ...</pre>\n"],["create_text_node","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_text_node","(string, &block)","<p>Create a Text Node with <code>string</code>\n"],["css","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-css","(*args)","<p>Search this fragment for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n<p>For more information …\n"],["css","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-css","(*args)","<p>Search this object for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">css</span>(<span class=\"ruby-string\">&#39;title&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["css","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-css","(*args)","<p>Search this node set for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n<p>For more information …\n"],["css","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-css","(*args)","<p>Search this object for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">css</span>(<span class=\"ruby-string\">&#39;title&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["css_path","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-css_path","()","<p>Get the path to this node as a CSS expression\n"],["deconstruct","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-deconstruct","()","<p>Returns the root nodes of this document fragment as an array, to use in pattern matching.\n<p>💡 Note that …\n"],["deconstruct","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-deconstruct","()","<p>Returns the members of this NodeSet as an array, to use in pattern matching.\n<p>Since v1.14.0\n"],["deconstruct_keys","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Attr, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>name</code> → (String …\n"],["deconstruct_keys","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Document, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>root</code> → …\n"],["deconstruct_keys","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Namespace, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>prefix</code> …\n"],["deconstruct_keys","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Node, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>name</code> → (String …\n"],["decorate","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-decorate","(node)","<p>Apply any decorators to <code>node</code>\n"],["decorate!","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-decorate-21","()","<p>Decorate this node with the decorators set up in this node’s Document\n"],["decorators","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-decorators","(key)","<p>Get the list of decorators given <code>key</code>\n"],["default","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-default","()","<p>The default value\n"],["default?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-default-3F","()","<p>Was an attribute generated from the default value in the DTD or schema?\n"],["default_namespace=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-default_namespace-3D","(url)","<p>Adds a default namespace supplied as a string <code>url</code> href, to self. The consequence is as an xmlns attribute …\n"],["default_sub_element","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-default_sub_element","()",""],["delete","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-delete","(p1)","<p>Delete the encoding alias named <code>name</code>\n"],["delete","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-delete","(name)",""],["delete","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-delete","(p1)","<p>Delete <code>node</code> from the Nodeset, if it is a member. Returns the deleted node if found, otherwise returns …\n"],["deprecated?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-deprecated-3F","()",""],["deprecated_attributes","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-deprecated_attributes","()",""],["depth","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-depth","()","<p>Get the depth of the node\n"],["description","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-description","()",""],["description","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-description","()","<p>Fetch the Nokogiri::HTML4::ElementDescription for this node.  Returns nil on XML documents and on unknown …\n"],["do_parse","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-do_parse","(string_or_readable)","<p>Start parsing <code>string_or_readable</code>\n"],["do_xinclude","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-do_xinclude","(options = XML::ParseOptions::DEFAULT_XML)","<p>Do xinclude substitution on the subtree below node. If given a block, a Nokogiri::XML::ParseOptions object …\n"],["document","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-document","()","<p>A reference to <code>self</code>\n"],["document","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-document","()","<p>Returns &mdash; Parent Nokogiri::XML::Document for this node\n\n"],["document?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-document-3F","()","<p>Returns true if this is a Document\n"],["dup","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-dup","(p1 = v1)","<p>Copy this Document.  An optional depth may be passed in, but it defaults to a deep copy.  0 is a shallow …\n"],["dup","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-dup","()",""],["dup","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-dup","(p1 = v1, p2 = v2)","<p>Copy this node.\n<p>Parameters &mdash; \n<p><code>depth</code> 0 is a shallow copy, 1 (the default) is a deep copy.\n<p><code>new_parent_doc</code> The …\n"],["dup","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-dup","()","<p>Duplicate this NodeSet. Note that the Nodes contained in the NodeSet are not duplicated (similar to how …\n"],["each","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-each","()",""],["each","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-each","()","<p>Iterate over each attribute name and value pair for this Node.\n"],["each","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-each","()","<p>Iterate over each node, yielding  to <code>block</code>\n"],["each","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-each","()","<p>Move the cursor through the document yielding the cursor to the block\n"],["elem?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-elem-3F","()",""],["element?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-element-3F","()","<p>Returns true if this is an Element node\n"],["element_children","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-element_children","()","<p>Returns &mdash; The node’s child elements as a NodeSet. Only children that are elements will be returned, …\n\n"],["element_type","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-element_type","()","<p>The element_type\n"],["elements","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-elements","()","<p>Get a hash of the elements for this DTD.\n"],["elements","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-elements","()",""],["empty?","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-empty-3F","()","<p>Is this NodeSet empty?\n"],["empty_element?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-empty_element-3F","()","<p>Returns true if the current node is empty, otherwise false.\n"],["encode_special_chars","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-encode_special_chars","(p1)","<p>Encode any special characters in <code>string</code>\n"],["encoding","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-encoding","()","<p>Get the encoding for this Document\n"],["encoding","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-encoding","()",""],["encoding=","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-encoding-3D","(p1)","<p>Set the encoding string for this Document\n"],["end_document","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_document","()","<p>Called when document ends parsing\n"],["end_element","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_element","(name)","<p>Called at the end of an element <code>name</code> is the tag name\n"],["end_element","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-end_element","(name)","<p>Handle the end_element event with <code>name</code>\n"],["end_element_namespace","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_element_namespace","(name, prefix = nil, uri = nil)","<p>Called at the end of an element <code>name</code> is the element’s name <code>prefix</code> is the namespace prefix associated …\n"],["end_element_namespace","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-end_element_namespace","(name, prefix = nil, uri = nil)","<p>Called at the end of an element <code>name</code> is the element’s name <code>prefix</code> is the namespace prefix associated …\n"],["entities","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-entities","()","<p>Get a hash of the elements for this DTD.\n"],["entity_type","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-entity_type","()","<p>Get the entity type\n"],["enumeration","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-enumeration","()","<p>An enumeration of possible values\n"],["error","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-error","(string)","<p>Called on document errors <code>string</code> contains the error\n"],["error","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-error","(msg)","<p>Handle errors with message <code>msg</code>\n"],["error?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-error-3F","()","<p>return true if this is an error\n"],["errors","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-errors","()","<p>A list of Nokogiri::XML::SyntaxError found when parsing a document\n"],["evaluate","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-evaluate","(p1, p2 = v2)","<p>Evaluate the <code>search_path</code> query.\n<p>Returns &mdash; an object of the appropriate type for the query, which could be …\n\n"],["external_id","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-external_id","()","<p>Get the External ID for this DTD\n"],["external_id","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-external_id","()","<p>Get the external identifier for PUBLIC\n"],["external_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-external_subset","()","<p>Get the external subset\n"],["fatal?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-fatal-3F","()","<p>return true if this error is fatal\n"],["file","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-file","(p1)","<p>Parse file given <code>filename</code>\n"],["filter","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-filter","(expr)","<p>Filter this list for nodes that match <code>expr</code>\n"],["finish","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-i-finish","()","<p>Finish the parsing.  This method is only necessary for Nokogiri::HTML4::SAX::Document#end_document to …\n"],["finish","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-finish","()","<p>Finish the parsing.  This method is only necessary for Nokogiri::XML::SAX::Document#end_document to be …\n"],["first","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-first","(n = nil)","<p>Get the first element of the NodeSet.\n"],["first_element_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-first_element_child","()","<p>Returns &mdash; The first child Node that is an element.\n\n<p><strong>Example:</strong>\n<p>Note that the “hello” child, which …\n"],["fragment","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-fragment","(string, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Parse a fragment from <code>string</code> in to a NodeSet.\n"],["fragment","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-fragment","(string, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Parse a fragment from <code>string</code> in to a NodeSet.\n"],["fragment","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-fragment","(tags = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>\n"],["fragment","Nokogiri::HTML5","Nokogiri/HTML5.html#method-c-fragment","(string, encoding = nil, **options)","<p>Parse a fragment from <code>string</code>. Convenience method for {Nokogiri::HTML5::DocumentFragment.parse}.\n"],["fragment","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-i-fragment","(markup = nil)","<p>Parse a HTML5 document fragment from <code>markup</code>, returning a Nokogiri::HTML5::DocumentFragment.\n<p>Properties … &mdash; \n"],["fragment","Nokogiri::HTML5::Node","Nokogiri/HTML5/Node.html#method-i-fragment","(tags)",""],["fragment","Nokogiri::XML","Nokogiri/XML.html#method-c-fragment","(string, options = ParseOptions::DEFAULT_XML, &block)","<p>Parse a fragment from <code>string</code> in to a NodeSet.\n"],["fragment","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-fragment","(tags = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code> Returns an empty fragment if <code>tags</code> is nil.\n"],["fragment","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-fragment","(data)",""],["fragment","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-fragment","(tags)","<p>Create a DocumentFragment containing <code>tags</code> that is relative to <em>this</em> context node.\n"],["fragment?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-fragment-3F","()","<p>Returns true if this is a DocumentFragment\n"],["from_document","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-from_document","(p1, p2 = v2)","<p>Create a new RelaxNG schema from the Nokogiri::XML::Document <code>doc</code>\n"],["from_document","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-from_document","(p1, p2 = v2)","<p>Create a new schema parsed from the <code>document</code>.\n<p>Parameters &mdash; \n<p><code>document</code>: Nokogiri::XML::Document to be parsed …\n\n"],["from_io","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-from_io","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new reader that parses <code>io</code>\n"],["from_memory","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-from_memory","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new reader that parses <code>string</code>\n"],["get_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-get_attribute","(name)",""],["has_attribute?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-has_attribute-3F","(p1)",""],["href","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-href","()","<p>Returns the URI reference for this Namespace.\n<p><strong>Example</strong>\n\n<pre>doc = Nokogiri::XML.parse(&lt;&lt;~XML)\n  &lt;?xml version=&quot;1.0&quot;?&gt; ...</pre>\n"],["html5_dtd?","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-html5_dtd-3F","()",""],["html?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-html-3F","()","<p>Returns true if this is an HTML4::Document or HTML5::Document node\n"],["html_dtd?","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-html_dtd-3F","()",""],["implied_end_tag?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-implied_end_tag-3F","()",""],["implied_start_tag?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-implied_start_tag-3F","()",""],["include?","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-include-3F","(p1)","<p>Returns true if any member of node set equals <code>node</code>.\n"],["index","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-index","(node = nil)","<p>Returns the index of the first node in self that is == to <code>node</code> or meets the given block. Returns nil …\n"],["inner_html","Nokogiri::HTML5::Node","Nokogiri/HTML5/Node.html#method-i-inner_html","(options = {})",""],["inner_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_html","(*args)","<p>Get the inner_html for this node’s Node#children\n"],["inner_html","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inner_html","(*args)","<p>Get the inner html of all contained Node objects\n"],["inner_html=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_html-3D","(node_or_tags)","<p>Set the content for this Node to <code>node_or_tags</code>.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment …\n"],["inner_text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_text","()",""],["inner_text","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inner_text","()","<p>Get the inner text of all contained Node objects\n<p>Note: This joins the text of all Node objects in the …\n"],["inner_xml","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-inner_xml","()","<p>Read the contents of the current node, including child nodes and markup. Returns a utf-8 encoded string. …\n"],["inspect","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-inspect","()","<p>Inspection information\n"],["inspect","Nokogiri::XML::Node::SaveOptions","Nokogiri/XML/Node/SaveOptions.html#method-i-inspect","()",""],["inspect","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inspect","()","<p>Return a nicely formated string representation\n"],["inspect","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-inspect","()",""],["inspect_attributes","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-i-inspect_attributes","()",""],["install_default_aliases","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-install_default_aliases","()",""],["internal_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-internal_subset","()","<p>Get the internal subset\n"],["io","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-io","(p1, p2)","<p>Parse <code>io</code> object with <code>encoding</code>\n"],["key?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-key-3F","(p1)","<p>Returns true if <code>attribute</code> is set\n"],["keys","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-keys","()",""],["keys","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-keys","()","<p>Get the attribute names for this Node.\n"],["kwattr_add","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_add","(attribute_name, keywords)","<p>Ensure that values are present in a keyword attribute.\n<p>Any values in <code>keywords</code> that already exist in the …\n"],["kwattr_append","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_append","(attribute_name, keywords)","<p>Add keywords to a Node’s keyword attribute, regardless of duplication. Compare with #kwattr_add. …\n"],["kwattr_remove","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_remove","(attribute_name, keywords)","<p>Remove keywords from a keyword attribute. Any matching keywords that exist in the named attribute are …\n"],["kwattr_values","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_values","(attribute_name)","<p>Fetch values from a keyword attribute of a Node.\n<p>A “keyword attribute” is a node attribute that …\n"],["lang","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-lang","()","<p>Searches the language of a node, i.e. the values of the xml:lang attribute or the one carried by the …\n"],["lang","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-lang","()","<p>Get the xml:lang scope within which the node resides.\n"],["lang=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-lang-3D","(p1)","<p>Set the language of a node, i.e. the values of the xml:lang attribute.\n"],["last","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-last","()","<p>Get the last element of the NodeSet.\n"],["last_element_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-last_element_child","()","<p>Returns &mdash; The last child Node that is an element.\n\n<p><strong>Example:</strong>\n<p>Note that the “hello” child, which is …\n"],["length","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-length","()","<p>Get the length of the node set\n"],["line","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-line","()","<p>Returns &mdash; The line number of this Node.\n\n<p><strong> ⚠ The CRuby and JRuby implementations differ in important ways!</strong> …\n"],["line","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-line","()","<p>Get the current line the parser context is processing.\n"],["line=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-line-3D","(p1)","<p>Sets the line for this Node. num must be less than 65535.\n"],["local_name","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-local_name","()","<p>Get the local name of the node\n"],["make","Nokogiri","Nokogiri.html#method-c-make","(input = nil, opts = {}, &blk)","<p>Create a new Nokogiri::XML::DocumentFragment\n"],["matches?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-matches-3F","(selector)","<p>Returns true if this Node matches <code>selector</code>\n"],["memory","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-memory","(p1)","<p>Parse the XML stored in memory in <code>data</code>\n"],["meta_encoding","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-meta_encoding","()","<p>Get the meta tag encoding for this document.  If there is no meta tag, then nil is returned.\n"],["meta_encoding=","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-meta_encoding-3D","(encoding)","<p>Set the meta tag encoding for this document.\n<p>If an meta encoding tag is already present, its content is …\n"],["method_missing","Nokogiri::Decorators::Slop","Nokogiri/Decorators/Slop.html#method-i-method_missing","(name, *args, &block)","<p>look for node with <code>name</code>.  See Nokogiri.Slop\n"],["name","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-i-name","()","<p>Get the name of this EncodingHandler\n"],["name","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-i-name","()","<p>Get the name of this CDATA node\n"],["name","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-name","()","<p>The name of this document.  Always returns “document”\n"],["name","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-name","()","<p>return the name for DocumentFragment\n"],["name","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-name","()","<p>Returns &mdash; The content element’s <code>name</code>\n\n"],["name","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-name","()",""],["name","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-name","()","<p>Get the name of the node. Returns a utf-8 encoded string.\n"],["name=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-name-3D","(p1)",""],["namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace","()","<p>Returns &mdash; The Namespace of the element or attribute node, or <code>nil</code> if there is no namespace.\n\n<p><strong>Example:</strong>\n\n<pre>doc = ...</pre>\n"],["namespace=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace-3D","(ns)","<p>Set the default namespace on this node (as would be defined with an “xmlns=” attribute in  …\n"],["namespace_definitions","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace_definitions","()","<p>Returns &mdash; Namespaces that are defined directly on this node, as an Array of Namespace objects. The array …\n\n"],["namespace_scopes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace_scopes","()","<p>Returns &mdash; Array of all the Namespaces on this node and its ancestors.\n\n<p>See also #namespaces\n<p><strong>Example:</strong>\n"],["namespace_uri","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-namespace_uri","()","<p>Get the URI defining the namespace associated with the node\n"],["namespaced_key?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespaced_key-3F","(p1, p2)","<p>Returns true if <code>attribute</code> is set with <code>namespace</code>\n"],["namespaces","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-namespaces","()","<p>Get the hash of namespaces on the root Nokogiri::XML::Node\n"],["namespaces","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespaces","()","<p>Fetch all the namespaces on this node and its ancestors.\n<p>Note that the keys in this hash XML attributes …\n"],["namespaces","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-namespaces","()","<p>Get a hash of namespaces for this Node\n"],["native_content=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-native_content-3D","(p1)","<p>Set the content for this Node\n"],["new","Nokogiri::CSS::XPathVisitor","Nokogiri/CSS/XPathVisitor.html#method-c-new","(builtins: BuiltinsConfig::NEVER, doctype: DoctypeConfig::XML)","<p>Parameters &mdash; \n<p><code>builtins:</code> (BuiltinsConfig) Determine when to use Nokogiri’s built-in xpath functions for …\n"],["new","Nokogiri::HTML4::DocumentFragment","Nokogiri/HTML4/DocumentFragment.html#method-c-new","(document, tags = nil, ctx = nil, options = XML::ParseOptions::DEFAULT_HTML)",""],["new","Nokogiri::HTML4::SAX::ParserContext","Nokogiri/HTML4/SAX/ParserContext.html#method-c-new","(thing, encoding = \"UTF-8\")",""],["new","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-c-new","(doc = HTML4::SAX::Document.new, file_name = nil, encoding = \"UTF-8\")",""],["new","Nokogiri::HTML5::DocumentFragment","Nokogiri/HTML5/DocumentFragment.html#method-c-new","(doc, tags = nil, ctx = nil, options = {})","<p>Create a document fragment.\n"],["new","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-c-new","(p1, p2, *args)","<p>Create a new Attr element on the <code>document</code> with <code>name</code>\n"],["new","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-c-new","(options = {}, root = nil, &block)","<p>Create a new Builder object.  <code>options</code> are sent to the top level Document that is being built.\n<p>Building …\n"],["new","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-c-new","(p1, p2, *args)","<p>Create a new CDATA element on the <code>document</code> with <code>content</code>\n<p>If <code>content</code> cannot be implicitly converted to a …\n"],["new","Nokogiri::XML::Comment","Nokogiri/XML/Comment.html#method-c-new","(p1, p2, *args)","<p>Create a new Comment element on the <code>document</code> with <code>content</code>. Alternatively, if a <code>node</code> is passed, the <code>node</code> …\n"],["new","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-new","(*args)","<p>Create a new document with <code>version</code> (defaults to “1.0”)\n"],["new","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-new","(p1, *args)","<p>Create a new DocumentFragment element on the <code>document</code>\n"],["new","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-new","(document, tags = nil, ctx = nil, options = ParseOptions::DEFAULT_XML)","<p>Create a new DocumentFragment from <code>tags</code>.\n<p>If <code>ctx</code> is present, it is used as a context node for the subtree …\n"],["new","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-c-new","(name, doc, *args)",""],["new","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-c-new","(p1, p2, *args)","<p>Create a new EntityReference element on the <code>document</code> with <code>name</code>\n"],["new","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-c-new","(name, document)","<p>Create a new node with <code>name</code> that belongs to <code>document</code>.\n<p>If you intend to add a node to a document tree, …\n"],["new","Nokogiri::XML::Node::SaveOptions","Nokogiri/XML/Node/SaveOptions.html#method-c-new","(options = 0)","<p>Create a new SaveOptions object with <code>options</code>\n"],["new","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-c-new","(document, list = [])","<p>Create a NodeSet with <code>document</code> defaulting to <code>list</code>\n"],["new","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-c-new","(options = STRICT)",""],["new","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-c-new","(p1, p2, p3, *args)","<p>Create a new ProcessingInstruction element on the <code>document</code> with <code>name</code> and <code>content</code>\n"],["new","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-c-new","(document, name, content)",""],["new","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-c-new","(doc = Nokogiri::XML::SAX::Document.new, encoding = \"UTF-8\")","<p>Create a new Parser with <code>doc</code> and <code>encoding</code>\n"],["new","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-new","(thing, encoding = \"UTF-8\")",""],["new","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-c-new","(doc = XML::SAX::Document.new, file_name = nil, encoding = \"UTF-8\")","<p>Create a new PushParser with <code>doc</code> as the SAX Document, providing an optional <code>file_name</code> and <code>encoding</code>\n"],["new","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-new","(string_or_io, options = ParseOptions::DEFAULT_SCHEMA)","<p>Create a new Nokogiri::XML::Schema object using a <code>string_or_io</code> object.\n"],["new","Nokogiri::XML::Text","Nokogiri/XML/Text.html#method-c-new","(p1, p2, *args)","<p>Create a new Text element on the <code>document</code> with <code>content</code>\n"],["new","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-c-new","(p1)","<p>Create a new XPathContext with <code>node</code> as the context node.\n"],["new","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-c-new","(host, opt = {})","<p>Create a new XSD parser with <code>host</code> and <code>opt</code>\n"],["next","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next","()",""],["next=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next-3D","(node_or_tags)",""],["next_element","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next_element","()","<p>Returns the next Nokogiri::XML::Element type sibling node.\n"],["next_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next_sibling","()","<p>Returns the next sibling node\n"],["node_name","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_name","()","<p>Returns the name for this Node\n"],["node_name=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_name-3D","(p1)","<p>Set the name for this Node\n"],["node_type","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_type","()","<p>Get the type for this Node\n"],["node_type","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-node_type","()","<p>Get the type of readers current node\n"],["none?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-none-3F","()","<p>return true if this is a non error\n"],["notations","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-notations","()","<p>Returns &mdash; All the notations for this DTD in a Hash of Notation <code>name</code> to Notation.\n\n"],["occur","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-occur","()","<p>Returns &mdash; The content element’s <code>occur</code> flag. Possible values are <code>ONCE</code>, <code>OPT</code>, <code>MULT</code> or <code>PLUS</code>.\n\n"],["optional_attributes","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-optional_attributes","()",""],["options","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-options","()",""],["options=","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-options-3D","(p1)",""],["original_content","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-original_content","()","<p>Get the original_content before ref substitution\n"],["outer_xml","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-outer_xml","()","<p>Read the current node and its contents, including child nodes and markup. Returns a utf-8 encoded string. …\n"],["parent","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parent","()","<p>Get the parent Node for this Node\n"],["parent=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parent-3D","(parent_node)","<p>Set the parent Node for this Node\n"],["parse","Nokogiri","Nokogiri.html#method-c-parse","(string, url = nil, encoding = nil, options = nil)","<p>Parse an HTML or XML document.  <code>string</code> contains the document.\n"],["parse","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-parse","(input, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Parse HTML. Convenience method for Nokogiri::HTML4::Document.parse\n"],["parse","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-parse","(input, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Parse HTML. Convenience method for Nokogiri::HTML4::Document.parse\n"],["parse","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-c-parse","(string_or_io, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML)","<p>Parse HTML.  <code>string_or_io</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as an  …\n"],["parse","Nokogiri::HTML4::DocumentFragment","Nokogiri/HTML4/DocumentFragment.html#method-c-parse","(tags, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>, using <code>encoding</code>\n"],["parse","Nokogiri::HTML5","Nokogiri/HTML5.html#method-c-parse","(string, url = nil, encoding = nil, **options, &block)","<p>Parse an HTML 5 document. Convenience method for {Nokogiri::HTML5::Document.parse}\n"],["parse","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-c-parse","(string_or_io, url = nil, encoding = nil, **options, &block)","<p>Parse HTML5 input.\n<p>Parameters &mdash; \n<p><code>input</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such …\n"],["parse","Nokogiri::HTML5::DocumentFragment","Nokogiri/HTML5/DocumentFragment.html#method-c-parse","(tags, encoding = nil, options = {})","<p>Parse a document fragment from <code>tags</code>, returning a Nodeset.\n"],["parse","Nokogiri::XML","Nokogiri/XML.html#method-c-parse","(thing, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &block)","<p>Parse XML.  Convenience method for Nokogiri::XML::Document.parse\n"],["parse","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-parse","(string_or_io, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML)","<p>Parse an XML file.\n<p><code>string_or_io</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as …\n"],["parse","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-parse","(tags, options = ParseOptions::DEFAULT_XML, &block)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>\n"],["parse","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parse","(string_or_io, options = nil)","<p>Parse <code>string_or_io</code> as a document fragment within the context of <strong>this</strong> node.  Returns a XML::NodeSet containing …\n"],["parse","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse","(thing, &block)","<p>Parse given <code>thing</code> which may be a string containing xml, or an IO object.\n"],["parse","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-parse","(string, modules = {})","<p>Parse the stylesheet in <code>xsl</code>, registering optional <code>modules</code> as custom class handlers.\n<p>Parameters &mdash; \n<p><code>xsl</code> (String …\n"],["parse_file","Nokogiri::HTML4::SAX::Parser","Nokogiri/HTML4/SAX/Parser.html#method-i-parse_file","(filename, encoding = \"UTF-8\")","<p>Parse a file with <code>filename</code>\n"],["parse_file","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_file","(filename)","<p>Parse a file with <code>filename</code>\n"],["parse_io","Nokogiri::HTML4::SAX::Parser","Nokogiri/HTML4/SAX/Parser.html#method-i-parse_io","(io, encoding = \"UTF-8\")","<p>Parse given <code>io</code>\n"],["parse_io","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_io","(io, encoding = @encoding)","<p>Parse given <code>io</code>\n"],["parse_memory","Nokogiri::HTML4::SAX::Parser","Nokogiri/HTML4/SAX/Parser.html#method-i-parse_memory","(data, encoding = \"UTF-8\")","<p>Parse html stored in <code>data</code> using <code>encoding</code>\n"],["parse_memory","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_memory","(data)",""],["parse_stylesheet_doc","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-c-parse_stylesheet_doc","(p1)","<p>Parse an XSLT::Stylesheet from <code>document</code>.\n<p>Parameters &mdash; \n<p><code>document</code> (Nokogiri::XML::Document) the document to …\n\n"],["parse_with","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-parse_with","(p1)","<p>Use <code>sax_handler</code> and parse the current document\n"],["path","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-path","()","<p>Returns the path associated with this Node\n"],["pointer_id","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-pointer_id","()","<p>Returns &mdash; A unique id for this node based on the internal memory structures. This method is used by #== …\n\n"],["pop","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-pop","()","<p>Removes the last element from set and returns it, or <code>nil</code> if the set is empty\n"],["prefix","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-prefix","()","<p>Returns &mdash; The content element’s namespace <code>prefix</code>.\n\n"],["prefix","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-prefix","()","<p>Returns &mdash; The namespace <code>prefix</code> for this element declaration.\n\n"],["prefix","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-prefix","()","<p>Return the prefix for this Namespace, or <code>nil</code> if there is no prefix (e.g., default namespace).\n<p><strong>Example</strong> …\n"],["prefix","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-prefix","()","<p>Get the shorthand reference to the namespace associated with the node.\n"],["prepend_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-prepend_child","(node_or_tags)","<p>Add <code>node_or_tags</code> as the first child of this Node.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["previous","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous","()",""],["previous=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous-3D","(node_or_tags)",""],["previous_element","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous_element","()","<p>Returns the previous Nokogiri::XML::Element type sibling node.\n"],["previous_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous_sibling","()","<p>Returns the previous sibling node\n"],["processing_instruction","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-processing_instruction","(name, content)","<p>Called when processing instructions are found <code>name</code> is the target of the instruction <code>content</code> is the value …\n"],["processing_instruction?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-processing_instruction-3F","()","<p>Returns true if this is a ProcessingInstruction node\n"],["push","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-push","(p1)","<p>Append <code>node</code> to the NodeSet.\n"],["quote_params","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-quote_params","(params)","<p>Quote parameters in <code>params</code> for stylesheet safety. See Nokogiri::XSLT::Stylesheet.transform for example …\n"],["read","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-read","()","<p>Move the Reader forward through the XML document.\n"],["read_io","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-c-read_io","(io, url = nil, encoding = nil, **options)","<p>Create a new document from an IO object.\n<p>💡 Most users should prefer Document.parse to this method.\n"],["read_io","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-read_io","(p1, p2, p3, p4)","<p>Create a new document from an IO object\n"],["read_memory","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-c-read_memory","(string, url = nil, encoding = nil, **options)","<p>Create a new document from a String.\n<p>💡 Most users should prefer Document.parse to this method.\n"],["read_memory","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-read_memory","(p1, p2, p3, p4)","<p>Create a new document from a String\n"],["read_memory","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-read_memory","(p1, p2 = v2)","<p>Create a new RelaxNG from the contents of <code>string</code>\n"],["read_memory","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-read_memory","(p1, p2 = v2)","<p>Create a new schema parsed from the contents of <code>string</code>\n<p>Parameters &mdash; \n<p><code>string</code>: String containing XML to be …\n\n"],["read_only?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-read_only-3F","()","<p>Is this a read only node?\n"],["recovery","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-recovery","()","<p>Should this parser recover from structural errors? It will not stop processing file on structural errors …\n"],["recovery=","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-recovery-3D","(p1)","<p>Should this parser recover from structural errors? It will not stop processing file on structural errors …\n"],["register","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-register","(uri, custom_handler_class)","<p>Register a class that implements custom XSLT transformation functions.\n<p>⚠ The XSLT handler classes are …\n"],["register_namespaces","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_namespaces","(namespaces)","<p>Register namespaces in <code>namespaces</code>\n"],["register_ns","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_ns","(p1, p2)","<p>Register the namespace with <code>prefix</code> and <code>uri</code> for use in future queries.\n<p>Returns &mdash; <code>self</code>\n\n"],["register_variable","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_variable","(p1, p2)","<p>Register the variable <code>name</code> with <code>value</code> for use in future queries.\n<p>Returns &mdash; <code>self</code>\n\n"],["related_class","Nokogiri::ClassResolver","Nokogiri/ClassResolver.html#method-i-related_class","(class_name)","<p>Find a class constant within the\n<p>Some examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">related_class</span>(<span class=\"ruby-string\">&quot;DocumentFragment&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["related_class","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-related_class","(class_name)","<p>Find a class constant within the\n<p>Some examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">related_class</span>(<span class=\"ruby-string\">&quot;DocumentFragment&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["related_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-related_class","(class_name)","<p>Find a class constant within the\n<p>Some examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">related_class</span>(<span class=\"ruby-string\">&quot;DocumentFragment&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remove","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove","()",""],["remove","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove","()",""],["remove_attr","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_attr","(name)","<p>Remove the attributed named <code>name</code> from all Node objects in the NodeSet\n"],["remove_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove_attribute","(name)","<p>Remove the attribute named <code>name</code>\n"],["remove_attribute","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_attribute","(name)",""],["remove_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove_class","(names = nil)","<p>Remove HTML CSS classes from this node. Any CSS class names in <code>css_classes</code> that exist in this node’s …\n"],["remove_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_class","(name = nil)","<p>Remove the class attribute <code>name</code> from all Node objects in the NodeSet.\n<p>See Nokogiri::XML::Node#remove_class …\n"],["remove_namespaces!","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-remove_namespaces-21","()","<p>Remove all namespaces from all nodes in the document.\n<p>This could be useful for developers who either don’t …\n"],["replace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-replace","(node_or_tags)","<p>Replace this Node with <code>node_or_tags</code>.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment, …\n"],["replace_entities","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities","()","<p>Should this parser replace entities?  &amp;amp; will get converted to ‘&amp;’ if set to true …\n"],["replace_entities","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-replace_entities","()","<p>Should this parser replace entities?  &amp;amp; will get converted to ‘&amp;’ if set to true …\n"],["replace_entities=","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities-3D","(p1)","<p>Should this parser replace entities?  &amp;amp; will get converted to ‘&amp;’ if set to true …\n"],["replace_entities=","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-replace_entities-3D","(p1)","<p>Should this parser replace entities?  &amp;amp; will get converted to ‘&amp;’ if set to true …\n"],["required_attributes","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-required_attributes","()",""],["respond_to_missing?","Nokogiri::Decorators::Slop","Nokogiri/Decorators/Slop.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["reverse","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-reverse","()","<p>Returns a new NodeSet containing all the nodes in the NodeSet in reverse order\n"],["root","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-root","()","<p>Get the root node for this document.\n"],["root=","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-root-3D","(p1)","<p>Set the root element on this document\n"],["save_end_tag?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-save_end_tag-3F","()",""],["search","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-search","(*rules)","<p>Search this fragment for <code>paths</code>. <code>paths</code> must be one or more XPath or CSS queries.\n<p>For more information see …\n"],["search","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-search","(*args)","<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more XPath or CSS queries:\n\n<pre>node.search(&quot;div.employee&quot;, ...</pre>\n"],["search","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-search","(*args)","<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more XPath or CSS queries:\n\n<pre>node.search(&quot;div.employee&quot;, ...</pre>\n"],["search","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-search","(*args)","<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more XPath or CSS queries:\n\n<pre>node.search(&quot;div.employee&quot;, ...</pre>\n"],["self_closing?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-self_closing-3F","()",""],["serialize","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-serialize","(options = {})","<p>Serialize Node using <code>options</code>. Save options can also be set using a block.\n<p>See also Nokogiri::XML::Node::SaveOptions …\n"],["serialize","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-serialize","()",""],["serialize","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-serialize","(*args, &block)","<p>Serialize Node using <code>options</code>. Save options can also be set using a block.\n<p>See also Nokogiri::XML::Node::SaveOptions …\n"],["serialize","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-serialize","(p1)","<p>Serialize <code>document</code> to an xml string, as specified by the <code>method</code> parameter in the Stylesheet.\n"],["set","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-set","(key, value = nil, &block)",""],["set_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-set_attribute","(name, value)",""],["shift","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-shift","()","<p>Returns the first element of the NodeSet and removes it.  Returns <code>nil</code> if the set is empty.\n"],["size","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-size","()",""],["slice","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-slice","(p1, p2 = v2)","<p>Element reference - returns the node at <code>index</code>, or returns a NodeSet containing nodes starting at <code>start</code> …\n"],["slop!","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-slop-21","()","<p>Explore a document with shortcut methods. See Nokogiri::Slop for details.\n<p>Note that any nodes that have …\n"],["start_document","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_document","()","<p>Called when document starts parsing\n"],["start_element","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_element","(name, attrs = [])","<p>Called at the beginning of an element\n<p><code>name</code> is the name of the tag\n<p><code>attrs</code> are an assoc list of namespaces …\n"],["start_element","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-start_element","(name, attrs = [])","<p>Handle the start_element event with <code>name</code> and <code>attrs</code>\n"],["start_element_namespace","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_element_namespace","(name, attrs = [], prefix = nil, uri = nil, ns = [])","<p>Called at the beginning of an element <code>name</code> is the element name <code>attrs</code> is a list of attributes <code>prefix</code> is …\n"],["start_element_namespace","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-start_element_namespace","(name, attrs = [], prefix = nil, uri = nil, ns = [])","<p>Called at the beginning of an element <code>name</code> is the element name <code>attrs</code> is a list of attributes <code>prefix</code> is …\n"],["state","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-state","()","<p>Get the state of the reader\n"],["strict","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-strict","()",""],["strict?","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-strict-3F","()",""],["swap","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-swap","(node_or_tags)","<p>Swap this Node for <code>node_or_tags</code>\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet …\n"],["system_id","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-system_id","()","<p>Get the System ID for this DTD\n"],["system_id","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-system_id","()","<p>Get the URI for a SYSTEM or PUBLIC Entity\n"],["text","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-text","(string)","<p>Create a Text Node with content of <code>string</code>\n"],["text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-text","()",""],["text","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-text","()",""],["text?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-text-3F","()","<p>Returns true if this is a Text node\n"],["title","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-title","()","<p>Get the title string of this document.  Return nil if there is no title tag.\n"],["title=","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-title-3D","(text)","<p>Set the title string of this document.\n<p>If a title element is already present, its content is replaced …\n"],["to_a","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_a","()","<p>Return this list as an Array\n"],["to_ary","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_ary","()",""],["to_html","Nokogiri::HTML4::Builder","Nokogiri/HTML4/Builder.html#method-i-to_html","()","<p>Convert the builder to HTML\n"],["to_html","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_html","(*args)","<p>Convert this DocumentFragment to html See Nokogiri::XML::NodeSet#to_html\n"],["to_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_html","(options = {})","<p>Serialize this Node to HTML\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_html</span>\n</pre>\n<p>See Node#write_to for a list of <code>options</code>.  For formatted output, …\n"],["to_html","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_html","(*args)","<p>Convert this NodeSet to HTML\n"],["to_java","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-to_java","","<p>⚠ This method is only available when running JRuby.\n<p>Returns the underlying Java DOM document object for …\n"],["to_s","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-to_s","()","<p>Convert this description to a string\n"],["to_s","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_s","()","<p>Convert this DocumentFragment to a string\n"],["to_s","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_s","()","<p>Turn this node in to a string.  If the document is HTML, this method returns html.  If the document is …\n"],["to_s","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_s","()","<p>Convert this NodeSet to a string.\n"],["to_s","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-to_s","()",""],["to_s","Nokogiri::XML::XPath::SyntaxError","Nokogiri/XML/XPath/SyntaxError.html#method-i-to_s","()",""],["to_str","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_str","()",""],["to_xhtml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_xhtml","(*args)","<p>Convert this DocumentFragment to xhtml See Nokogiri::XML::NodeSet#to_xhtml\n"],["to_xhtml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_xhtml","(options = {})","<p>Serialize this Node to XHTML using <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xhtml</span>(<span class=\"ruby-value\">indent:</span> <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">encoding:</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>)\n</pre>\n<p>See Node#write_to …\n"],["to_xhtml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_xhtml","(*args)","<p>Convert this NodeSet to XHTML\n"],["to_xml","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-to_xml","(*args)","<p>Convert this Builder object to XML\n"],["to_xml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_xml","(*args)","<p>Convert this DocumentFragment to xml See Nokogiri::XML::NodeSet#to_xml\n"],["to_xml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_xml","(options = {})","<p>Serialize this Node to XML using <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xml</span>(<span class=\"ruby-value\">indent:</span> <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">encoding:</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>)\n</pre>\n<p>See Node#write_to for …\n"],["to_xml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_xml","(*args)","<p>Convert this NodeSet to XML\n"],["transform","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-transform","(p1, p2 = v2)","<p>Transform an XML::Document as defined by an XSLT::Stylesheet.\n<p>Parameters &mdash; \n<p><code>document</code> (Nokogiri::XML::Document …\n"],["traverse","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-traverse","(&block)","<p>Yields self and all children to <code>block</code> recursively.\n"],["type","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-type","()","<p>Returns &mdash; The content element’s <code>type</code>. Possible values are <code>PCDATA</code>, <code>ELEMENT</code>, <code>SEQ</code>, or <code>OR</code>.\n\n"],["type","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-type","()",""],["unlink","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-unlink","()","<p>Unlink this node from its current context.\n"],["unlink","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-unlink","()","<p>Unlink this NodeSet and all Node objects it contains from their current context.\n"],["url","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-url","()","<p>Get the url name for this document.\n"],["valid?","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-valid-3F","(thing)","<p>Returns true if <code>thing</code> is a valid Nokogiri::XML::Document or file.\n"],["validate","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-validate","(p1)","<p>Validate <code>document</code> returning a list of errors\n"],["validate","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-validate","()","<p>Validate this Document against it’s DTD.  Returns a list of errors on the document or <code>nil</code> when there …\n"],["validate","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-validate","(thing)","<p>Validate <code>thing</code> against this schema.  <code>thing</code> can be a Nokogiri::XML::Document object, or a filename.   …\n"],["value","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-value","()","<p>Get the text value of the node if present. Returns a utf-8 encoded string.\n"],["value=","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-value-3D","(p1)","<p>Set the value for this Attr to <code>content</code>. Use ‘nil` to remove the value (e.g., a HTML boolean attribute). …\n"],["value?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-value-3F","(value)","<p>Does this Node’s attributes include &lt;value&gt;\n"],["value?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-value-3F","()","<p>Does this node have a text value?\n"],["values","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-values","()","<p>Get the attribute values for this Node.\n"],["version","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-version","()","<p>Get the XML version for this Document\n"],["warning","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-warning","(string)","<p>Called on document warnings <code>string</code> contains the warning\n"],["warning","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-warning","(msg)",""],["warning?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-warning-3F","()","<p>return true if this is a warning\n"],["with","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-c-with","(root, &block)","<p>Create a builder with an existing root object.  This is for use when you have an existing document that …\n"],["wrap","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-wrap","","<p>⚠ This method is only available when running JRuby.\n<p>Create a Document using an existing Java DOM document …\n"],["wrap","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-wrap","(node_or_tags)","<p>Wrap this Node with the node parsed from <code>markup</code> or a dup of the <code>node</code>.\n<p>Parameters &mdash; \n<p><strong>markup</strong> (String) Markup …\n"],["wrap","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-wrap","(node_or_tags)","<p>Wrap each member of this NodeSet with the node parsed from <code>markup</code> or a dup of the <code>node</code>.\n<p>Parameters &mdash; \n<p><strong>markup</strong> …\n"],["write","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-i-write","(chunk, last_chunk = false)","<p>Write a <code>chunk</code> of HTML to the PushParser.  Any callback methods that can be called will be called immediately. …\n"],["write","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-write","(chunk, last_chunk = false)","<p>Write a <code>chunk</code> of XML to the PushParser.  Any callback methods that can be called will be called immediately. …\n"],["write_html_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_html_to","(io, options = {})","<p>Write Node as HTML to <code>io</code> with <code>options</code>\n<p>See Node#write_to for a list of <code>options</code>\n"],["write_to","Nokogiri::HTML5::Node","Nokogiri/HTML5/Node.html#method-i-write_to","(io, *options)",""],["write_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_to","(io, *options)","<p>Serialize this node or document to <code>io</code>.\n<p>Parameters &mdash; \n<p><code>io</code> (IO) An IO-like object to which the serialized content …\n"],["write_xhtml_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_xhtml_to","(io, options = {})","<p>Write Node as XHTML to <code>io</code> with <code>options</code>\n<p>See Node#write_to for a list of <code>options</code>\n"],["write_xml_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_xml_to","(io, options = {})","<p>Write Node as XML to <code>io</code> with <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">write_xml_to</span> <span class=\"ruby-identifier\">io</span>, <span class=\"ruby-value\">:encoding</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>\n</pre>\n<p>See Node#write_to for a …\n"],["xml?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-xml-3F","()","<p>Returns true if this is an XML::Document node\n"],["xml_version","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-xml_version","()","<p>Get the XML version of the document being read\n"],["xmldecl","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML declaration is parsed\n"],["xpath","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-xpath","(*args)","<p>Search this node for XPath <code>paths</code>. <code>paths</code> must be one or more XPath queries.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">xpath</span>(<span class=\"ruby-string\">&#39;.//title&#39;</span>)\n</pre>\n<p>A hash …\n"],["xpath","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-xpath","(*args)","<p>Search this node set for XPath <code>paths</code>. <code>paths</code> must be one or more XPath queries.\n<p>For more information see …\n"],["xpath","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-xpath","(*args)","<p>Search this node for XPath <code>paths</code>. <code>paths</code> must be one or more XPath queries.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">xpath</span>(<span class=\"ruby-string\">&#39;.//title&#39;</span>)\n</pre>\n<p>A hash …\n"],["xpath_doctype","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-xpath_doctype","()","<p>Returns &mdash; The document type which determines CSS-to-XPath translation.\n\n<p>See XPathVisitor for more information. …\n"],["xpath_doctype","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-i-xpath_doctype","()","<p>Returns &mdash; The document type which determines CSS-to-XPath translation.\n\n<p>See CSS::XPathVisitor for more information. …\n"],["xpath_doctype","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-xpath_doctype","()","<p>Returns &mdash; The document type which determines CSS-to-XPath translation.\n\n<p>See XPathVisitor for more information. …\n"],["xpath_for","Nokogiri::CSS","Nokogiri/CSS.html#method-c-xpath_for","(selector, options = {})","<p>Translate a CSS selector to the equivalent XPath query.\n<p>Parameters &mdash; \n<p><code>selector</code> (String) The CSS selector …\n"],["|","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-7C","(p1)","<p>Returns a new set built by merging the set and the elements of the given set.\n"],["README","","README_md.html","","<p>Nokogiri\n<p>Nokogiri (鋸) makes it easy and painless to work with XML and HTML from Ruby. It provides a sensible, …\n"]]}}